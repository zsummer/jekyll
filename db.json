{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1547195719499},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1547195719498},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1547195719498},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1547195719502},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1547195719502},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1547195719503},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1547195719503},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1547195719505},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1547195719506},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1547195719505},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1547195719504},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1547195719506},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1547195719508},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1547195719507},{"_id":"themes/next/_config.yml","hash":"c74553d63a14e443b79116f9d18a5868f37c0820","modified":1547196058877},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1547195719563},{"_id":"source/_posts/2017-01-01-pain.md","hash":"b2fbf303809e89f100fe407435ee5af666ce8b05","modified":1547733831591},{"_id":"source/_posts/2017-07-30-far-tommorrow.md","hash":"3596affd6f4b65f9241d76a3c468726fe1869247","modified":1547733837471},{"_id":"source/_posts/2017-09-06-dream-woods.md","hash":"76670a810113a09e9d23cfe6cbf9d4f0fa75587e","modified":1547733844446},{"_id":"source/_posts/2017-09-19-world-line-collect.md","hash":"b5f8a3509ae86cceaeaf416a9633d9e2ddca7f44","modified":1547733847901},{"_id":"source/_posts/2017-08-06-tiger-tea.md","hash":"da83671fee1db2e61c8a0de1bbf57d6fe63c44e3","modified":1547733840782},{"_id":"source/_posts/2017-10-01-lullabye.md","hash":"d7fac6b2bff3dd9c01f69af527e59e612045376d","modified":1551877434364},{"_id":"source/_posts/2017-10-18-revolt.md","hash":"f76fe93a12d3e2160185efa313c90bb8dd0084d2","modified":1547733856181},{"_id":"source/_posts/2017-10-26-romanticism.md","hash":"16697a72f77a4e27da6466e272a5bc727f5a8dd5","modified":1547733859253},{"_id":"source/_posts/2018-12-22-attribute.md","hash":"eed1a559388d0404f979c4f0a7eca93971a8a573","modified":1547733863182},{"_id":"source/_posts/2019-01-07-elite.md","hash":"340dd9ad2b2c1e1c42f77001e75957d1329bf07c","modified":1547733865997},{"_id":"source/_posts/2019-01-08-fps-synchronization.md","hash":"c49ab040db736c86c0a6e60e919b2eb87e2a7179","modified":1547733869967},{"_id":"source/_posts/2019-01-10-unordered_map.md","hash":"547fba7aed6d839bea3c1aab2dfab9969fa9826f","modified":1547733872657},{"_id":"source/_posts/2019-01-11-AT&T-INTEL-ASM.md","hash":"b77fa27fdaad4e2962d7cf3ca1de98a7257b8fd0","modified":1547733875855},{"_id":"source/_posts/2019-01-17-Odyssey.md","hash":"707a41c44e7b6e24ace70ccb50524a9c985de5a6","modified":1550560956518},{"_id":"source/_posts/2019-01-17-type-system-erase.md","hash":"a8728a3165377c2878dce9f6d9c75ad239176032","modified":1550560619703},{"_id":"source/_posts/2019-09-16-problem-domain.md","hash":"9af3651a008c004b67319f781521133dea901c45","modified":1572857728345},{"_id":"source/_posts/2019-10-01-sdm.md","hash":"bca815c6c869e72187e25263a79c33b484f46f9f","modified":1572857743984},{"_id":"source/_posts/2019-06-08-rvo.md","hash":"82259dc5b8dd9068f22fa76ffaf3c8b68d3a6c9f","modified":1559990310899},{"_id":"source/_posts/2019-02-14-vba.md","hash":"94b9bd092658acb077e1607c28b8e6950e038873","modified":1550560621822},{"_id":"source/_posts/2019-11-04-aslr.md","hash":"bf7d0c80cd94306892b761adf460874b4d5cd4f8","modified":1573031091557},{"_id":"source/_posts/2019-11-05-fast-check-linux.md","hash":"e147c90c454baf69ab07e0e056d15c97cfa8537e","modified":1572965020235},{"_id":"source/memo/index.md","hash":"a579b7568ce99d9c23588b1b954b2191198b09cd","modified":1547195719343},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1547195719500},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1547195719500},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1547195719501},{"_id":"source/about/index.md","hash":"5204117da7cb5e5861e2e6a9d5faee1e28c8191b","modified":1547195719341},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1547195719509},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1547195719510},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1547195719511},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1547195719510},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1547195719512},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1547195719511},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1547195719513},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1547195719513},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1547195719514},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1547195719514},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1547195719564},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1547195719564},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1547195719515},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1547195719515},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1547195719516},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1547195719518},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1547195719558},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1547195719559},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1547195719560},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1547195719560},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1547195719561},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1547195719562},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1547195719562},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1547195719750},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1547195719751},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1547195719751},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719652},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1547195719566},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1547195719569},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1547195719570},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1547195719572},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1547195719573},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1547195719574},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1547195719575},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1547195719575},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1547195719576},{"_id":"themes/next/layout/_macro/post.swig","hash":"377d82f753178db7f2570ad347c29409a19de985","modified":1547195719521},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1547195719520},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1547195719521},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1547195719522},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1547195719520},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5dcdacbf3e4350d5e5cf3e5b25a49fc4b08c58d4","modified":1547195719522},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1547195719524},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1547195719527},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1547195719523},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1547195719527},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1547195719525},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1547195719526},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1547195719528},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547195719518},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547195719517},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1547195719533},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1547195719534},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1547195719551},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1547195719538},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1547195719551},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1547195719552},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1547195719552},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1547195719553},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1547195719553},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1547195719651},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1547195719653},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547195719654},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1547195719666},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1547195719667},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1547195719665},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547195719670},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547195719670},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1547195719667},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1547195719668},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1547195719669},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1547195719668},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1547195719670},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1547195719671},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547195719672},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719536},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719537},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719632},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719632},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719634},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719649},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719651},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1547195719525},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1547195719526},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1547195719529},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1547195719529},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1547195719530},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1547195719531},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1547195719531},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1547195719532},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1547195719532},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547195719538},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547195719536},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1547195719541},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1547195719540},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1547195719542},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1547195719542},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1547195719543},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1547195719544},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1547195719541},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1547195719545},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1547195719545},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1547195719544},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1547195719535},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1547195719546},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1547195719547},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1547195719548},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1547195719547},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1547195719548},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1547195719550},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1547195719549},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1547195719549},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1547195719555},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1547195719558},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1547195719557},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1547195719556},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1547195719631},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1547195719633},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1547195719633},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1547195719631},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1547195719649},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1547195719649},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1547195719650},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1547195719651},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547195719692},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1547195719705},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547195719688},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1547195719706},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1547195719694},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1547195719706},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1547195719707},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1547195719710},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1547195719711},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1547195719711},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1547195719710},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1547195719712},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1547195719726},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1547195719728},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1547195719727},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1547195719728},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1547195719729},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1547195719730},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547195719730},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547195719731},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547195719732},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547195719733},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547195719733},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547195719734},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547195719734},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547195719735},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547195719735},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547195719737},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547195719736},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547195719737},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547195719736},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1547195719724},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1547195719738},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1547195719739},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1547195719740},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1547195719740},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1547195719746},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1547195719746},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547195719748},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547195719749},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547195719749},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547195719673},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1547195719674},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547195719674},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547195719673},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1547195719675},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547195719676},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1547195719676},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1547195719677},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547195719678},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547195719679},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1547195719679},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547195719725},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1547195719555},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1547195719554},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1547195719627},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1547195719628},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1547195719629},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1547195719630},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1547195719629},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1547195719580},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1547195719584},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1547195719584},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1547195719630},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1547195719582},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1547195719581},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1547195719598},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1547195719615},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1547195719626},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1547195719636},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1547195719637},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1547195719636},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547195719638},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1547195719637},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1547195719638},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1547195719639},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1547195719641},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1547195719641},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1547195719642},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1547195719635},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547195719642},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1547195719643},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1547195719645},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1547195719645},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1547195719646},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1547195719647},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1547195719647},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1547195719648},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1547195719684},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547195719695},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1547195719687},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1547195719686},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547195719696},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547195719696},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547195719697},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547195719698},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547195719698},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1547195719703},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1547195719704},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1547195719704},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1547195719708},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547195719709},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547195719713},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1547195719713},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547195719714},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547195719744},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547195719745},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1547195719678},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1547195719685},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547195719722},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547195719723},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547195719747},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1547195719588},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1547195719589},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1547195719588},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1547195719591},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1547195719590},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1547195719586},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1547195719592},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1547195719595},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1547195719595},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1547195719596},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1547195719593},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1547195719597},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1547195719594},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1547195719599},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1547195719601},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1547195719598},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1547195719601},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1547195719602},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1547195719600},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1547195719605},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1547195719602},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1547195719605},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1547195719603},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1547195719606},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1547195719604},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1547195719607},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1547195719603},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1547195719608},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1547195719606},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1547195719609},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1547195719611},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1547195719611},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1547195719608},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1547195719612},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1547195719610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1547195719613},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1547195719612},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1547195719613},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1547195719614},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1547195719615},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1547195719616},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1547195719617},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1547195719617},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1547195719619},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1547195719618},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1547195719621},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1547195719619},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1547195719620},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1547195719620},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1547195719622},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1547195719622},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1547195719623},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1547195719624},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1547195719625},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1547195719624},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1547195719626},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1547195719625},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1547195719639},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547195719640},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547195719644},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547195719682},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547195719681},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547195719682},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547195719684},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547195719699},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1547195719700},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547195719702},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547195719700},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1547195719701},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1547195719702},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547195719716},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547195719721},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547195719718},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1547195719691},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1547195719720},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1547195719743},{"_id":"themes/next/source/images/avatar.png","hash":"0143509d8b5f1dd4c1eac48c5a112ba2f09efd3b","modified":1547195719665},{"_id":"public/memo/index.html","hash":"e70747e9e77d975267fb7fded663d5cc4c501981","modified":1573034857535},{"_id":"public/about/index.html","hash":"1cdc75fcfdc19425a2600fe3516f2eaa55a0befe","modified":1573034857536},{"_id":"public/2019/10/01/2019-10-01-sdm/index.html","hash":"ffb43c3038d7f3d74db7417559414c22ccd8218f","modified":1573034857537},{"_id":"public/2019/02/14/2019-02-14-vba/index.html","hash":"eeeee59a718136ea8220d33c917865e52b4465f3","modified":1573034857537},{"_id":"public/2017/10/26/2017-10-26-romanticism/index.html","hash":"14f1db897f8b75b9444c01b3496584619628f7a4","modified":1573034857537},{"_id":"public/2017/10/18/2017-10-18-revolt/index.html","hash":"425662dbdd082a98c76dc12fa7b86e8bf4935337","modified":1573034857537},{"_id":"public/2017/10/01/2017-10-01-lullabye/index.html","hash":"0756dc463e77015f959d15c8fc3729c058a62db6","modified":1573034857537},{"_id":"public/2017/09/19/2017-09-19-world-line-collect/index.html","hash":"3df767b9ec8e82fb470e8e73c865f7a6c3761741","modified":1573034857537},{"_id":"public/2017/09/06/2017-09-06-dream-woods/index.html","hash":"d221d29f913d3ee92a76d3e8f19f0a891d26a728","modified":1573034857537},{"_id":"public/2017/08/06/2017-08-06-tiger-tea/index.html","hash":"44750767d5faf97e306341f26975faef5b89468d","modified":1573034857537},{"_id":"public/2017/07/30/2017-07-30-far-tommorrow/index.html","hash":"e7e59c327c96ecda234f2bce2313b5b0fd70f644","modified":1573034857537},{"_id":"public/2017/01/01/2017-01-01-pain/index.html","hash":"6a2a3d99534939487a2bf5b1f8055eae7effd787","modified":1573034857537},{"_id":"public/archives/index.html","hash":"0a7e110542723ae36662eb20f476f97c721e9ca4","modified":1573034857537},{"_id":"public/archives/2017/index.html","hash":"3c5940ce58bcf8b02998199f395cf17e554a3403","modified":1573034857537},{"_id":"public/archives/2017/01/index.html","hash":"2bd9c0c64452ee0d9402c6cb63938a536889717d","modified":1573034857537},{"_id":"public/archives/2017/07/index.html","hash":"8d9b6887c2f995cbd8eeb77eee53cc6a0910ad3a","modified":1573034857537},{"_id":"public/archives/page/2/index.html","hash":"3f62916f9943ffd861f7167365b976b44686028b","modified":1573034857537},{"_id":"public/archives/2017/08/index.html","hash":"7612ddf3c8702f49e1af18f2c46f942e4ee35494","modified":1573034857538},{"_id":"public/archives/2017/10/index.html","hash":"1e544529b9f158da6a9eeb26e94d068f013d1c49","modified":1573034857538},{"_id":"public/archives/2017/09/index.html","hash":"e4dd9ba75047b52263869e2d2d0e4467e20e9b30","modified":1573034857538},{"_id":"public/archives/2018/index.html","hash":"7414922921c836f0cb56f5142abc580a1cb61615","modified":1573034857538},{"_id":"public/archives/2018/12/index.html","hash":"7ca87bbead84d7b3a87af48a91591f02cb6a7315","modified":1573034857538},{"_id":"public/archives/2019/index.html","hash":"faf2ac9597a518aa76347352fdf205e911289728","modified":1573034857538},{"_id":"public/archives/2019/01/index.html","hash":"6b3a240626312cde82ba4c0f76a59c3bac7e6fa3","modified":1573034857538},{"_id":"public/archives/2019/02/index.html","hash":"556e580b9437b00bcbcc57032f5dcb4f057ce904","modified":1573034857538},{"_id":"public/archives/2019/06/index.html","hash":"54c25d1bf18a1800c950118d129d699a02594773","modified":1573034857538},{"_id":"public/archives/2019/09/index.html","hash":"c19628cd689370fd9e21f6dc85ded9bc8fa8627c","modified":1573034857538},{"_id":"public/archives/2019/10/index.html","hash":"6909ff89efed6c79d50deee6c4c9cefed0bb40a3","modified":1573034857538},{"_id":"public/categories/develop/index.html","hash":"fc07c3509e5aeb48c54ecd4d9a60705381ffa97d","modified":1573034857538},{"_id":"public/2019/09/16/2019-09-16-problem-domain/index.html","hash":"0bfe2147ab5311967a8f3ca858f4dd5e0c795946","modified":1573034857538},{"_id":"public/2019/06/08/2019-06-08-rvo/index.html","hash":"945ddab6d0467392350f02d91ff3a004d4de4cd2","modified":1573034857538},{"_id":"public/2019/01/17/2019-01-17-type-system-erase/index.html","hash":"4f4cfcd3286cf03e500cfba417c622a52d6c7096","modified":1573034857538},{"_id":"public/2019/01/29/2019-01-17-Odyssey/index.html","hash":"b97a13880c885d80bf269987983f9394f1b0c2e1","modified":1573034857538},{"_id":"public/2019/01/11/2019-01-11-AT&T-INTEL-ASM/index.html","hash":"258049b5c34e7f1baade941747c6c82572de1229","modified":1573034857538},{"_id":"public/2018/12/22/2018-12-22-attribute/index.html","hash":"7e9b0c2ea5cada47805a7957fdf19844508a76f6","modified":1573034857538},{"_id":"public/2019/01/10/2019-01-10-unordered_map/index.html","hash":"63f1a52d64655f1fb00673d64b850bb0232184af","modified":1573034857539},{"_id":"public/2019/01/07/2019-01-08-fps-synchronization/index.html","hash":"8be2ba082cbf51f4fef710060087dc5bfbed445a","modified":1573034857539},{"_id":"public/2019/01/07/2019-01-07-elite/index.html","hash":"3e100c8cc2e5ec00b8a8d251156601bbf162edbd","modified":1573034857539},{"_id":"public/index.html","hash":"3b58179538e304736a0b6465b2b564a459f01d79","modified":1573034857539},{"_id":"public/page/2/index.html","hash":"22258df65b43a3ea3b3a56750a997203eb6774ed","modified":1573034857539},{"_id":"public/archives/page/3/index.html","hash":"bac124509c4aee97e74a708a332d665aee8d8c22","modified":1573034857547},{"_id":"public/archives/2019/page/2/index.html","hash":"a650ebf0b29925909bc3bfe11ec86b903d953542","modified":1573034857547},{"_id":"public/archives/2019/11/index.html","hash":"87529a644bf5bc32abb5741f6698ee457fe966e6","modified":1573034857547},{"_id":"public/page/3/index.html","hash":"7279709846e70d3eb1d1abf80d16c495d99c8bac","modified":1573034857547},{"_id":"public/2019/11/05/2019-11-05-fast-check-linux/index.html","hash":"016a49b35171fb25581d2b5d1087b13ea21bc0ff","modified":1573034857547},{"_id":"public/2019/11/04/2019-11-04-aslr/index.html","hash":"e81d5fe31830e3cec3ce02ee4bba7e09026ad332","modified":1573034857547},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1573034857548},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1573034857548},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1573034857548},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1573034857548},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573034857548},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1573034857548},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573034857548},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1573034857548},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1573034857548},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1573034857548},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1573034857548},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1573034857548},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1573034857549},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1573034857549},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1573034857549},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1573034857549},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1573034857549},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1573034857549},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1573034857549},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1573034857549},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1573034857549},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1573034857549},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1573034857549},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1573034857549},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1573034857549},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1573034857549},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1573034857549},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1573034858235},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573034858235},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1573034858244},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1573034858245},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1573034858247},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1573034858247},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1573034858247},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1573034858247},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1573034858247},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1573034858247},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1573034858248},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1573034858248},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1573034858248},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1573034858249},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1573034858249},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1573034858249},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1573034858249},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1573034858249},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1573034858249},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1573034858249},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1573034858249},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1573034858249},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1573034858249},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1573034858249},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1573034858249},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1573034858249},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1573034858250},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1573034858250},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1573034858250},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1573034858250},{"_id":"public/css/main.css","hash":"785f88015c8690e73fcd418fe152371563d1d610","modified":1573034858250},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573034858250},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1573034858260},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1573034858260},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1573034858260},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1573034858260},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1573034858260},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1573034858260},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1573034858260},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1573034858260},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1573034858260},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1573034858261},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1573034858261},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1573034858261},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1573034858261},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1573034858289},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1573034858371},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573034858373},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1573034858440},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1573034858440},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1573034858442},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1573034858450},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1573034858450},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1573034858451},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1573034858451},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1573034858451},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1573034858451},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1573034858451},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1573034858930},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1573034858940},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1573034859457},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1573034860520},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1573034860520},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1573034860546},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1573034860582},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1573034860608},{"_id":"public/images/avatar.png","hash":"0143509d8b5f1dd4c1eac48c5a112ba2f09efd3b","modified":1573034860608},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1573034860705}],"Category":[{"name":"develop","_id":"ck2n4c6f5000c185ht9cbkbm2"}],"Data":[],"Page":[{"layout":"default","title":"Memo","_content":"\n#### URL收藏\n* Markdown语法：<http://wowubuntu.com/markdown>  \n* Git简明操作: <http://rogerdudler.github.io/git-guide/index.zh.html>    \n* LUA5.3DOC: <http://cloudwu.github.io/lua53doc>  \n* VS背景娘插件 <https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE>  \n\n#### Jekyll 本地调试环境搭建  \n* debian: apt-get install jekyll\n* mac: gem install jekyll\n* markdown previewer : atom==> <https://www.v2ex.com/t/249859>  \n* sublime  Ctrl+` <https://packagecontrol.io/installation#st3> install OmniMarkupPreviewer\n  \n<!-- Blog Comments -->\n<div class=\"media\">\n  <!-- UY BEGIN -->\n  <div id=\"uyan_frame\">\n  </div>\n  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\">\n  </script>\n  <!-- UY END -->\n</div>\n","source":"memo/index.md","raw":"---\nlayout: default\ntitle: \"Memo\"\n---\n\n#### URL收藏\n* Markdown语法：<http://wowubuntu.com/markdown>  \n* Git简明操作: <http://rogerdudler.github.io/git-guide/index.zh.html>    \n* LUA5.3DOC: <http://cloudwu.github.io/lua53doc>  \n* VS背景娘插件 <https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE>  \n\n#### Jekyll 本地调试环境搭建  \n* debian: apt-get install jekyll\n* mac: gem install jekyll\n* markdown previewer : atom==> <https://www.v2ex.com/t/249859>  \n* sublime  Ctrl+` <https://packagecontrol.io/installation#st3> install OmniMarkupPreviewer\n  \n<!-- Blog Comments -->\n<div class=\"media\">\n  <!-- UY BEGIN -->\n  <div id=\"uyan_frame\">\n  </div>\n  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\">\n  </script>\n  <!-- UY END -->\n</div>\n","date":"2019-01-11T08:35:19.343Z","updated":"2019-01-11T08:35:19.343Z","path":"memo/index.html","comments":1,"_id":"ck2n4c6ep0001185hkvojzogv","content":"<h4 id=\"URL收藏\"><a href=\"#URL收藏\" class=\"headerlink\" title=\"URL收藏\"></a>URL收藏</h4><ul>\n<li>Markdown语法：<a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"external\">http://wowubuntu.com/markdown</a>  </li>\n<li>Git简明操作: <a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"external\">http://rogerdudler.github.io/git-guide/index.zh.html</a>    </li>\n<li>LUA5.3DOC: <a href=\"http://cloudwu.github.io/lua53doc\" target=\"_blank\" rel=\"external\">http://cloudwu.github.io/lua53doc</a>  </li>\n<li>VS背景娘插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE\" target=\"_blank\" rel=\"external\">https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE</a>  </li>\n</ul>\n<h4 id=\"Jekyll-本地调试环境搭建\"><a href=\"#Jekyll-本地调试环境搭建\" class=\"headerlink\" title=\"Jekyll 本地调试环境搭建\"></a>Jekyll 本地调试环境搭建</h4><ul>\n<li>debian: apt-get install jekyll</li>\n<li>mac: gem install jekyll</li>\n<li>markdown previewer : atom==&gt; <a href=\"https://www.v2ex.com/t/249859\" target=\"_blank\" rel=\"external\">https://www.v2ex.com/t/249859</a>  </li>\n<li>sublime  Ctrl+` <a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"external\">https://packagecontrol.io/installation#st3</a> install OmniMarkupPreviewer</li>\n</ul>\n<!-- Blog Comments -->\n<div class=\"media\"><br>  <!-- UY BEGIN --><br>  <div id=\"uyan_frame\"><br>  </div><br>  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\"><br>  </script><br>  <!-- UY END --><br></div>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"URL收藏\"><a href=\"#URL收藏\" class=\"headerlink\" title=\"URL收藏\"></a>URL收藏</h4><ul>\n<li>Markdown语法：<a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"external\">http://wowubuntu.com/markdown</a>  </li>\n<li>Git简明操作: <a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"external\">http://rogerdudler.github.io/git-guide/index.zh.html</a>    </li>\n<li>LUA5.3DOC: <a href=\"http://cloudwu.github.io/lua53doc\" target=\"_blank\" rel=\"external\">http://cloudwu.github.io/lua53doc</a>  </li>\n<li>VS背景娘插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE\" target=\"_blank\" rel=\"external\">https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE</a>  </li>\n</ul>\n<h4 id=\"Jekyll-本地调试环境搭建\"><a href=\"#Jekyll-本地调试环境搭建\" class=\"headerlink\" title=\"Jekyll 本地调试环境搭建\"></a>Jekyll 本地调试环境搭建</h4><ul>\n<li>debian: apt-get install jekyll</li>\n<li>mac: gem install jekyll</li>\n<li>markdown previewer : atom==&gt; <a href=\"https://www.v2ex.com/t/249859\" target=\"_blank\" rel=\"external\">https://www.v2ex.com/t/249859</a>  </li>\n<li>sublime  Ctrl+` <a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"external\">https://packagecontrol.io/installation#st3</a> install OmniMarkupPreviewer</li>\n</ul>\n<!-- Blog Comments -->\n<div class=\"media\"><br>  <!-- UY BEGIN --><br>  <div id=\"uyan_frame\"><br>  </div><br>  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\"><br>  </script><br>  <!-- UY END --><br></div>\n"},{"layout":"default","title":"About","date":"2017-06-09T16:34:58.000Z","_content":"\n### 个人简介:  \n\n* 夏天  \n\n### 联系方式  \n\n* NONE  \n\n### 关于本站：\n\n* 如微风在耳边轻语 如夏虫在冬季沉眠   \n","source":"about/index.md","raw":"---\nlayout: default\ntitle: \"About\"\ndate: 2017-06-10 00:34:58\n---\n\n### 个人简介:  \n\n* 夏天  \n\n### 联系方式  \n\n* NONE  \n\n### 关于本站：\n\n* 如微风在耳边轻语 如夏虫在冬季沉眠   \n","updated":"2019-01-11T08:35:19.341Z","path":"about/index.html","comments":1,"_id":"ck2n4c6er0003185hlarplipr","content":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介:\"></a>个人简介:</h3><ul>\n<li>夏天  </li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>NONE  </li>\n</ul>\n<h3 id=\"关于本站：\"><a href=\"#关于本站：\" class=\"headerlink\" title=\"关于本站：\"></a>关于本站：</h3><ul>\n<li>如微风在耳边轻语 如夏虫在冬季沉眠   </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介:\"></a>个人简介:</h3><ul>\n<li>夏天  </li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>NONE  </li>\n</ul>\n<h3 id=\"关于本站：\"><a href=\"#关于本站：\" class=\"headerlink\" title=\"关于本站：\"></a>关于本站：</h3><ul>\n<li>如微风在耳边轻语 如夏虫在冬季沉眠   </li>\n</ul>\n"}],"Post":[{"title":"从梦境展开 到回归梦境","date":"2016-12-31T19:21:00.000Z","author":"yawei.zhang","_content":"我想 真正的知识是来自于对痛苦的体验与思考  \n因为现实中走投无路的痛苦  \n所以寻求认知的改变  \n寻找知识的表征.     \n\n在那个并不存在的仲夏夜  \n我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.  \n我望着满天璀璨的繁星  \n一簇簇相拥的  \n一串串排好的  \n还有横越天际明沙般的  \n倒映在我的眼眸中  \n在黑暗中轻盈的流转    \n我问你看到的星空是否也如此般的湍急  \n我问你时间的指针是不是在兀自疯狂的旋转.   \n\n没有任何声音的回应 夜晚一如此的宁静.  \n我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.  \n  <!-- more -->\n经验的快乐像是虚幻的拟春之物  \n喧嚣的人群只是遮蔽眼眸的盲流  \n我独自越过万水千山  \n走向空旷无垠的荒漠  \n没有迷人的风景  \n也没有鲜花和掌声  \n这是一个人烟罕至的边境  \n笼罩着天空的是格外真切的孤独和痛苦   \n在那世界的尽头  \n在所有存在都被虚无所吞噬的地方  \n一定还有着什么  \n那里是时空和因果的起点  \n或许自己穷尽生命所寻找的答案并不存在   \n也或许答案是什么也没有的虚无   \n而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     \n \n我回忆起少年时的一个梦境  \n我抱着课本从沾满露水的青草家园走来   \n雨后的辽阔的晴空   \n投射在水面倒影中斑驳的云彩  \n拂面吹来凉爽的微风  \n还有那翻过书页哗啦啦的声响  \n时间如同凝滞在岁月的琥珀中  \n我出神的望着远方.   \n\n从睡梦中醒来  \n我一如往常般记不起自己是在哪里  \n又是哪个时代  \n仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起   \n然后随着梦的消退   \n一点点重新铺展开来  \n这铺展开来的叫做现实  \n仿佛是来自于梦境   \n也或许会在某个黄昏的时候  \n重新回归于梦境.   \n\n","source":"_posts/2017-01-01-pain.md","raw":"---\ntitle: 从梦境展开 到回归梦境  \ndate: 2017-01-01 03:21:00\nauthor: yawei.zhang \n---\n我想 真正的知识是来自于对痛苦的体验与思考  \n因为现实中走投无路的痛苦  \n所以寻求认知的改变  \n寻找知识的表征.     \n\n在那个并不存在的仲夏夜  \n我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.  \n我望着满天璀璨的繁星  \n一簇簇相拥的  \n一串串排好的  \n还有横越天际明沙般的  \n倒映在我的眼眸中  \n在黑暗中轻盈的流转    \n我问你看到的星空是否也如此般的湍急  \n我问你时间的指针是不是在兀自疯狂的旋转.   \n\n没有任何声音的回应 夜晚一如此的宁静.  \n我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.  \n  <!-- more -->\n经验的快乐像是虚幻的拟春之物  \n喧嚣的人群只是遮蔽眼眸的盲流  \n我独自越过万水千山  \n走向空旷无垠的荒漠  \n没有迷人的风景  \n也没有鲜花和掌声  \n这是一个人烟罕至的边境  \n笼罩着天空的是格外真切的孤独和痛苦   \n在那世界的尽头  \n在所有存在都被虚无所吞噬的地方  \n一定还有着什么  \n那里是时空和因果的起点  \n或许自己穷尽生命所寻找的答案并不存在   \n也或许答案是什么也没有的虚无   \n而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     \n \n我回忆起少年时的一个梦境  \n我抱着课本从沾满露水的青草家园走来   \n雨后的辽阔的晴空   \n投射在水面倒影中斑驳的云彩  \n拂面吹来凉爽的微风  \n还有那翻过书页哗啦啦的声响  \n时间如同凝滞在岁月的琥珀中  \n我出神的望着远方.   \n\n从睡梦中醒来  \n我一如往常般记不起自己是在哪里  \n又是哪个时代  \n仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起   \n然后随着梦的消退   \n一点点重新铺展开来  \n这铺展开来的叫做现实  \n仿佛是来自于梦境   \n也或许会在某个黄昏的时候  \n重新回归于梦境.   \n\n","slug":"2017-01-01-pain","published":1,"updated":"2019-01-17T14:03:51.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6eh0000185hou4pfhxw","content":"<p>我想 真正的知识是来自于对痛苦的体验与思考<br>因为现实中走投无路的痛苦<br>所以寻求认知的改变<br>寻找知识的表征.     </p>\n<p>在那个并不存在的仲夏夜<br>我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.<br>我望着满天璀璨的繁星<br>一簇簇相拥的<br>一串串排好的<br>还有横越天际明沙般的<br>倒映在我的眼眸中<br>在黑暗中轻盈的流转<br>我问你看到的星空是否也如此般的湍急<br>我问你时间的指针是不是在兀自疯狂的旋转.   </p>\n<p>没有任何声音的回应 夜晚一如此的宁静.<br>我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.<br>  <a id=\"more\"></a><br>经验的快乐像是虚幻的拟春之物<br>喧嚣的人群只是遮蔽眼眸的盲流<br>我独自越过万水千山<br>走向空旷无垠的荒漠<br>没有迷人的风景<br>也没有鲜花和掌声<br>这是一个人烟罕至的边境<br>笼罩着天空的是格外真切的孤独和痛苦<br>在那世界的尽头<br>在所有存在都被虚无所吞噬的地方<br>一定还有着什么<br>那里是时空和因果的起点<br>或许自己穷尽生命所寻找的答案并不存在<br>也或许答案是什么也没有的虚无<br>而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     </p>\n<p>我回忆起少年时的一个梦境<br>我抱着课本从沾满露水的青草家园走来<br>雨后的辽阔的晴空<br>投射在水面倒影中斑驳的云彩<br>拂面吹来凉爽的微风<br>还有那翻过书页哗啦啦的声响<br>时间如同凝滞在岁月的琥珀中<br>我出神的望着远方.   </p>\n<p>从睡梦中醒来<br>我一如往常般记不起自己是在哪里<br>又是哪个时代<br>仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起<br>然后随着梦的消退<br>一点点重新铺展开来<br>这铺展开来的叫做现实<br>仿佛是来自于梦境<br>也或许会在某个黄昏的时候<br>重新回归于梦境.   </p>\n","site":{"data":{}},"excerpt":"<p>我想 真正的知识是来自于对痛苦的体验与思考<br>因为现实中走投无路的痛苦<br>所以寻求认知的改变<br>寻找知识的表征.     </p>\n<p>在那个并不存在的仲夏夜<br>我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.<br>我望着满天璀璨的繁星<br>一簇簇相拥的<br>一串串排好的<br>还有横越天际明沙般的<br>倒映在我的眼眸中<br>在黑暗中轻盈的流转<br>我问你看到的星空是否也如此般的湍急<br>我问你时间的指针是不是在兀自疯狂的旋转.   </p>\n<p>没有任何声音的回应 夜晚一如此的宁静.<br>我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.<br>","more":"<br>经验的快乐像是虚幻的拟春之物<br>喧嚣的人群只是遮蔽眼眸的盲流<br>我独自越过万水千山<br>走向空旷无垠的荒漠<br>没有迷人的风景<br>也没有鲜花和掌声<br>这是一个人烟罕至的边境<br>笼罩着天空的是格外真切的孤独和痛苦<br>在那世界的尽头<br>在所有存在都被虚无所吞噬的地方<br>一定还有着什么<br>那里是时空和因果的起点<br>或许自己穷尽生命所寻找的答案并不存在<br>也或许答案是什么也没有的虚无<br>而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     </p>\n<p>我回忆起少年时的一个梦境<br>我抱着课本从沾满露水的青草家园走来<br>雨后的辽阔的晴空<br>投射在水面倒影中斑驳的云彩<br>拂面吹来凉爽的微风<br>还有那翻过书页哗啦啦的声响<br>时间如同凝滞在岁月的琥珀中<br>我出神的望着远方.   </p>\n<p>从睡梦中醒来<br>我一如往常般记不起自己是在哪里<br>又是哪个时代<br>仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起<br>然后随着梦的消退<br>一点点重新铺展开来<br>这铺展开来的叫做现实<br>仿佛是来自于梦境<br>也或许会在某个黄昏的时候<br>重新回归于梦境.   </p>"},{"title":"太久的明天 让人视而不见","date":"2017-07-29T19:21:00.000Z","author":"yawei.zhang","_content":"我的世界里没有光  所有的星星也都坠落   \n一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中   \n我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离   \n我在想 我的存在是不是从来都是没有意义的 是错误的   \n我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  \n\n是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.   \n是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  \n\n是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   \n\n或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  \n\n或者本来就是这样吧 把自己骗过去就好.   \n\n","source":"_posts/2017-07-30-far-tommorrow.md","raw":"---\ntitle: 太久的明天 让人视而不见  \ndate: 2017-07-30 03:21:00\nauthor: yawei.zhang \n---\n我的世界里没有光  所有的星星也都坠落   \n一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中   \n我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离   \n我在想 我的存在是不是从来都是没有意义的 是错误的   \n我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  \n\n是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.   \n是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  \n\n是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   \n\n或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  \n\n或者本来就是这样吧 把自己骗过去就好.   \n\n","slug":"2017-07-30-far-tommorrow","published":1,"updated":"2019-01-17T14:03:57.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6eq0002185hse4mmbwp","content":"<p>我的世界里没有光  所有的星星也都坠落<br>一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中<br>我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离<br>我在想 我的存在是不是从来都是没有意义的 是错误的<br>我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  </p>\n<p>是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.<br>是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  </p>\n<p>是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   </p>\n<p>或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  </p>\n<p>或者本来就是这样吧 把自己骗过去就好.   </p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的世界里没有光  所有的星星也都坠落<br>一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中<br>我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离<br>我在想 我的存在是不是从来都是没有意义的 是错误的<br>我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  </p>\n<p>是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.<br>是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  </p>\n<p>是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   </p>\n<p>或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  </p>\n<p>或者本来就是这样吧 把自己骗过去就好.   </p>\n"},{"title":"illusion","date":"2017-09-05T17:03:00.000Z","author":"yawei.zhang","_content":"\n梦的深处 斑驳的光影  \n如草蛇般穿行过忽明忽暗的丛莽  \n<!-- more -->\n爬满藤蔓植物的森林  \n似乎想起了什么 \n什么也没有想起来  \n现实如流矢没入不曾预期的句点  \n戛然而止   \n不 没有结束      \n梦境从这里延续  \n一切都从这里开始   \n现实才是梦的终结  \n我在这里  \nyou stay with me  \nWell I could sleep forever   \n\n\n\n\n\n\n","source":"_posts/2017-09-06-dream-woods.md","raw":"---\ntitle: illusion   \ndate: 2017-09-06 01:03:00\nauthor: yawei.zhang \n---\n\n梦的深处 斑驳的光影  \n如草蛇般穿行过忽明忽暗的丛莽  \n<!-- more -->\n爬满藤蔓植物的森林  \n似乎想起了什么 \n什么也没有想起来  \n现实如流矢没入不曾预期的句点  \n戛然而止   \n不 没有结束      \n梦境从这里延续  \n一切都从这里开始   \n现实才是梦的终结  \n我在这里  \nyou stay with me  \nWell I could sleep forever   \n\n\n\n\n\n\n","slug":"2017-09-06-dream-woods","published":1,"updated":"2019-01-17T14:04:04.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6eu0004185hzuorqt22","content":"<p>梦的深处 斑驳的光影<br>如草蛇般穿行过忽明忽暗的丛莽<br><a id=\"more\"></a><br>爬满藤蔓植物的森林<br>似乎想起了什么<br>什么也没有想起来<br>现实如流矢没入不曾预期的句点<br>戛然而止<br>不 没有结束<br>梦境从这里延续<br>一切都从这里开始<br>现实才是梦的终结<br>我在这里<br>you stay with me<br>Well I could sleep forever   </p>\n","site":{"data":{}},"excerpt":"<p>梦的深处 斑驳的光影<br>如草蛇般穿行过忽明忽暗的丛莽<br>","more":"<br>爬满藤蔓植物的森林<br>似乎想起了什么<br>什么也没有想起来<br>现实如流矢没入不曾预期的句点<br>戛然而止<br>不 没有结束<br>梦境从这里延续<br>一切都从这里开始<br>现实才是梦的终结<br>我在这里<br>you stay with me<br>Well I could sleep forever   </p>"},{"title":"wolrd line convergence","date":"2017-09-18T17:03:00.000Z","author":"yawei.zhang","_content":"disturb the world line convergence  failed ..  \nworldline changes   failed ..  \nprolog beginning .. \nprolog saved one moment .. \nprolog crash ..  \nback stack failed .. \ngarbage collect ..  \nundo this worldline ..  \nthrown into the unknown ...    \n\n\n\n","source":"_posts/2017-09-19-world-line-collect.md","raw":"---\ntitle: wolrd line convergence\ndate: 2017-09-19 01:03:00\nauthor: yawei.zhang \n---\ndisturb the world line convergence  failed ..  \nworldline changes   failed ..  \nprolog beginning .. \nprolog saved one moment .. \nprolog crash ..  \nback stack failed .. \ngarbage collect ..  \nundo this worldline ..  \nthrown into the unknown ...    \n\n\n\n","slug":"2017-09-19-world-line-collect","published":1,"updated":"2019-01-17T14:04:07.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6ev0005185hsrs143mo","content":"<p>disturb the world line convergence  failed ..<br>worldline changes   failed ..<br>prolog beginning ..<br>prolog saved one moment ..<br>prolog crash ..<br>back stack failed ..<br>garbage collect ..<br>undo this worldline ..<br>thrown into the unknown …    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>disturb the world line convergence  failed ..<br>worldline changes   failed ..<br>prolog beginning ..<br>prolog saved one moment ..<br>prolog crash ..<br>back stack failed ..<br>garbage collect ..<br>undo this worldline ..<br>thrown into the unknown …    </p>\n"},{"title":"老虎来喝下午茶","date":"2017-08-06T07:24:00.000Z","author":"yawei.zhang","_content":"```  \n    老虎来到我的家, 它怯生生的问\"我的肚子好饿, 可不可以与你们一起喝下午茶呢?\".  \n\n    老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  \n\n    老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   \n\n    老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  \n\n    老虎离开我的家，它就再没有出现过.    \n\n```\n\n  **对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.    \n  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过**.   \n","source":"_posts/2017-08-06-tiger-tea.md","raw":"---\ntitle: 老虎来喝下午茶  \ndate: 2017-08-06 15:24:00\nauthor: yawei.zhang \n---\n```  \n    老虎来到我的家, 它怯生生的问\"我的肚子好饿, 可不可以与你们一起喝下午茶呢?\".  \n\n    老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  \n\n    老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   \n\n    老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  \n\n    老虎离开我的家，它就再没有出现过.    \n\n```\n\n  **对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.    \n  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过**.   \n","slug":"2017-08-06-tiger-tea","published":1,"updated":"2019-01-17T14:04:00.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6ew0006185hxxp88x8z","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">老虎来到我的家, 它怯生生的问&quot;我的肚子好饿, 可不可以与你们一起喝下午茶呢?&quot;.  </div><div class=\"line\"></div><div class=\"line\">老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  </div><div class=\"line\"></div><div class=\"line\">老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   </div><div class=\"line\"></div><div class=\"line\">老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  </div><div class=\"line\"></div><div class=\"line\">老虎离开我的家，它就再没有出现过.</div></pre></td></tr></table></figure>\n<p>  <strong>对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.<br>  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过</strong>.   </p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">老虎来到我的家, 它怯生生的问&quot;我的肚子好饿, 可不可以与你们一起喝下午茶呢?&quot;.  </div><div class=\"line\"></div><div class=\"line\">老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  </div><div class=\"line\"></div><div class=\"line\">老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   </div><div class=\"line\"></div><div class=\"line\">老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  </div><div class=\"line\"></div><div class=\"line\">老虎离开我的家，它就再没有出现过.</div></pre></td></tr></table></figure>\n<p>  <strong>对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.<br>  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过</strong>.   </p>\n"},{"title":"Lullabye For Lan","date":"2017-09-30T19:21:00.000Z","author":"yawei.zhang","_content":"\n","source":"_posts/2017-10-01-lullabye.md","raw":"---\ntitle: Lullabye For Lan\ndate: 2017-10-01 03:21:00\nauthor: yawei.zhang \n---\n\n","slug":"2017-10-01-lullabye","published":1,"updated":"2019-03-06T13:03:54.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6ey0007185h9ds87jg5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"浪漫主义","date":"2017-10-25T19:21:00.000Z","author":"yawei.zhang","_content":"人的感受是正当的  也是自然的   \n因为要完成自己的职责 完成自己的目标 完成他人的所有期望    \n做一个正义的 温暖的  无限包容的 开放的  神圣的人  \n所以去承受自己所不能承受的痛苦  \n无限的束缚和压抑自我感受  \n变成一具非人的行尸  \n这并不可能存在  也一点不浪漫   \n \n浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受  \n\n","source":"_posts/2017-10-26-romanticism.md","raw":"---\ntitle: 浪漫主义\ndate: 2017-10-26 03:21:00\nauthor: yawei.zhang \n---\n人的感受是正当的  也是自然的   \n因为要完成自己的职责 完成自己的目标 完成他人的所有期望    \n做一个正义的 温暖的  无限包容的 开放的  神圣的人  \n所以去承受自己所不能承受的痛苦  \n无限的束缚和压抑自我感受  \n变成一具非人的行尸  \n这并不可能存在  也一点不浪漫   \n \n浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受  \n\n","slug":"2017-10-26-romanticism","published":1,"updated":"2019-01-17T14:04:19.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6f00008185hom8avdtc","content":"<p>人的感受是正当的  也是自然的<br>因为要完成自己的职责 完成自己的目标 完成他人的所有期望<br>做一个正义的 温暖的  无限包容的 开放的  神圣的人<br>所以去承受自己所不能承受的痛苦<br>无限的束缚和压抑自我感受<br>变成一具非人的行尸<br>这并不可能存在  也一点不浪漫   </p>\n<p>浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>人的感受是正当的  也是自然的<br>因为要完成自己的职责 完成自己的目标 完成他人的所有期望<br>做一个正义的 温暖的  无限包容的 开放的  神圣的人<br>所以去承受自己所不能承受的痛苦<br>无限的束缚和压抑自我感受<br>变成一具非人的行尸<br>这并不可能存在  也一点不浪漫   </p>\n<p>浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受  </p>\n"},{"title":"Revolt","date":"2017-10-17T19:21:00.000Z","author":"yawei.zhang","_content":"把自己埋在冰土里  \n跟自己说再见  \n跟这个世界说声晚安   \n听着心脏的跳动一点点消失  \n一点点的宁静      \n在我的脑海中   \n在我的坟墓边上有一朵小花   \n安静的在黑夜里摇曳   \n脉搏停止跳动的那一刻   \n躯体本能的求生欲望失去了意志上最后的束缚   \nRevolt  !   \n新的意志在死去的躯体上开始重建  \n   \n\n","source":"_posts/2017-10-18-revolt.md","raw":"---\ntitle: Revolt\ndate: 2017-10-18 03:21:00\nauthor: yawei.zhang \n---\n把自己埋在冰土里  \n跟自己说再见  \n跟这个世界说声晚安   \n听着心脏的跳动一点点消失  \n一点点的宁静      \n在我的脑海中   \n在我的坟墓边上有一朵小花   \n安静的在黑夜里摇曳   \n脉搏停止跳动的那一刻   \n躯体本能的求生欲望失去了意志上最后的束缚   \nRevolt  !   \n新的意志在死去的躯体上开始重建  \n   \n\n","slug":"2017-10-18-revolt","published":1,"updated":"2019-01-17T14:04:16.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6f20009185h1uxrmext","content":"<p>把自己埋在冰土里<br>跟自己说再见<br>跟这个世界说声晚安<br>听着心脏的跳动一点点消失<br>一点点的宁静<br>在我的脑海中<br>在我的坟墓边上有一朵小花<br>安静的在黑夜里摇曳<br>脉搏停止跳动的那一刻<br>躯体本能的求生欲望失去了意志上最后的束缚<br>Revolt  !<br>新的意志在死去的躯体上开始重建  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>把自己埋在冰土里<br>跟自己说再见<br>跟这个世界说声晚安<br>听着心脏的跳动一点点消失<br>一点点的宁静<br>在我的脑海中<br>在我的坟墓边上有一朵小花<br>安静的在黑夜里摇曳<br>脉搏停止跳动的那一刻<br>躯体本能的求生欲望失去了意志上最后的束缚<br>Revolt  !<br>新的意志在死去的躯体上开始重建  </p>\n"},{"title":"unordered_map","date":"2019-01-10T09:21:00.000Z","author":"yawei.zhang","_content":"\n### 基本概念  \n* **哈希算法：** 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  \n* **哈希表：** 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  \n* **非哈希表：** 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   \n* **哈希冲突：** 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。    \n  <!-- more -->  \n\n### 常见的Hash函数  \n* **直接定址法：** 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  \n* **数字分析法：** 提取关键字中取值比较均匀的数字作为哈希地址。  \n* **除留余数法：** 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  \n* **分段叠加法：** 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  \n* **平方取中法：** 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  \n* **伪随机数法：** 采用一个伪随机数当作哈希函数。  \n\n### 常见的解决冲突方案   \n\n#### 开放定址法\n从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。  \n在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。  \n开放定址法的缺点在于**删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。**只到有下个元素插入才能真正删除该元素。  \n\n* **线行探查法**   \n线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  \n\n* **平方探查法**  \n平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²...直到找到空闲单元。\n在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  \n\n* **双散列函数探查法**  \n这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  \n\n#### 链地址法（拉链法）\n链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。\n\n注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，**jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。**   \n\n#### 再哈希法  \n就是同时构造多个不同的哈希函数：  \nHi = RHi(key)   i= 1,2,3 ... k;\n当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   \n\n#### 建立公共溢出区  \n将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  \n\n\n### 与map的区别   \n#### 迭代器失效情况   \n\n##### unordered_map:   \n| 操作 | 失效情况  |\n| --- | ---  |\n| 所有只读操作 swap std::swap                     | 决不  \n| clear  rehash  reserve operator=               |  始终  \n| insert  emplace  emplace_hint  operator[]      | 仅若重哈希导致  \n| erase                                           | 仅为指向被擦除元素者  \n\n##### map (通常实现为红黑树,非强制标准):   \n| 操作 | 失效情况  |\n| --- | ---  |\n| insert  emplace  emplace_hint  operator[]      | 没有失效情况  \n| erase                                           | 仅为指向被擦除元素者  \n\n\n##### 其他 \n* map是有序的，unordered_map是无序的  \n* 两者之间的查找速度不同（log(N)和N）  \n* 由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  \n* 迭代器失效情况, map更稳健    \n* 遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  \n* unordered_map不能反向遍历  \n* O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  \n* 散列表的时间复杂度仍然是O(N), 性能上map更稳定  \n\n","source":"_posts/2019-01-10-unordered_map.md","raw":"---\ntitle: unordered_map\ndate: 2019-01-10 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 基本概念  \n* **哈希算法：** 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  \n* **哈希表：** 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  \n* **非哈希表：** 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   \n* **哈希冲突：** 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。    \n  <!-- more -->  \n\n### 常见的Hash函数  \n* **直接定址法：** 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  \n* **数字分析法：** 提取关键字中取值比较均匀的数字作为哈希地址。  \n* **除留余数法：** 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  \n* **分段叠加法：** 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  \n* **平方取中法：** 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  \n* **伪随机数法：** 采用一个伪随机数当作哈希函数。  \n\n### 常见的解决冲突方案   \n\n#### 开放定址法\n从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。  \n在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。  \n开放定址法的缺点在于**删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。**只到有下个元素插入才能真正删除该元素。  \n\n* **线行探查法**   \n线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  \n\n* **平方探查法**  \n平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²...直到找到空闲单元。\n在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  \n\n* **双散列函数探查法**  \n这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  \n\n#### 链地址法（拉链法）\n链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。\n\n注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，**jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。**   \n\n#### 再哈希法  \n就是同时构造多个不同的哈希函数：  \nHi = RHi(key)   i= 1,2,3 ... k;\n当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   \n\n#### 建立公共溢出区  \n将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  \n\n\n### 与map的区别   \n#### 迭代器失效情况   \n\n##### unordered_map:   \n| 操作 | 失效情况  |\n| --- | ---  |\n| 所有只读操作 swap std::swap                     | 决不  \n| clear  rehash  reserve operator=               |  始终  \n| insert  emplace  emplace_hint  operator[]      | 仅若重哈希导致  \n| erase                                           | 仅为指向被擦除元素者  \n\n##### map (通常实现为红黑树,非强制标准):   \n| 操作 | 失效情况  |\n| --- | ---  |\n| insert  emplace  emplace_hint  operator[]      | 没有失效情况  \n| erase                                           | 仅为指向被擦除元素者  \n\n\n##### 其他 \n* map是有序的，unordered_map是无序的  \n* 两者之间的查找速度不同（log(N)和N）  \n* 由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  \n* 迭代器失效情况, map更稳健    \n* 遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  \n* unordered_map不能反向遍历  \n* O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  \n* 散列表的时间复杂度仍然是O(N), 性能上map更稳定  \n\n","slug":"2019-01-10-unordered_map","published":1,"updated":"2019-01-17T14:04:32.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6f3000a185hp77p66hz","content":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>哈希算法：</strong> 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  </li>\n<li><strong>哈希表：</strong> 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  </li>\n<li><strong>非哈希表：</strong> 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   </li>\n<li><strong>哈希冲突：</strong> 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。    <a id=\"more\"></a>  \n</li>\n</ul>\n<h3 id=\"常见的Hash函数\"><a href=\"#常见的Hash函数\" class=\"headerlink\" title=\"常见的Hash函数\"></a>常见的Hash函数</h3><ul>\n<li><strong>直接定址法：</strong> 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  </li>\n<li><strong>数字分析法：</strong> 提取关键字中取值比较均匀的数字作为哈希地址。  </li>\n<li><strong>除留余数法：</strong> 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  </li>\n<li><strong>分段叠加法：</strong> 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  </li>\n<li><strong>平方取中法：</strong> 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  </li>\n<li><strong>伪随机数法：</strong> 采用一个伪随机数当作哈希函数。  </li>\n</ul>\n<h3 id=\"常见的解决冲突方案\"><a href=\"#常见的解决冲突方案\" class=\"headerlink\" title=\"常见的解决冲突方案\"></a>常见的解决冲突方案</h3><h4 id=\"开放定址法\"><a href=\"#开放定址法\" class=\"headerlink\" title=\"开放定址法\"></a>开放定址法</h4><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。<br>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。<br>开放定址法的缺点在于<strong>删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。</strong>只到有下个元素插入才能真正删除该元素。  </p>\n<ul>\n<li><p><strong>线行探查法</strong><br>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  </p>\n</li>\n<li><p><strong>平方探查法</strong><br>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²…直到找到空闲单元。<br>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  </p>\n</li>\n<li><p><strong>双散列函数探查法</strong><br>这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  </p>\n</li>\n</ul>\n<h4 id=\"链地址法（拉链法）\"><a href=\"#链地址法（拉链法）\" class=\"headerlink\" title=\"链地址法（拉链法）\"></a>链地址法（拉链法）</h4><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。</p>\n<p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，<strong>jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</strong>   </p>\n<h4 id=\"再哈希法\"><a href=\"#再哈希法\" class=\"headerlink\" title=\"再哈希法\"></a>再哈希法</h4><p>就是同时构造多个不同的哈希函数：<br>Hi = RHi(key)   i= 1,2,3 … k;<br>当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   </p>\n<h4 id=\"建立公共溢出区\"><a href=\"#建立公共溢出区\" class=\"headerlink\" title=\"建立公共溢出区\"></a>建立公共溢出区</h4><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  </p>\n<h3 id=\"与map的区别\"><a href=\"#与map的区别\" class=\"headerlink\" title=\"与map的区别\"></a>与map的区别</h3><h4 id=\"迭代器失效情况\"><a href=\"#迭代器失效情况\" class=\"headerlink\" title=\"迭代器失效情况\"></a>迭代器失效情况</h4><h5 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map:\"></a>unordered_map:</h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>所有只读操作 swap std::swap</td>\n<td>决不  </td>\n</tr>\n<tr>\n<td>clear  rehash  reserve operator=</td>\n<td>始终  </td>\n</tr>\n<tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>仅若重哈希导致  </td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者  </td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"map-通常实现为红黑树-非强制标准\"><a href=\"#map-通常实现为红黑树-非强制标准\" class=\"headerlink\" title=\"map (通常实现为红黑树,非强制标准):\"></a>map (通常实现为红黑树,非强制标准):</h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>没有失效情况  </td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者  </td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><ul>\n<li>map是有序的，unordered_map是无序的  </li>\n<li>两者之间的查找速度不同（log(N)和N）  </li>\n<li>由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  </li>\n<li>迭代器失效情况, map更稳健    </li>\n<li>遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  </li>\n<li>unordered_map不能反向遍历  </li>\n<li>O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  </li>\n<li>散列表的时间复杂度仍然是O(N), 性能上map更稳定  </li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>哈希算法：</strong> 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  </li>\n<li><strong>哈希表：</strong> 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  </li>\n<li><strong>非哈希表：</strong> 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   </li>\n<li><strong>哈希冲突：</strong> 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。","more":"</li>\n</ul>\n<h3 id=\"常见的Hash函数\"><a href=\"#常见的Hash函数\" class=\"headerlink\" title=\"常见的Hash函数\"></a>常见的Hash函数</h3><ul>\n<li><strong>直接定址法：</strong> 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  </li>\n<li><strong>数字分析法：</strong> 提取关键字中取值比较均匀的数字作为哈希地址。  </li>\n<li><strong>除留余数法：</strong> 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  </li>\n<li><strong>分段叠加法：</strong> 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  </li>\n<li><strong>平方取中法：</strong> 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  </li>\n<li><strong>伪随机数法：</strong> 采用一个伪随机数当作哈希函数。  </li>\n</ul>\n<h3 id=\"常见的解决冲突方案\"><a href=\"#常见的解决冲突方案\" class=\"headerlink\" title=\"常见的解决冲突方案\"></a>常见的解决冲突方案</h3><h4 id=\"开放定址法\"><a href=\"#开放定址法\" class=\"headerlink\" title=\"开放定址法\"></a>开放定址法</h4><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。<br>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。<br>开放定址法的缺点在于<strong>删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。</strong>只到有下个元素插入才能真正删除该元素。  </p>\n<ul>\n<li><p><strong>线行探查法</strong><br>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  </p>\n</li>\n<li><p><strong>平方探查法</strong><br>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²…直到找到空闲单元。<br>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  </p>\n</li>\n<li><p><strong>双散列函数探查法</strong><br>这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  </p>\n</li>\n</ul>\n<h4 id=\"链地址法（拉链法）\"><a href=\"#链地址法（拉链法）\" class=\"headerlink\" title=\"链地址法（拉链法）\"></a>链地址法（拉链法）</h4><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。</p>\n<p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，<strong>jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</strong>   </p>\n<h4 id=\"再哈希法\"><a href=\"#再哈希法\" class=\"headerlink\" title=\"再哈希法\"></a>再哈希法</h4><p>就是同时构造多个不同的哈希函数：<br>Hi = RHi(key)   i= 1,2,3 … k;<br>当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   </p>\n<h4 id=\"建立公共溢出区\"><a href=\"#建立公共溢出区\" class=\"headerlink\" title=\"建立公共溢出区\"></a>建立公共溢出区</h4><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  </p>\n<h3 id=\"与map的区别\"><a href=\"#与map的区别\" class=\"headerlink\" title=\"与map的区别\"></a>与map的区别</h3><h4 id=\"迭代器失效情况\"><a href=\"#迭代器失效情况\" class=\"headerlink\" title=\"迭代器失效情况\"></a>迭代器失效情况</h4><h5 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map:\"></a>unordered_map:</h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>所有只读操作 swap std::swap</td>\n<td>决不  </td>\n</tr>\n<tr>\n<td>clear  rehash  reserve operator=</td>\n<td>始终  </td>\n</tr>\n<tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>仅若重哈希导致  </td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者  </td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"map-通常实现为红黑树-非强制标准\"><a href=\"#map-通常实现为红黑树-非强制标准\" class=\"headerlink\" title=\"map (通常实现为红黑树,非强制标准):\"></a>map (通常实现为红黑树,非强制标准):</h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>没有失效情况  </td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者  </td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><ul>\n<li>map是有序的，unordered_map是无序的  </li>\n<li>两者之间的查找速度不同（log(N)和N）  </li>\n<li>由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  </li>\n<li>迭代器失效情况, map更稳健    </li>\n<li>遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  </li>\n<li>unordered_map不能反向遍历  </li>\n<li>O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  </li>\n<li>散列表的时间复杂度仍然是O(N), 性能上map更稳定  </li>\n</ul>"},{"title":"类型擦除","date":"2019-01-17T03:21:00.000Z","author":"yawei.zhang","_content":"\n### 类型擦除定义  \n\n** 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  **  \n\n### 类型擦除语义或者可实现类型擦除效果的实现方式   \n* 多态    \n* 闭包   \n* 模板 (可以在C++模板中应用鸭子风格)   \n* 容器 any/tuploe     \n\n  <!-- more --> \n### 扩展 JAVA的泛型实现方式 类型擦除  \n```\nList<String> l1 = new ArrayList<String>();\nList<Integer> l2 = new ArrayList<Integer>();\n\nSystem.out.println(l1.getClass() == l2.getClass());\n```\n> 输出为true  \n\n** 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 **  \n\n** 泛型转译 **   \n\n```\npublic class Erasure <T>\n{\n    T object;\n    public Erasure(T object) \n    {\n        this.object = object;\n    }\n}\n```\n\n> Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。  \n```\nErasure<String> erasure = new Erasure<String>(\"hello\");\nClass eclz = erasure.getClass();\nSystem.out.println(\"erasure class is:\"+eclz.getName());\n```\n> 打印的结果是  \n```\nerasure class is:com.frank.test.Erasure  \n```\n\n> 泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？  \n在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <T> 则会被转译成普通的 Object 类型，如果指定了上限如 <T extends String> 则类型参数就被替换成类型上限。   \n\n\n    类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。\n\n理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。\n```\npublic class ToolTest \n{\n    public static void main(String[] args) \n    {\n        List<Integer> ls = new ArrayList<>();\n        ls.add(23);\n//      ls.add(\"text\");\n        Method method = ls.getClass().getDeclaredMethod(\"add\",Object.class);\n        method.invoke(ls,\"test\");\n        method.invoke(ls,42.9f);\n    }\n}\n```\n\n\n","source":"_posts/2019-01-17-type-system-erase.md","raw":"---\ntitle: 类型擦除\ndate: 2019-01-17 11:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 类型擦除定义  \n\n** 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  **  \n\n### 类型擦除语义或者可实现类型擦除效果的实现方式   \n* 多态    \n* 闭包   \n* 模板 (可以在C++模板中应用鸭子风格)   \n* 容器 any/tuploe     \n\n  <!-- more --> \n### 扩展 JAVA的泛型实现方式 类型擦除  \n```\nList<String> l1 = new ArrayList<String>();\nList<Integer> l2 = new ArrayList<Integer>();\n\nSystem.out.println(l1.getClass() == l2.getClass());\n```\n> 输出为true  \n\n** 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 **  \n\n** 泛型转译 **   \n\n```\npublic class Erasure <T>\n{\n    T object;\n    public Erasure(T object) \n    {\n        this.object = object;\n    }\n}\n```\n\n> Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。  \n```\nErasure<String> erasure = new Erasure<String>(\"hello\");\nClass eclz = erasure.getClass();\nSystem.out.println(\"erasure class is:\"+eclz.getName());\n```\n> 打印的结果是  \n```\nerasure class is:com.frank.test.Erasure  \n```\n\n> 泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？  \n在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <T> 则会被转译成普通的 Object 类型，如果指定了上限如 <T extends String> 则类型参数就被替换成类型上限。   \n\n\n    类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。\n\n理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。\n```\npublic class ToolTest \n{\n    public static void main(String[] args) \n    {\n        List<Integer> ls = new ArrayList<>();\n        ls.add(23);\n//      ls.add(\"text\");\n        Method method = ls.getClass().getDeclaredMethod(\"add\",Object.class);\n        method.invoke(ls,\"test\");\n        method.invoke(ls,42.9f);\n    }\n}\n```\n\n\n","slug":"2019-01-17-type-system-erase","published":1,"updated":"2019-02-19T07:16:59.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6f4000b185h9a90qi9b","content":"<h3 id=\"类型擦除定义\"><a href=\"#类型擦除定义\" class=\"headerlink\" title=\"类型擦除定义\"></a>类型擦除定义</h3><p><strong> 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  </strong>  </p>\n<h3 id=\"类型擦除语义或者可实现类型擦除效果的实现方式\"><a href=\"#类型擦除语义或者可实现类型擦除效果的实现方式\" class=\"headerlink\" title=\"类型擦除语义或者可实现类型擦除效果的实现方式\"></a>类型擦除语义或者可实现类型擦除效果的实现方式</h3><ul>\n<li>多态    </li>\n<li>闭包   </li>\n<li>模板 (可以在C++模板中应用鸭子风格)   </li>\n<li><p>容器 any/tuploe     </p>\n<a id=\"more\"></a> \n<h3 id=\"扩展-JAVA的泛型实现方式-类型擦除\"><a href=\"#扩展-JAVA的泛型实现方式-类型擦除\" class=\"headerlink\" title=\"扩展 JAVA的泛型实现方式 类型擦除\"></a>扩展 JAVA的泛型实现方式 类型擦除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; l1 = new ArrayList&lt;String&gt;();</div><div class=\"line\">List&lt;Integer&gt; l2 = new ArrayList&lt;Integer&gt;();</div><div class=\"line\"></div><div class=\"line\">System.out.println(l1.getClass() == l2.getClass());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>输出为true  </p>\n</blockquote>\n<p><strong> 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 </strong>  </p>\n<p><strong> 泛型转译 </strong>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Erasure &lt;T&gt;</div><div class=\"line\">&#123;</div><div class=\"line\">    T object;</div><div class=\"line\">    public Erasure(T object) </div><div class=\"line\">    &#123;</div><div class=\"line\">        this.object = object;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Erasure&lt;String&gt; erasure = new Erasure&lt;String&gt;(&quot;hello&quot;);</div><div class=\"line\">Class eclz = erasure.getClass();</div><div class=\"line\">System.out.println(&quot;erasure class is:&quot;+eclz.getName());</div></pre></td></tr></table></figure></p>\n<p>打印的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">erasure class is:com.frank.test.Erasure</div></pre></td></tr></table></figure></p>\n<p>泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？<br>在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <t> 则会被转译成普通的 Object 类型，如果指定了上限如 <t extends=\"\" string=\"\"> 则类型参数就被替换成类型上限。   </t></t></p>\n</blockquote>\n<pre><code>类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。\n</code></pre><p>理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ToolTest </div><div class=\"line\">&#123;</div><div class=\"line\">    public static void main(String[] args) </div><div class=\"line\">    &#123;</div><div class=\"line\">        List&lt;Integer&gt; ls = new ArrayList&lt;&gt;();</div><div class=\"line\">        ls.add(23);</div><div class=\"line\">//      ls.add(&quot;text&quot;);</div><div class=\"line\">        Method method = ls.getClass().getDeclaredMethod(&quot;add&quot;,Object.class);</div><div class=\"line\">        method.invoke(ls,&quot;test&quot;);</div><div class=\"line\">        method.invoke(ls,42.9f);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"类型擦除定义\"><a href=\"#类型擦除定义\" class=\"headerlink\" title=\"类型擦除定义\"></a>类型擦除定义</h3><p><strong> 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  </strong>  </p>\n<h3 id=\"类型擦除语义或者可实现类型擦除效果的实现方式\"><a href=\"#类型擦除语义或者可实现类型擦除效果的实现方式\" class=\"headerlink\" title=\"类型擦除语义或者可实现类型擦除效果的实现方式\"></a>类型擦除语义或者可实现类型擦除效果的实现方式</h3><ul>\n<li>多态    </li>\n<li>闭包   </li>\n<li>模板 (可以在C++模板中应用鸭子风格)   </li>\n<li><p>容器 any/tuploe     </p>","more":"<h3 id=\"扩展-JAVA的泛型实现方式-类型擦除\"><a href=\"#扩展-JAVA的泛型实现方式-类型擦除\" class=\"headerlink\" title=\"扩展 JAVA的泛型实现方式 类型擦除\"></a>扩展 JAVA的泛型实现方式 类型擦除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; l1 = new ArrayList&lt;String&gt;();</div><div class=\"line\">List&lt;Integer&gt; l2 = new ArrayList&lt;Integer&gt;();</div><div class=\"line\"></div><div class=\"line\">System.out.println(l1.getClass() == l2.getClass());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>输出为true  </p>\n</blockquote>\n<p><strong> 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 </strong>  </p>\n<p><strong> 泛型转译 </strong>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Erasure &lt;T&gt;</div><div class=\"line\">&#123;</div><div class=\"line\">    T object;</div><div class=\"line\">    public Erasure(T object) </div><div class=\"line\">    &#123;</div><div class=\"line\">        this.object = object;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Erasure&lt;String&gt; erasure = new Erasure&lt;String&gt;(&quot;hello&quot;);</div><div class=\"line\">Class eclz = erasure.getClass();</div><div class=\"line\">System.out.println(&quot;erasure class is:&quot;+eclz.getName());</div></pre></td></tr></table></figure></p>\n<p>打印的结果是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">erasure class is:com.frank.test.Erasure</div></pre></td></tr></table></figure></p>\n<p>泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？<br>在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <t> 则会被转译成普通的 Object 类型，如果指定了上限如 <t extends=\"\" string=\"\"> 则类型参数就被替换成类型上限。   </t></t></p>\n</blockquote>\n<pre><code>类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。\n</code></pre><p>理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ToolTest </div><div class=\"line\">&#123;</div><div class=\"line\">    public static void main(String[] args) </div><div class=\"line\">    &#123;</div><div class=\"line\">        List&lt;Integer&gt; ls = new ArrayList&lt;&gt;();</div><div class=\"line\">        ls.add(23);</div><div class=\"line\">//      ls.add(&quot;text&quot;);</div><div class=\"line\">        Method method = ls.getClass().getDeclaredMethod(&quot;add&quot;,Object.class);</div><div class=\"line\">        method.invoke(ls,&quot;test&quot;);</div><div class=\"line\">        method.invoke(ls,42.9f);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"SDM模型","date":"2019-09-30T16:00:00.000Z","author":"yawei.zhang","_content":" \n### SDM框架对系统发展生命周期的过程描述  \nSDM(软件开发方法)框架是在SDLC在软件开发早起\n* (SDM框架)软件开发过程有以下基本的核心活动内容\n  * 需求分析 (Requirements analysis)  \n  * 领域设计 (Software design)  \n  * 系统设计 (Software engineering)  \n  * 编码开发 (Software construction)  \n  * 功能验证 (Software testing)  \n  * 错误修正 (Debugging)    \n  * 部署交付 (Software deployment)  \n  * 维护 (Software maintenance)   \n<!-- more --> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   \n\n例如:  \n* 线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   \n* 快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) \n* 加强发布协调的DevOps   \n\n同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.  \n实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为'混合模型',  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  \n\n","source":"_posts/2019-10-01-sdm.md","raw":"---\ntitle: SDM模型  \ndate: 2019-10-01\ncategories: develop \nauthor: yawei.zhang \n---\n \n### SDM框架对系统发展生命周期的过程描述  \nSDM(软件开发方法)框架是在SDLC在软件开发早起\n* (SDM框架)软件开发过程有以下基本的核心活动内容\n  * 需求分析 (Requirements analysis)  \n  * 领域设计 (Software design)  \n  * 系统设计 (Software engineering)  \n  * 编码开发 (Software construction)  \n  * 功能验证 (Software testing)  \n  * 错误修正 (Debugging)    \n  * 部署交付 (Software deployment)  \n  * 维护 (Software maintenance)   \n<!-- more --> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   \n\n例如:  \n* 线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   \n* 快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) \n* 加强发布协调的DevOps   \n\n同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.  \n实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为'混合模型',  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  \n\n","slug":"2019-10-01-sdm","published":1,"updated":"2019-11-04T08:55:43.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6f7000d185hndrdkm8j","content":"<h3 id=\"SDM框架对系统发展生命周期的过程描述\"><a href=\"#SDM框架对系统发展生命周期的过程描述\" class=\"headerlink\" title=\"SDM框架对系统发展生命周期的过程描述\"></a>SDM框架对系统发展生命周期的过程描述</h3><p>SDM(软件开发方法)框架是在SDLC在软件开发早起</p>\n<ul>\n<li>(SDM框架)软件开发过程有以下基本的核心活动内容<ul>\n<li>需求分析 (Requirements analysis)  </li>\n<li>领域设计 (Software design)  </li>\n<li>系统设计 (Software engineering)  </li>\n<li>编码开发 (Software construction)  </li>\n<li>功能验证 (Software testing)  </li>\n<li>错误修正 (Debugging)    </li>\n<li>部署交付 (Software deployment)  </li>\n<li>维护 (Software maintenance)   <a id=\"more\"></a> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   </li>\n</ul>\n</li>\n</ul>\n<p>例如:  </p>\n<ul>\n<li>线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   </li>\n<li>快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) </li>\n<li>加强发布协调的DevOps   </li>\n</ul>\n<p>同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.<br>实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为’混合模型’,  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  </p>\n","site":{"data":{}},"excerpt":"<h3 id=\"SDM框架对系统发展生命周期的过程描述\"><a href=\"#SDM框架对系统发展生命周期的过程描述\" class=\"headerlink\" title=\"SDM框架对系统发展生命周期的过程描述\"></a>SDM框架对系统发展生命周期的过程描述</h3><p>SDM(软件开发方法)框架是在SDLC在软件开发早起</p>\n<ul>\n<li>(SDM框架)软件开发过程有以下基本的核心活动内容<ul>\n<li>需求分析 (Requirements analysis)  </li>\n<li>领域设计 (Software design)  </li>\n<li>系统设计 (Software engineering)  </li>\n<li>编码开发 (Software construction)  </li>\n<li>功能验证 (Software testing)  </li>\n<li>错误修正 (Debugging)    </li>\n<li>部署交付 (Software deployment)  </li>\n<li>维护 (Software maintenance)","more":"根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   </li>\n</ul>\n</li>\n</ul>\n<p>例如:  </p>\n<ul>\n<li>线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   </li>\n<li>快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) </li>\n<li>加强发布协调的DevOps   </li>\n</ul>\n<p>同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.<br>实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为’混合模型’,  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  </p>"},{"title":"编写VBA脚本示例代码","date":"2019-02-14T09:21:00.000Z","author":"yawei.zhang","_content":"\nVBA检测脚本   \n  <!-- more --> \n```\n\nFunction Match(str As String, pattern As String)\n    Dim reg As Object\n    Set reg = CreateObject(\"VBScript.Regexp\")\n    With reg\n        .Global = False '非全局则匹配到第一个即停止\n        .pattern = pattern '正则部分\n        Match = .Test(str) '返回结果\n    End With\nEnd Function\n\n\nPrivate Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)\n\n\n    has_error = False '全局判定\n\n    For Each sht In Worksheets\n    \n        Dim matched As Boolean\n        \n        ' 跳过被#注释的sheet\n        matched = Match(sht.Name(), \"^#\")\n        If matched Then GoTo Continue\n        \n        '进行sheet内的格式检测\n        matched = Match(sht.Cells(1, 1).Value, \"^convert\")\n        If Not matched Then\n            MsgBox \"sheet:<\" & sht.Name() & \">格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.\", vbOKOnly + vbExclamation\n            GoTo Error\n        End If\n        \nContinue:\n    Next\n    \n    \nFinish:\n    MsgBox (\"表格检测通过,已保存成功.\")\n    Exit Sub\n    \nError:\n    Dim ret\n    ret = MsgBox(\"表格检测失败,请根据提示修正后再次尝试保存!\", vbOKOnly + vbCritical)\n    'If Not ret = vbOK Then Cancel = True\n    Cancel = True\n    Exit Sub\n\nEnd Sub\n\n\n\n\n```\n","source":"_posts/2019-02-14-vba.md","raw":"---\ntitle: 编写VBA脚本示例代码 \ndate: 2019-02-14 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\nVBA检测脚本   \n  <!-- more --> \n```\n\nFunction Match(str As String, pattern As String)\n    Dim reg As Object\n    Set reg = CreateObject(\"VBScript.Regexp\")\n    With reg\n        .Global = False '非全局则匹配到第一个即停止\n        .pattern = pattern '正则部分\n        Match = .Test(str) '返回结果\n    End With\nEnd Function\n\n\nPrivate Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)\n\n\n    has_error = False '全局判定\n\n    For Each sht In Worksheets\n    \n        Dim matched As Boolean\n        \n        ' 跳过被#注释的sheet\n        matched = Match(sht.Name(), \"^#\")\n        If matched Then GoTo Continue\n        \n        '进行sheet内的格式检测\n        matched = Match(sht.Cells(1, 1).Value, \"^convert\")\n        If Not matched Then\n            MsgBox \"sheet:<\" & sht.Name() & \">格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.\", vbOKOnly + vbExclamation\n            GoTo Error\n        End If\n        \nContinue:\n    Next\n    \n    \nFinish:\n    MsgBox (\"表格检测通过,已保存成功.\")\n    Exit Sub\n    \nError:\n    Dim ret\n    ret = MsgBox(\"表格检测失败,请根据提示修正后再次尝试保存!\", vbOKOnly + vbCritical)\n    'If Not ret = vbOK Then Cancel = True\n    Cancel = True\n    Exit Sub\n\nEnd Sub\n\n\n\n\n```\n","slug":"2019-02-14-vba","published":1,"updated":"2019-02-19T07:17:01.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6f8000e185hrck3i2qe","content":"<p>VBA检测脚本<br>  <a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Function Match(str As String, pattern As String)</div><div class=\"line\">    Dim reg As Object</div><div class=\"line\">    Set reg = CreateObject(&quot;VBScript.Regexp&quot;)</div><div class=\"line\">    With reg</div><div class=\"line\">        .Global = False &apos;非全局则匹配到第一个即停止</div><div class=\"line\">        .pattern = pattern &apos;正则部分</div><div class=\"line\">        Match = .Test(str) &apos;返回结果</div><div class=\"line\">    End With</div><div class=\"line\">End Function</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    has_error = False &apos;全局判定</div><div class=\"line\"></div><div class=\"line\">    For Each sht In Worksheets</div><div class=\"line\">    </div><div class=\"line\">        Dim matched As Boolean</div><div class=\"line\">        </div><div class=\"line\">        &apos; 跳过被#注释的sheet</div><div class=\"line\">        matched = Match(sht.Name(), &quot;^#&quot;)</div><div class=\"line\">        If matched Then GoTo Continue</div><div class=\"line\">        </div><div class=\"line\">        &apos;进行sheet内的格式检测</div><div class=\"line\">        matched = Match(sht.Cells(1, 1).Value, &quot;^convert&quot;)</div><div class=\"line\">        If Not matched Then</div><div class=\"line\">            MsgBox &quot;sheet:&lt;&quot; &amp; sht.Name() &amp; &quot;&gt;格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.&quot;, vbOKOnly + vbExclamation</div><div class=\"line\">            GoTo Error</div><div class=\"line\">        End If</div><div class=\"line\">        </div><div class=\"line\">Continue:</div><div class=\"line\">    Next</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">Finish:</div><div class=\"line\">    MsgBox (&quot;表格检测通过,已保存成功.&quot;)</div><div class=\"line\">    Exit Sub</div><div class=\"line\">    </div><div class=\"line\">Error:</div><div class=\"line\">    Dim ret</div><div class=\"line\">    ret = MsgBox(&quot;表格检测失败,请根据提示修正后再次尝试保存!&quot;, vbOKOnly + vbCritical)</div><div class=\"line\">    &apos;If Not ret = vbOK Then Cancel = True</div><div class=\"line\">    Cancel = True</div><div class=\"line\">    Exit Sub</div><div class=\"line\"></div><div class=\"line\">End Sub</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>VBA检测脚本<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Function Match(str As String, pattern As String)</div><div class=\"line\">    Dim reg As Object</div><div class=\"line\">    Set reg = CreateObject(&quot;VBScript.Regexp&quot;)</div><div class=\"line\">    With reg</div><div class=\"line\">        .Global = False &apos;非全局则匹配到第一个即停止</div><div class=\"line\">        .pattern = pattern &apos;正则部分</div><div class=\"line\">        Match = .Test(str) &apos;返回结果</div><div class=\"line\">    End With</div><div class=\"line\">End Function</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    has_error = False &apos;全局判定</div><div class=\"line\"></div><div class=\"line\">    For Each sht In Worksheets</div><div class=\"line\">    </div><div class=\"line\">        Dim matched As Boolean</div><div class=\"line\">        </div><div class=\"line\">        &apos; 跳过被#注释的sheet</div><div class=\"line\">        matched = Match(sht.Name(), &quot;^#&quot;)</div><div class=\"line\">        If matched Then GoTo Continue</div><div class=\"line\">        </div><div class=\"line\">        &apos;进行sheet内的格式检测</div><div class=\"line\">        matched = Match(sht.Cells(1, 1).Value, &quot;^convert&quot;)</div><div class=\"line\">        If Not matched Then</div><div class=\"line\">            MsgBox &quot;sheet:&lt;&quot; &amp; sht.Name() &amp; &quot;&gt;格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.&quot;, vbOKOnly + vbExclamation</div><div class=\"line\">            GoTo Error</div><div class=\"line\">        End If</div><div class=\"line\">        </div><div class=\"line\">Continue:</div><div class=\"line\">    Next</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">Finish:</div><div class=\"line\">    MsgBox (&quot;表格检测通过,已保存成功.&quot;)</div><div class=\"line\">    Exit Sub</div><div class=\"line\">    </div><div class=\"line\">Error:</div><div class=\"line\">    Dim ret</div><div class=\"line\">    ret = MsgBox(&quot;表格检测失败,请根据提示修正后再次尝试保存!&quot;, vbOKOnly + vbCritical)</div><div class=\"line\">    &apos;If Not ret = vbOK Then Cancel = True</div><div class=\"line\">    Cancel = True</div><div class=\"line\">    Exit Sub</div><div class=\"line\"></div><div class=\"line\">End Sub</div></pre></td></tr></table></figure></p>"},{"title":"linux内存布局和ASLR","date":"2019-11-03T16:00:00.000Z","author":"yawei.zhang","_content":"### 内存布局    \n###### 基本布局  \n内核地址空间范围  [0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF]\n不规范地址空间    (0XFFFF 0000 0000 0000, 0X0000 FFFF FFFF FFFF)\n用户地址空间      [0X0000 FFFF FFFF FFFF, 0X0000 0000 0000 0000]\n\n备注: 用户空间范围对应为0~TASK_SIZE = 2^VA_BITS\n1. 用户地址空间默认最大宽度是48 如上  \n2. 内核地址空间和用户地址空间宽度相同  \n3. 不同的页长默认有不同的宽度, 例如4KB页长默认是39位   16:47, 64:42等, 可直接选择48位.  \n4. 开启LVA支持并且页长64可以支持到最大宽度52   \n\n###### 内核布局   \n###### 用户空间布局   \n* TASK_SIZE\n* 栈空间,  向下增长  具体位置为(STACK_TOP - 随机值), STACK_TOP对应TASK_SIZE  \n  * 栈的位置不能超过STACK_TOP的5/6,并且保证128M的栈空间  对齐到页.   \n  \n* 内存映射区域(mmap) 老版本 TASK_UNMAAPPED_BASE+随机值 向上增长   \n* 内存映射区域(mmap) 新版本 STACK_TOP - 栈最大长度 - 间隙 - 随机值  向下增长  x86 2.6.7版本后   \n  * 新老版本的差别在于 新版本 堆和内存映射区域向同一个空间增长, 栈有最大长度限制 在32位下通过压缩栈的空间大小可以让堆和内存映射区域获得最大的使用空间.   \n\n\n\n* 堆空间(Heap)  brk/sbrk分配\n\n* BSS段(Block Started by Symbol) 未初始化数据段或者初始化为0 的全局变量和静态局部变量    * loader加载程序时, 会将BSS段分配的内存清零, 在目标文件中并不占用空间(目标没有BSS段 只有记录名称和大小).  \n  \n* 数据段(Data)  已初始化并且非0的全局变量和静态局部变量 \n  * 例如int a[10000] = {1,2,3, ...}; 与 int a[10000];\n  * 前者在程序中有完整的数据存储, 而后者指标记了使用的大小, 对于目标文件来说会节省非常多的存储空间.   \n  \n* 代码段(Text)  存放机器指令  只读  \n  * 存放\n* 保留区\n* 0\n\n###### 多线程 \n非主线程的栈是mmap出来的 \n```\n\nmem = mmap (NULL, size, prot,\n            MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, -1, 0);\n```\n\n\n### ELF文件装载过程  \n\n### Address space layout randomization 地址空间布局随机化  \n  可以防范return-to-libc 这种攻击\n\n\n\n\n\n##### ASLR在linux中的三个等级以及配置和禁用方法    \n* 系统全局配置\n```\n/proc/sys/kernel/randomize_va_space\n0 = Disabled\n1 = Conservative Randomization\n2 = Full Randomization\n```  \n\n1. 关闭  \n2. 保守随机化: 共享库 栈 mmap  vdso随机化   \n3. 完全随机化:  包括brk分配的内存   \n    2.1 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie   \n\n> brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk   \n\n* 修改/关闭系统配置\n```\n# sysctl -w kernel.randomize_va_space=0\n# echo 0 > /proc/sys/kernel/randomize_va_space\n```\n\n* 进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     \n  * setarch $(uname -m) -R [--addr-no-randomize] [target exe]\n  * 例如 ldd ./benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   \n    * setarch $(uname -m) -R ldd ./benchmark_fast 这样去查看则是固定不变的  \n\n\n\nldd命令  \n\n\n\n代码段/数据段的随机化  \ngcc 编译时\n\n\nPIE 位置无关可执行程序  \nPIC \n\nKASLR  内核地址空间布局随机化  \n\n### SDM框架对系统发展生命周期的过程描述  \nSDM(软件开发方法)框架是在SDLC在软件开发早起\n* (SDM框架)软件开发过程有以下基本的核心活动内容\n  * 需求分析 (Requirements analysis)  \n  * 领域设计 (Software design)  \n  * 系统设计 (Software engineering)  \n  * 编码开发 (Software construction)  \n  * 功能验证 (Software testing)  \n  * 错误修正 (Debugging)    \n  * 部署交付 (Software deployment)  \n  * 维护 (Software maintenance)   \n<!-- more --> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   \n\n例如:  \n* 线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   \n* 快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) \n* 加强发布协调的DevOps   \n\n同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.  \n实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为'混合模型',  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  \n\n","source":"_posts/2019-11-04-aslr.md","raw":"---\ntitle: linux内存布局和ASLR  \ndate: 2019-11-04\ncategories: develop \nauthor: yawei.zhang \n---\n### 内存布局    \n###### 基本布局  \n内核地址空间范围  [0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF]\n不规范地址空间    (0XFFFF 0000 0000 0000, 0X0000 FFFF FFFF FFFF)\n用户地址空间      [0X0000 FFFF FFFF FFFF, 0X0000 0000 0000 0000]\n\n备注: 用户空间范围对应为0~TASK_SIZE = 2^VA_BITS\n1. 用户地址空间默认最大宽度是48 如上  \n2. 内核地址空间和用户地址空间宽度相同  \n3. 不同的页长默认有不同的宽度, 例如4KB页长默认是39位   16:47, 64:42等, 可直接选择48位.  \n4. 开启LVA支持并且页长64可以支持到最大宽度52   \n\n###### 内核布局   \n###### 用户空间布局   \n* TASK_SIZE\n* 栈空间,  向下增长  具体位置为(STACK_TOP - 随机值), STACK_TOP对应TASK_SIZE  \n  * 栈的位置不能超过STACK_TOP的5/6,并且保证128M的栈空间  对齐到页.   \n  \n* 内存映射区域(mmap) 老版本 TASK_UNMAAPPED_BASE+随机值 向上增长   \n* 内存映射区域(mmap) 新版本 STACK_TOP - 栈最大长度 - 间隙 - 随机值  向下增长  x86 2.6.7版本后   \n  * 新老版本的差别在于 新版本 堆和内存映射区域向同一个空间增长, 栈有最大长度限制 在32位下通过压缩栈的空间大小可以让堆和内存映射区域获得最大的使用空间.   \n\n\n\n* 堆空间(Heap)  brk/sbrk分配\n\n* BSS段(Block Started by Symbol) 未初始化数据段或者初始化为0 的全局变量和静态局部变量    * loader加载程序时, 会将BSS段分配的内存清零, 在目标文件中并不占用空间(目标没有BSS段 只有记录名称和大小).  \n  \n* 数据段(Data)  已初始化并且非0的全局变量和静态局部变量 \n  * 例如int a[10000] = {1,2,3, ...}; 与 int a[10000];\n  * 前者在程序中有完整的数据存储, 而后者指标记了使用的大小, 对于目标文件来说会节省非常多的存储空间.   \n  \n* 代码段(Text)  存放机器指令  只读  \n  * 存放\n* 保留区\n* 0\n\n###### 多线程 \n非主线程的栈是mmap出来的 \n```\n\nmem = mmap (NULL, size, prot,\n            MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, -1, 0);\n```\n\n\n### ELF文件装载过程  \n\n### Address space layout randomization 地址空间布局随机化  \n  可以防范return-to-libc 这种攻击\n\n\n\n\n\n##### ASLR在linux中的三个等级以及配置和禁用方法    \n* 系统全局配置\n```\n/proc/sys/kernel/randomize_va_space\n0 = Disabled\n1 = Conservative Randomization\n2 = Full Randomization\n```  \n\n1. 关闭  \n2. 保守随机化: 共享库 栈 mmap  vdso随机化   \n3. 完全随机化:  包括brk分配的内存   \n    2.1 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie   \n\n> brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk   \n\n* 修改/关闭系统配置\n```\n# sysctl -w kernel.randomize_va_space=0\n# echo 0 > /proc/sys/kernel/randomize_va_space\n```\n\n* 进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     \n  * setarch $(uname -m) -R [--addr-no-randomize] [target exe]\n  * 例如 ldd ./benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   \n    * setarch $(uname -m) -R ldd ./benchmark_fast 这样去查看则是固定不变的  \n\n\n\nldd命令  \n\n\n\n代码段/数据段的随机化  \ngcc 编译时\n\n\nPIE 位置无关可执行程序  \nPIC \n\nKASLR  内核地址空间布局随机化  \n\n### SDM框架对系统发展生命周期的过程描述  \nSDM(软件开发方法)框架是在SDLC在软件开发早起\n* (SDM框架)软件开发过程有以下基本的核心活动内容\n  * 需求分析 (Requirements analysis)  \n  * 领域设计 (Software design)  \n  * 系统设计 (Software engineering)  \n  * 编码开发 (Software construction)  \n  * 功能验证 (Software testing)  \n  * 错误修正 (Debugging)    \n  * 部署交付 (Software deployment)  \n  * 维护 (Software maintenance)   \n<!-- more --> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   \n\n例如:  \n* 线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   \n* 快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) \n* 加强发布协调的DevOps   \n\n同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.  \n实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为'混合模型',  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  \n\n","slug":"2019-11-04-aslr","published":1,"updated":"2019-11-06T09:04:51.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6f9000f185hiyin37h4","content":"<h3 id=\"内存布局\"><a href=\"#内存布局\" class=\"headerlink\" title=\"内存布局\"></a>内存布局</h3><h6 id=\"基本布局\"><a href=\"#基本布局\" class=\"headerlink\" title=\"基本布局\"></a>基本布局</h6><p>内核地址空间范围  [0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF]<br>不规范地址空间    (0XFFFF 0000 0000 0000, 0X0000 FFFF FFFF FFFF)<br>用户地址空间      [0X0000 FFFF FFFF FFFF, 0X0000 0000 0000 0000]</p>\n<p>备注: 用户空间范围对应为0~TASK_SIZE = 2^VA_BITS</p>\n<ol>\n<li>用户地址空间默认最大宽度是48 如上  </li>\n<li>内核地址空间和用户地址空间宽度相同  </li>\n<li>不同的页长默认有不同的宽度, 例如4KB页长默认是39位   16:47, 64:42等, 可直接选择48位.  </li>\n<li>开启LVA支持并且页长64可以支持到最大宽度52   </li>\n</ol>\n<h6 id=\"内核布局\"><a href=\"#内核布局\" class=\"headerlink\" title=\"内核布局\"></a>内核布局</h6><h6 id=\"用户空间布局\"><a href=\"#用户空间布局\" class=\"headerlink\" title=\"用户空间布局\"></a>用户空间布局</h6><ul>\n<li>TASK_SIZE</li>\n<li><p>栈空间,  向下增长  具体位置为(STACK_TOP - 随机值), STACK_TOP对应TASK_SIZE  </p>\n<ul>\n<li>栈的位置不能超过STACK_TOP的5/6,并且保证128M的栈空间  对齐到页.   </li>\n</ul>\n</li>\n<li><p>内存映射区域(mmap) 老版本 TASK_UNMAAPPED_BASE+随机值 向上增长   </p>\n</li>\n<li>内存映射区域(mmap) 新版本 STACK_TOP - 栈最大长度 - 间隙 - 随机值  向下增长  x86 2.6.7版本后   <ul>\n<li>新老版本的差别在于 新版本 堆和内存映射区域向同一个空间增长, 栈有最大长度限制 在32位下通过压缩栈的空间大小可以让堆和内存映射区域获得最大的使用空间.   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>堆空间(Heap)  brk/sbrk分配</p>\n</li>\n<li><p>BSS段(Block Started by Symbol) 未初始化数据段或者初始化为0 的全局变量和静态局部变量    * loader加载程序时, 会将BSS段分配的内存清零, 在目标文件中并不占用空间(目标没有BSS段 只有记录名称和大小).  </p>\n</li>\n<li><p>数据段(Data)  已初始化并且非0的全局变量和静态局部变量 </p>\n<ul>\n<li>例如int a[10000] = {1,2,3, …}; 与 int a[10000];</li>\n<li>前者在程序中有完整的数据存储, 而后者指标记了使用的大小, 对于目标文件来说会节省非常多的存储空间.   </li>\n</ul>\n</li>\n<li><p>代码段(Text)  存放机器指令  只读  </p>\n<ul>\n<li>存放</li>\n</ul>\n</li>\n<li>保留区</li>\n<li>0</li>\n</ul>\n<h6 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h6><p>非主线程的栈是mmap出来的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mem = mmap (NULL, size, prot,</div><div class=\"line\">            MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, -1, 0);</div></pre></td></tr></table></figure></p>\n<h3 id=\"ELF文件装载过程\"><a href=\"#ELF文件装载过程\" class=\"headerlink\" title=\"ELF文件装载过程\"></a>ELF文件装载过程</h3><h3 id=\"Address-space-layout-randomization-地址空间布局随机化\"><a href=\"#Address-space-layout-randomization-地址空间布局随机化\" class=\"headerlink\" title=\"Address space layout randomization 地址空间布局随机化\"></a>Address space layout randomization 地址空间布局随机化</h3><p>  可以防范return-to-libc 这种攻击</p>\n<h5 id=\"ASLR在linux中的三个等级以及配置和禁用方法\"><a href=\"#ASLR在linux中的三个等级以及配置和禁用方法\" class=\"headerlink\" title=\"ASLR在linux中的三个等级以及配置和禁用方法\"></a>ASLR在linux中的三个等级以及配置和禁用方法</h5><ul>\n<li>系统全局配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/proc/sys/kernel/randomize_va_space</div><div class=\"line\">0 = Disabled</div><div class=\"line\">1 = Conservative Randomization</div><div class=\"line\">2 = Full Randomization</div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">1. 关闭  </div><div class=\"line\">2. 保守随机化: 共享库 栈 mmap  vdso随机化   </div><div class=\"line\">3. 完全随机化:  包括brk分配的内存   </div><div class=\"line\">    2.1 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie   </div><div class=\"line\"></div><div class=\"line\">&gt; brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk   </div><div class=\"line\"></div><div class=\"line\">* 修改/关闭系统配置</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"sysctl-w-kernel-randomize-va-space-0\"><a href=\"#sysctl-w-kernel-randomize-va-space-0\" class=\"headerlink\" title=\"sysctl -w kernel.randomize_va_space=0\"></a>sysctl -w kernel.randomize_va_space=0</h1><h1 id=\"echo-0-gt-proc-sys-kernel-randomize-va-space\"><a href=\"#echo-0-gt-proc-sys-kernel-randomize-va-space\" class=\"headerlink\" title=\"echo 0 &gt; /proc/sys/kernel/randomize_va_space\"></a>echo 0 &gt; /proc/sys/kernel/randomize_va_space</h1><p>```</p>\n<ul>\n<li>进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     <ul>\n<li>setarch $(uname -m) -R [–addr-no-randomize] [target exe]</li>\n<li>例如 ldd ./benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   <ul>\n<li>setarch $(uname -m) -R ldd ./benchmark_fast 这样去查看则是固定不变的  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>ldd命令  </p>\n<p>代码段/数据段的随机化<br>gcc 编译时</p>\n<p>PIE 位置无关可执行程序<br>PIC </p>\n<p>KASLR  内核地址空间布局随机化  </p>\n<h3 id=\"SDM框架对系统发展生命周期的过程描述\"><a href=\"#SDM框架对系统发展生命周期的过程描述\" class=\"headerlink\" title=\"SDM框架对系统发展生命周期的过程描述\"></a>SDM框架对系统发展生命周期的过程描述</h3><p>SDM(软件开发方法)框架是在SDLC在软件开发早起</p>\n<ul>\n<li>(SDM框架)软件开发过程有以下基本的核心活动内容<ul>\n<li>需求分析 (Requirements analysis)  </li>\n<li>领域设计 (Software design)  </li>\n<li>系统设计 (Software engineering)  </li>\n<li>编码开发 (Software construction)  </li>\n<li>功能验证 (Software testing)  </li>\n<li>错误修正 (Debugging)    </li>\n<li>部署交付 (Software deployment)  </li>\n<li>维护 (Software maintenance)   <a id=\"more\"></a> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   </li>\n</ul>\n</li>\n</ul>\n<p>例如:  </p>\n<ul>\n<li>线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   </li>\n<li>快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) </li>\n<li>加强发布协调的DevOps   </li>\n</ul>\n<p>同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.<br>实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为’混合模型’,  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  </p>\n","site":{"data":{}},"excerpt":"<h3 id=\"内存布局\"><a href=\"#内存布局\" class=\"headerlink\" title=\"内存布局\"></a>内存布局</h3><h6 id=\"基本布局\"><a href=\"#基本布局\" class=\"headerlink\" title=\"基本布局\"></a>基本布局</h6><p>内核地址空间范围  [0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF]<br>不规范地址空间    (0XFFFF 0000 0000 0000, 0X0000 FFFF FFFF FFFF)<br>用户地址空间      [0X0000 FFFF FFFF FFFF, 0X0000 0000 0000 0000]</p>\n<p>备注: 用户空间范围对应为0~TASK_SIZE = 2^VA_BITS</p>\n<ol>\n<li>用户地址空间默认最大宽度是48 如上  </li>\n<li>内核地址空间和用户地址空间宽度相同  </li>\n<li>不同的页长默认有不同的宽度, 例如4KB页长默认是39位   16:47, 64:42等, 可直接选择48位.  </li>\n<li>开启LVA支持并且页长64可以支持到最大宽度52   </li>\n</ol>\n<h6 id=\"内核布局\"><a href=\"#内核布局\" class=\"headerlink\" title=\"内核布局\"></a>内核布局</h6><h6 id=\"用户空间布局\"><a href=\"#用户空间布局\" class=\"headerlink\" title=\"用户空间布局\"></a>用户空间布局</h6><ul>\n<li>TASK_SIZE</li>\n<li><p>栈空间,  向下增长  具体位置为(STACK_TOP - 随机值), STACK_TOP对应TASK_SIZE  </p>\n<ul>\n<li>栈的位置不能超过STACK_TOP的5/6,并且保证128M的栈空间  对齐到页.   </li>\n</ul>\n</li>\n<li><p>内存映射区域(mmap) 老版本 TASK_UNMAAPPED_BASE+随机值 向上增长   </p>\n</li>\n<li>内存映射区域(mmap) 新版本 STACK_TOP - 栈最大长度 - 间隙 - 随机值  向下增长  x86 2.6.7版本后   <ul>\n<li>新老版本的差别在于 新版本 堆和内存映射区域向同一个空间增长, 栈有最大长度限制 在32位下通过压缩栈的空间大小可以让堆和内存映射区域获得最大的使用空间.   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>堆空间(Heap)  brk/sbrk分配</p>\n</li>\n<li><p>BSS段(Block Started by Symbol) 未初始化数据段或者初始化为0 的全局变量和静态局部变量    * loader加载程序时, 会将BSS段分配的内存清零, 在目标文件中并不占用空间(目标没有BSS段 只有记录名称和大小).  </p>\n</li>\n<li><p>数据段(Data)  已初始化并且非0的全局变量和静态局部变量 </p>\n<ul>\n<li>例如int a[10000] = {1,2,3, …}; 与 int a[10000];</li>\n<li>前者在程序中有完整的数据存储, 而后者指标记了使用的大小, 对于目标文件来说会节省非常多的存储空间.   </li>\n</ul>\n</li>\n<li><p>代码段(Text)  存放机器指令  只读  </p>\n<ul>\n<li>存放</li>\n</ul>\n</li>\n<li>保留区</li>\n<li>0</li>\n</ul>\n<h6 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h6><p>非主线程的栈是mmap出来的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">mem = mmap (NULL, size, prot,</div><div class=\"line\">            MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, -1, 0);</div></pre></td></tr></table></figure></p>\n<h3 id=\"ELF文件装载过程\"><a href=\"#ELF文件装载过程\" class=\"headerlink\" title=\"ELF文件装载过程\"></a>ELF文件装载过程</h3><h3 id=\"Address-space-layout-randomization-地址空间布局随机化\"><a href=\"#Address-space-layout-randomization-地址空间布局随机化\" class=\"headerlink\" title=\"Address space layout randomization 地址空间布局随机化\"></a>Address space layout randomization 地址空间布局随机化</h3><p>  可以防范return-to-libc 这种攻击</p>\n<h5 id=\"ASLR在linux中的三个等级以及配置和禁用方法\"><a href=\"#ASLR在linux中的三个等级以及配置和禁用方法\" class=\"headerlink\" title=\"ASLR在linux中的三个等级以及配置和禁用方法\"></a>ASLR在linux中的三个等级以及配置和禁用方法</h5><ul>\n<li>系统全局配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/proc/sys/kernel/randomize_va_space</div><div class=\"line\">0 = Disabled</div><div class=\"line\">1 = Conservative Randomization</div><div class=\"line\">2 = Full Randomization</div><div class=\"line\">```  </div><div class=\"line\"></div><div class=\"line\">1. 关闭  </div><div class=\"line\">2. 保守随机化: 共享库 栈 mmap  vdso随机化   </div><div class=\"line\">3. 完全随机化:  包括brk分配的内存   </div><div class=\"line\">    2.1 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie   </div><div class=\"line\"></div><div class=\"line\">&gt; brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk   </div><div class=\"line\"></div><div class=\"line\">* 修改/关闭系统配置</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"sysctl-w-kernel-randomize-va-space-0\"><a href=\"#sysctl-w-kernel-randomize-va-space-0\" class=\"headerlink\" title=\"sysctl -w kernel.randomize_va_space=0\"></a>sysctl -w kernel.randomize_va_space=0</h1><h1 id=\"echo-0-gt-proc-sys-kernel-randomize-va-space\"><a href=\"#echo-0-gt-proc-sys-kernel-randomize-va-space\" class=\"headerlink\" title=\"echo 0 &gt; /proc/sys/kernel/randomize_va_space\"></a>echo 0 &gt; /proc/sys/kernel/randomize_va_space</h1><p>```</p>\n<ul>\n<li>进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     <ul>\n<li>setarch $(uname -m) -R [–addr-no-randomize] [target exe]</li>\n<li>例如 ldd ./benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   <ul>\n<li>setarch $(uname -m) -R ldd ./benchmark_fast 这样去查看则是固定不变的  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>ldd命令  </p>\n<p>代码段/数据段的随机化<br>gcc 编译时</p>\n<p>PIE 位置无关可执行程序<br>PIC </p>\n<p>KASLR  内核地址空间布局随机化  </p>\n<h3 id=\"SDM框架对系统发展生命周期的过程描述\"><a href=\"#SDM框架对系统发展生命周期的过程描述\" class=\"headerlink\" title=\"SDM框架对系统发展生命周期的过程描述\"></a>SDM框架对系统发展生命周期的过程描述</h3><p>SDM(软件开发方法)框架是在SDLC在软件开发早起</p>\n<ul>\n<li>(SDM框架)软件开发过程有以下基本的核心活动内容<ul>\n<li>需求分析 (Requirements analysis)  </li>\n<li>领域设计 (Software design)  </li>\n<li>系统设计 (Software engineering)  </li>\n<li>编码开发 (Software construction)  </li>\n<li>功能验证 (Software testing)  </li>\n<li>错误修正 (Debugging)    </li>\n<li>部署交付 (Software deployment)  </li>\n<li>维护 (Software maintenance)","more":"根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   </li>\n</ul>\n</li>\n</ul>\n<p>例如:  </p>\n<ul>\n<li>线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   </li>\n<li>快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) </li>\n<li>加强发布协调的DevOps   </li>\n</ul>\n<p>同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.<br>实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为’混合模型’,  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  </p>"},{"title":"linux快速排查问题的命令","date":"2019-11-04T16:00:00.000Z","author":"yawei.zhang","_content":"### 全局分析和统计    \n* top命令   \n  * free 查看内存使用信息  \n  * vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  \n  * iostat -m -x [时间] [次数]   io读写详细信息\n\n* sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   \n  * sar -A 所有  \n  * sar -u CPU  \n  * sar -q 负载\n  * sar -r 内存\n  * CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看\n  * 内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看\n  * I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看\n\n* df 查看当前硬盘存储\n  * du -h  --max-depth=1 [./]   统计当前目录树下的文件大小  \n\n* IPC资源查询   \n  * ipcs -m 查看共享内存资源  \n  * ipcsrm -M [shmkey]  删除共享内存资源  \n  * ipcsrm -m [shmid]    删除shmid标识的共享内存资源  \n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n* ulimit -s 栈大小  \n\n\n### 进程分析和统计   \n\n* pstack [pid]  查看进程栈  \n\n* gstack [pid]  同pstack 可打印出每个线程的堆栈    \n\n* gcore [pid1 pid2 ...]  dump core而不杀死进程   \n\n* strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   \n  \n* strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    \n\n\n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n\n### 系统   \nuname -a  系统版本  \ncat /proc/version  内核版本  \n\n\n### 调试\n\n* readelf  \n  * 可重定位的对象文件(Relocatable file) .o文件   \n  * 可执行的对象文件(Executable file)  \n  * 可被共享的对象文件(Shared object file)  \n  * readelf -a  [elf_file] 查看所有信息  \n  * readelf -h  [elf_file] 查看概要信息\n  * readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  \n  \n* objdump  和readelf类似 但是可以反汇编elf文件  \n  * objdump -S [file]  反汇编所有目标代码  \n  \n* size [file] 查看程序被映射到内存中映像的大小信息  \n\n\n\n### 其他手册/详细手册   \n\n###### ldd   查看程序运行时库  \n显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 \n\n\n###### strace  \n```\n-c 统计每一系统调用的所执行的时间,次数和出错的次数等. \n-d 输出strace关于标准错误的调试信息. \n-f 跟踪由fork调用所产生的子进程. \n-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. \n-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. \n-h 输出简要的帮助信息. \n-i 输出系统调用的入口指针. \n-q 禁止输出关于脱离的消息. \n-r 打印出相对时间关于,,每一个系统调用. \n-t 在输出中的每一行前加上时间信息. \n-tt 在输出中的每一行前加上时间信息,微秒级. \n-ttt 微秒级输出,以秒了表示时间. \n-T 显示每一调用所耗的时间. \n-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. \n-V 输出strace的版本信息. \n-x 以十六进制形式输出非标准字符串 \n-xx 所有字符串以十六进制形式输出. \n-a column \n设置返回值的输出位置.默认 为40. \n-e expr \n指定一个表达式,用来控制如何跟踪.格式如下: \n[qualifier=][!]value1[,value2]... \nqualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: \n-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. \n注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\. \n-e trace=set \n只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all. \n-e trace=file \n只跟踪有关文件操作的系统调用. \n-e trace=process \n只跟踪有关进程控制的系统调用. \n-e trace=network \n跟踪与网络有关的所有系统调用. \n-e strace=signal \n跟踪所有与系统信号有关的 系统调用 \n-e trace=ipc \n跟踪所有与进程通讯有关的系统调用 \n-e abbrev=set \n设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. \n-e raw=set \n将指 定的系统调用的参数以十六进制显示. \n-e signal=set \n指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. \n-e read=set \n输出从指定文件中读出 的数据.例如: \n-e read=3,5 \n-e write=set \n输出写入到指定文件中的数据. \n-o filename \n将strace的输出写入文件filename \n-p pid \n跟踪指定的进程pid. \n-s strsize \n指定输出的字符串的最大长度.默认为32.文件名一直全部输出. \n-u username \n以username 的UID和GID执行被跟踪的命令\n```\n\n\n###### vmstat  \n```\nProcs（进程）:\n  r: 运行队列中进程数量\n  b: 等待IO的进程数量\nMemory（内存）:\n  swpd: 使用虚拟内存大小\n  free: 可用内存大小\n  buff: 用作缓冲的内存大小\n  cache: 用作缓存的内存大小\nSwap:\n  si: 每秒从交换区写到内存的大小\n  so: 每秒写入交换区的内存大小\n  IO：（现在的Linux版本块的大小为1024bytes）\n  bi: 每秒读取的块数\n  bo: 每秒写入的块数\nsystem：\n  in: 每秒中断数，包括时钟中断\n  cs: 每秒上下文切换数\n  CPU（以百分比表示）\n  us: 用户进程执行时间(user time)\n  sy: 系统进程执行时间(system time)\n  id: 空闲时间(包括IO等待时间)\n  wa: 等待IO时间\n```\n\n\n###### sar   \n```\n-A 汇总所有的报告\n-a 报告文件读写使用情况\n-B 报告附加的缓存的使用情况\n-b 报告缓存的使用情况\n-c 报告系统调用的使用情况\n-d 报告磁盘的使用情况\n-g 报告串口的使用情况\n-h 报告关于buffer使用的统计数据\n-m 报告IPC消息队列和信号量的使用情况\n-n 报告命名cache的使用情况\n-p 报告调页活动的使用情况\n-q 报告运行队列和交换队列的平均长度\n-R 报告进程的活动情况\n-r 报告没有使用的内存页面和硬盘块\n-u 报告CPU的利用率\n-v 报告进程、i节点、文件和锁表状态\n-w 报告系统交换活动状况\n-y 报告TTY设备活动状况\n```","source":"_posts/2019-11-05-fast-check-linux.md","raw":"---\ntitle: linux快速排查问题的命令  \ndate: 2019-11-05\ncategories: develop \nauthor: yawei.zhang \n---\n### 全局分析和统计    \n* top命令   \n  * free 查看内存使用信息  \n  * vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  \n  * iostat -m -x [时间] [次数]   io读写详细信息\n\n* sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   \n  * sar -A 所有  \n  * sar -u CPU  \n  * sar -q 负载\n  * sar -r 内存\n  * CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看\n  * 内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看\n  * I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看\n\n* df 查看当前硬盘存储\n  * du -h  --max-depth=1 [./]   统计当前目录树下的文件大小  \n\n* IPC资源查询   \n  * ipcs -m 查看共享内存资源  \n  * ipcsrm -M [shmkey]  删除共享内存资源  \n  * ipcsrm -m [shmid]    删除shmid标识的共享内存资源  \n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n* ulimit -s 栈大小  \n\n\n### 进程分析和统计   \n\n* pstack [pid]  查看进程栈  \n\n* gstack [pid]  同pstack 可打印出每个线程的堆栈    \n\n* gcore [pid1 pid2 ...]  dump core而不杀死进程   \n\n* strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   \n  \n* strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    \n\n\n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n\n### 系统   \nuname -a  系统版本  \ncat /proc/version  内核版本  \n\n\n### 调试\n\n* readelf  \n  * 可重定位的对象文件(Relocatable file) .o文件   \n  * 可执行的对象文件(Executable file)  \n  * 可被共享的对象文件(Shared object file)  \n  * readelf -a  [elf_file] 查看所有信息  \n  * readelf -h  [elf_file] 查看概要信息\n  * readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  \n  \n* objdump  和readelf类似 但是可以反汇编elf文件  \n  * objdump -S [file]  反汇编所有目标代码  \n  \n* size [file] 查看程序被映射到内存中映像的大小信息  \n\n\n\n### 其他手册/详细手册   \n\n###### ldd   查看程序运行时库  \n显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 \n\n\n###### strace  \n```\n-c 统计每一系统调用的所执行的时间,次数和出错的次数等. \n-d 输出strace关于标准错误的调试信息. \n-f 跟踪由fork调用所产生的子进程. \n-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. \n-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. \n-h 输出简要的帮助信息. \n-i 输出系统调用的入口指针. \n-q 禁止输出关于脱离的消息. \n-r 打印出相对时间关于,,每一个系统调用. \n-t 在输出中的每一行前加上时间信息. \n-tt 在输出中的每一行前加上时间信息,微秒级. \n-ttt 微秒级输出,以秒了表示时间. \n-T 显示每一调用所耗的时间. \n-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. \n-V 输出strace的版本信息. \n-x 以十六进制形式输出非标准字符串 \n-xx 所有字符串以十六进制形式输出. \n-a column \n设置返回值的输出位置.默认 为40. \n-e expr \n指定一个表达式,用来控制如何跟踪.格式如下: \n[qualifier=][!]value1[,value2]... \nqualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: \n-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. \n注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\. \n-e trace=set \n只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all. \n-e trace=file \n只跟踪有关文件操作的系统调用. \n-e trace=process \n只跟踪有关进程控制的系统调用. \n-e trace=network \n跟踪与网络有关的所有系统调用. \n-e strace=signal \n跟踪所有与系统信号有关的 系统调用 \n-e trace=ipc \n跟踪所有与进程通讯有关的系统调用 \n-e abbrev=set \n设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. \n-e raw=set \n将指 定的系统调用的参数以十六进制显示. \n-e signal=set \n指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. \n-e read=set \n输出从指定文件中读出 的数据.例如: \n-e read=3,5 \n-e write=set \n输出写入到指定文件中的数据. \n-o filename \n将strace的输出写入文件filename \n-p pid \n跟踪指定的进程pid. \n-s strsize \n指定输出的字符串的最大长度.默认为32.文件名一直全部输出. \n-u username \n以username 的UID和GID执行被跟踪的命令\n```\n\n\n###### vmstat  \n```\nProcs（进程）:\n  r: 运行队列中进程数量\n  b: 等待IO的进程数量\nMemory（内存）:\n  swpd: 使用虚拟内存大小\n  free: 可用内存大小\n  buff: 用作缓冲的内存大小\n  cache: 用作缓存的内存大小\nSwap:\n  si: 每秒从交换区写到内存的大小\n  so: 每秒写入交换区的内存大小\n  IO：（现在的Linux版本块的大小为1024bytes）\n  bi: 每秒读取的块数\n  bo: 每秒写入的块数\nsystem：\n  in: 每秒中断数，包括时钟中断\n  cs: 每秒上下文切换数\n  CPU（以百分比表示）\n  us: 用户进程执行时间(user time)\n  sy: 系统进程执行时间(system time)\n  id: 空闲时间(包括IO等待时间)\n  wa: 等待IO时间\n```\n\n\n###### sar   \n```\n-A 汇总所有的报告\n-a 报告文件读写使用情况\n-B 报告附加的缓存的使用情况\n-b 报告缓存的使用情况\n-c 报告系统调用的使用情况\n-d 报告磁盘的使用情况\n-g 报告串口的使用情况\n-h 报告关于buffer使用的统计数据\n-m 报告IPC消息队列和信号量的使用情况\n-n 报告命名cache的使用情况\n-p 报告调页活动的使用情况\n-q 报告运行队列和交换队列的平均长度\n-R 报告进程的活动情况\n-r 报告没有使用的内存页面和硬盘块\n-u 报告CPU的利用率\n-v 报告进程、i节点、文件和锁表状态\n-w 报告系统交换活动状况\n-y 报告TTY设备活动状况\n```","slug":"2019-11-05-fast-check-linux","published":1,"updated":"2019-11-05T14:43:40.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6fc000h185h7368qtvw","content":"<h3 id=\"全局分析和统计\"><a href=\"#全局分析和统计\" class=\"headerlink\" title=\"全局分析和统计\"></a>全局分析和统计</h3><ul>\n<li><p>top命令   </p>\n<ul>\n<li>free 查看内存使用信息  </li>\n<li>vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  </li>\n<li>iostat -m -x [时间] [次数]   io读写详细信息</li>\n</ul>\n</li>\n<li><p>sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   </p>\n<ul>\n<li>sar -A 所有  </li>\n<li>sar -u CPU  </li>\n<li>sar -q 负载</li>\n<li>sar -r 内存</li>\n<li>CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看</li>\n<li>内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看</li>\n<li>I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看</li>\n</ul>\n</li>\n<li><p>df 查看当前硬盘存储</p>\n<ul>\n<li>du -h  –max-depth=1 [./]   统计当前目录树下的文件大小  </li>\n</ul>\n</li>\n<li><p>IPC资源查询   </p>\n<ul>\n<li>ipcs -m 查看共享内存资源  </li>\n<li>ipcsrm -M [shmkey]  删除共享内存资源  </li>\n<li>ipcsrm -m [shmid]    删除shmid标识的共享内存资源  </li>\n</ul>\n</li>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n<li><p>ulimit -s 栈大小  </p>\n</li>\n</ul>\n<h3 id=\"进程分析和统计\"><a href=\"#进程分析和统计\" class=\"headerlink\" title=\"进程分析和统计\"></a>进程分析和统计</h3><ul>\n<li><p>pstack [pid]  查看进程栈  </p>\n</li>\n<li><p>gstack [pid]  同pstack 可打印出每个线程的堆栈    </p>\n</li>\n<li><p>gcore [pid1 pid2 …]  dump core而不杀死进程   </p>\n</li>\n<li><p>strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   </p>\n</li>\n<li><p>strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    </p>\n</li>\n</ul>\n<ul>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n</ul>\n<h3 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h3><p>uname -a  系统版本<br>cat /proc/version  内核版本  </p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ul>\n<li><p>readelf  </p>\n<ul>\n<li>可重定位的对象文件(Relocatable file) .o文件   </li>\n<li>可执行的对象文件(Executable file)  </li>\n<li>可被共享的对象文件(Shared object file)  </li>\n<li>readelf -a  [elf_file] 查看所有信息  </li>\n<li>readelf -h  [elf_file] 查看概要信息</li>\n<li>readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  </li>\n</ul>\n</li>\n<li><p>objdump  和readelf类似 但是可以反汇编elf文件  </p>\n<ul>\n<li>objdump -S [file]  反汇编所有目标代码  </li>\n</ul>\n</li>\n<li><p>size [file] 查看程序被映射到内存中映像的大小信息  </p>\n</li>\n</ul>\n<h3 id=\"其他手册-详细手册\"><a href=\"#其他手册-详细手册\" class=\"headerlink\" title=\"其他手册/详细手册\"></a>其他手册/详细手册</h3><h6 id=\"ldd-查看程序运行时库\"><a href=\"#ldd-查看程序运行时库\" class=\"headerlink\" title=\"ldd   查看程序运行时库\"></a>ldd   查看程序运行时库</h6><p>显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 </p>\n<h6 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">-c 统计每一系统调用的所执行的时间,次数和出错的次数等. </div><div class=\"line\">-d 输出strace关于标准错误的调试信息. </div><div class=\"line\">-f 跟踪由fork调用所产生的子进程. </div><div class=\"line\">-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. </div><div class=\"line\">-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. </div><div class=\"line\">-h 输出简要的帮助信息. </div><div class=\"line\">-i 输出系统调用的入口指针. </div><div class=\"line\">-q 禁止输出关于脱离的消息. </div><div class=\"line\">-r 打印出相对时间关于,,每一个系统调用. </div><div class=\"line\">-t 在输出中的每一行前加上时间信息. </div><div class=\"line\">-tt 在输出中的每一行前加上时间信息,微秒级. </div><div class=\"line\">-ttt 微秒级输出,以秒了表示时间. </div><div class=\"line\">-T 显示每一调用所耗的时间. </div><div class=\"line\">-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. </div><div class=\"line\">-V 输出strace的版本信息. </div><div class=\"line\">-x 以十六进制形式输出非标准字符串 </div><div class=\"line\">-xx 所有字符串以十六进制形式输出. </div><div class=\"line\">-a column </div><div class=\"line\">设置返回值的输出位置.默认 为40. </div><div class=\"line\">-e expr </div><div class=\"line\">指定一个表达式,用来控制如何跟踪.格式如下: </div><div class=\"line\">[qualifier=][!]value1[,value2]... </div><div class=\"line\">qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: </div><div class=\"line\">-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. </div><div class=\"line\">注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\. </div><div class=\"line\">-e trace=set </div><div class=\"line\">只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all. </div><div class=\"line\">-e trace=file </div><div class=\"line\">只跟踪有关文件操作的系统调用. </div><div class=\"line\">-e trace=process </div><div class=\"line\">只跟踪有关进程控制的系统调用. </div><div class=\"line\">-e trace=network </div><div class=\"line\">跟踪与网络有关的所有系统调用. </div><div class=\"line\">-e strace=signal </div><div class=\"line\">跟踪所有与系统信号有关的 系统调用 </div><div class=\"line\">-e trace=ipc </div><div class=\"line\">跟踪所有与进程通讯有关的系统调用 </div><div class=\"line\">-e abbrev=set </div><div class=\"line\">设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. </div><div class=\"line\">-e raw=set </div><div class=\"line\">将指 定的系统调用的参数以十六进制显示. </div><div class=\"line\">-e signal=set </div><div class=\"line\">指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. </div><div class=\"line\">-e read=set </div><div class=\"line\">输出从指定文件中读出 的数据.例如: </div><div class=\"line\">-e read=3,5 </div><div class=\"line\">-e write=set </div><div class=\"line\">输出写入到指定文件中的数据. </div><div class=\"line\">-o filename </div><div class=\"line\">将strace的输出写入文件filename </div><div class=\"line\">-p pid </div><div class=\"line\">跟踪指定的进程pid. </div><div class=\"line\">-s strsize </div><div class=\"line\">指定输出的字符串的最大长度.默认为32.文件名一直全部输出. </div><div class=\"line\">-u username </div><div class=\"line\">以username 的UID和GID执行被跟踪的命令</div></pre></td></tr></table></figure>\n<h6 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Procs（进程）:</div><div class=\"line\">  r: 运行队列中进程数量</div><div class=\"line\">  b: 等待IO的进程数量</div><div class=\"line\">Memory（内存）:</div><div class=\"line\">  swpd: 使用虚拟内存大小</div><div class=\"line\">  free: 可用内存大小</div><div class=\"line\">  buff: 用作缓冲的内存大小</div><div class=\"line\">  cache: 用作缓存的内存大小</div><div class=\"line\">Swap:</div><div class=\"line\">  si: 每秒从交换区写到内存的大小</div><div class=\"line\">  so: 每秒写入交换区的内存大小</div><div class=\"line\">  IO：（现在的Linux版本块的大小为1024bytes）</div><div class=\"line\">  bi: 每秒读取的块数</div><div class=\"line\">  bo: 每秒写入的块数</div><div class=\"line\">system：</div><div class=\"line\">  in: 每秒中断数，包括时钟中断</div><div class=\"line\">  cs: 每秒上下文切换数</div><div class=\"line\">  CPU（以百分比表示）</div><div class=\"line\">  us: 用户进程执行时间(user time)</div><div class=\"line\">  sy: 系统进程执行时间(system time)</div><div class=\"line\">  id: 空闲时间(包括IO等待时间)</div><div class=\"line\">  wa: 等待IO时间</div></pre></td></tr></table></figure>\n<h6 id=\"sar\"><a href=\"#sar\" class=\"headerlink\" title=\"sar\"></a>sar</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A 汇总所有的报告</div><div class=\"line\">-a 报告文件读写使用情况</div><div class=\"line\">-B 报告附加的缓存的使用情况</div><div class=\"line\">-b 报告缓存的使用情况</div><div class=\"line\">-c 报告系统调用的使用情况</div><div class=\"line\">-d 报告磁盘的使用情况</div><div class=\"line\">-g 报告串口的使用情况</div><div class=\"line\">-h 报告关于buffer使用的统计数据</div><div class=\"line\">-m 报告IPC消息队列和信号量的使用情况</div><div class=\"line\">-n 报告命名cache的使用情况</div><div class=\"line\">-p 报告调页活动的使用情况</div><div class=\"line\">-q 报告运行队列和交换队列的平均长度</div><div class=\"line\">-R 报告进程的活动情况</div><div class=\"line\">-r 报告没有使用的内存页面和硬盘块</div><div class=\"line\">-u 报告CPU的利用率</div><div class=\"line\">-v 报告进程、i节点、文件和锁表状态</div><div class=\"line\">-w 报告系统交换活动状况</div><div class=\"line\">-y 报告TTY设备活动状况</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"全局分析和统计\"><a href=\"#全局分析和统计\" class=\"headerlink\" title=\"全局分析和统计\"></a>全局分析和统计</h3><ul>\n<li><p>top命令   </p>\n<ul>\n<li>free 查看内存使用信息  </li>\n<li>vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  </li>\n<li>iostat -m -x [时间] [次数]   io读写详细信息</li>\n</ul>\n</li>\n<li><p>sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   </p>\n<ul>\n<li>sar -A 所有  </li>\n<li>sar -u CPU  </li>\n<li>sar -q 负载</li>\n<li>sar -r 内存</li>\n<li>CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看</li>\n<li>内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看</li>\n<li>I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看</li>\n</ul>\n</li>\n<li><p>df 查看当前硬盘存储</p>\n<ul>\n<li>du -h  –max-depth=1 [./]   统计当前目录树下的文件大小  </li>\n</ul>\n</li>\n<li><p>IPC资源查询   </p>\n<ul>\n<li>ipcs -m 查看共享内存资源  </li>\n<li>ipcsrm -M [shmkey]  删除共享内存资源  </li>\n<li>ipcsrm -m [shmid]    删除shmid标识的共享内存资源  </li>\n</ul>\n</li>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n<li><p>ulimit -s 栈大小  </p>\n</li>\n</ul>\n<h3 id=\"进程分析和统计\"><a href=\"#进程分析和统计\" class=\"headerlink\" title=\"进程分析和统计\"></a>进程分析和统计</h3><ul>\n<li><p>pstack [pid]  查看进程栈  </p>\n</li>\n<li><p>gstack [pid]  同pstack 可打印出每个线程的堆栈    </p>\n</li>\n<li><p>gcore [pid1 pid2 …]  dump core而不杀死进程   </p>\n</li>\n<li><p>strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   </p>\n</li>\n<li><p>strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    </p>\n</li>\n</ul>\n<ul>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n</ul>\n<h3 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h3><p>uname -a  系统版本<br>cat /proc/version  内核版本  </p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ul>\n<li><p>readelf  </p>\n<ul>\n<li>可重定位的对象文件(Relocatable file) .o文件   </li>\n<li>可执行的对象文件(Executable file)  </li>\n<li>可被共享的对象文件(Shared object file)  </li>\n<li>readelf -a  [elf_file] 查看所有信息  </li>\n<li>readelf -h  [elf_file] 查看概要信息</li>\n<li>readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  </li>\n</ul>\n</li>\n<li><p>objdump  和readelf类似 但是可以反汇编elf文件  </p>\n<ul>\n<li>objdump -S [file]  反汇编所有目标代码  </li>\n</ul>\n</li>\n<li><p>size [file] 查看程序被映射到内存中映像的大小信息  </p>\n</li>\n</ul>\n<h3 id=\"其他手册-详细手册\"><a href=\"#其他手册-详细手册\" class=\"headerlink\" title=\"其他手册/详细手册\"></a>其他手册/详细手册</h3><h6 id=\"ldd-查看程序运行时库\"><a href=\"#ldd-查看程序运行时库\" class=\"headerlink\" title=\"ldd   查看程序运行时库\"></a>ldd   查看程序运行时库</h6><p>显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 </p>\n<h6 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">-c 统计每一系统调用的所执行的时间,次数和出错的次数等. </div><div class=\"line\">-d 输出strace关于标准错误的调试信息. </div><div class=\"line\">-f 跟踪由fork调用所产生的子进程. </div><div class=\"line\">-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. </div><div class=\"line\">-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. </div><div class=\"line\">-h 输出简要的帮助信息. </div><div class=\"line\">-i 输出系统调用的入口指针. </div><div class=\"line\">-q 禁止输出关于脱离的消息. </div><div class=\"line\">-r 打印出相对时间关于,,每一个系统调用. </div><div class=\"line\">-t 在输出中的每一行前加上时间信息. </div><div class=\"line\">-tt 在输出中的每一行前加上时间信息,微秒级. </div><div class=\"line\">-ttt 微秒级输出,以秒了表示时间. </div><div class=\"line\">-T 显示每一调用所耗的时间. </div><div class=\"line\">-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. </div><div class=\"line\">-V 输出strace的版本信息. </div><div class=\"line\">-x 以十六进制形式输出非标准字符串 </div><div class=\"line\">-xx 所有字符串以十六进制形式输出. </div><div class=\"line\">-a column </div><div class=\"line\">设置返回值的输出位置.默认 为40. </div><div class=\"line\">-e expr </div><div class=\"line\">指定一个表达式,用来控制如何跟踪.格式如下: </div><div class=\"line\">[qualifier=][!]value1[,value2]... </div><div class=\"line\">qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: </div><div class=\"line\">-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. </div><div class=\"line\">注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\. </div><div class=\"line\">-e trace=set </div><div class=\"line\">只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all. </div><div class=\"line\">-e trace=file </div><div class=\"line\">只跟踪有关文件操作的系统调用. </div><div class=\"line\">-e trace=process </div><div class=\"line\">只跟踪有关进程控制的系统调用. </div><div class=\"line\">-e trace=network </div><div class=\"line\">跟踪与网络有关的所有系统调用. </div><div class=\"line\">-e strace=signal </div><div class=\"line\">跟踪所有与系统信号有关的 系统调用 </div><div class=\"line\">-e trace=ipc </div><div class=\"line\">跟踪所有与进程通讯有关的系统调用 </div><div class=\"line\">-e abbrev=set </div><div class=\"line\">设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. </div><div class=\"line\">-e raw=set </div><div class=\"line\">将指 定的系统调用的参数以十六进制显示. </div><div class=\"line\">-e signal=set </div><div class=\"line\">指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. </div><div class=\"line\">-e read=set </div><div class=\"line\">输出从指定文件中读出 的数据.例如: </div><div class=\"line\">-e read=3,5 </div><div class=\"line\">-e write=set </div><div class=\"line\">输出写入到指定文件中的数据. </div><div class=\"line\">-o filename </div><div class=\"line\">将strace的输出写入文件filename </div><div class=\"line\">-p pid </div><div class=\"line\">跟踪指定的进程pid. </div><div class=\"line\">-s strsize </div><div class=\"line\">指定输出的字符串的最大长度.默认为32.文件名一直全部输出. </div><div class=\"line\">-u username </div><div class=\"line\">以username 的UID和GID执行被跟踪的命令</div></pre></td></tr></table></figure>\n<h6 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Procs（进程）:</div><div class=\"line\">  r: 运行队列中进程数量</div><div class=\"line\">  b: 等待IO的进程数量</div><div class=\"line\">Memory（内存）:</div><div class=\"line\">  swpd: 使用虚拟内存大小</div><div class=\"line\">  free: 可用内存大小</div><div class=\"line\">  buff: 用作缓冲的内存大小</div><div class=\"line\">  cache: 用作缓存的内存大小</div><div class=\"line\">Swap:</div><div class=\"line\">  si: 每秒从交换区写到内存的大小</div><div class=\"line\">  so: 每秒写入交换区的内存大小</div><div class=\"line\">  IO：（现在的Linux版本块的大小为1024bytes）</div><div class=\"line\">  bi: 每秒读取的块数</div><div class=\"line\">  bo: 每秒写入的块数</div><div class=\"line\">system：</div><div class=\"line\">  in: 每秒中断数，包括时钟中断</div><div class=\"line\">  cs: 每秒上下文切换数</div><div class=\"line\">  CPU（以百分比表示）</div><div class=\"line\">  us: 用户进程执行时间(user time)</div><div class=\"line\">  sy: 系统进程执行时间(system time)</div><div class=\"line\">  id: 空闲时间(包括IO等待时间)</div><div class=\"line\">  wa: 等待IO时间</div></pre></td></tr></table></figure>\n<h6 id=\"sar\"><a href=\"#sar\" class=\"headerlink\" title=\"sar\"></a>sar</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A 汇总所有的报告</div><div class=\"line\">-a 报告文件读写使用情况</div><div class=\"line\">-B 报告附加的缓存的使用情况</div><div class=\"line\">-b 报告缓存的使用情况</div><div class=\"line\">-c 报告系统调用的使用情况</div><div class=\"line\">-d 报告磁盘的使用情况</div><div class=\"line\">-g 报告串口的使用情况</div><div class=\"line\">-h 报告关于buffer使用的统计数据</div><div class=\"line\">-m 报告IPC消息队列和信号量的使用情况</div><div class=\"line\">-n 报告命名cache的使用情况</div><div class=\"line\">-p 报告调页活动的使用情况</div><div class=\"line\">-q 报告运行队列和交换队列的平均长度</div><div class=\"line\">-R 报告进程的活动情况</div><div class=\"line\">-r 报告没有使用的内存页面和硬盘块</div><div class=\"line\">-u 报告CPU的利用率</div><div class=\"line\">-v 报告进程、i节点、文件和锁表状态</div><div class=\"line\">-w 报告系统交换活动状况</div><div class=\"line\">-y 报告TTY设备活动状况</div></pre></td></tr></table></figure>"},{"title":"MMO属性中英文对照","date":"2018-12-22T09:21:00.000Z","author":"yawei.zhang","_content":"\n[wwowwiki属性说明](http://wowwiki.wikia.com/wiki/Attribute)  \n\n---  \n###  一级属性 | 主要属性  \nStrength STR 力量 \n>  gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力  \n> Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.  \n> 力量不会影响致命一击的机会。力量不会增加阻挡的机会。  \n<!-- more -->\n\nAgility AGI 敏捷 \n> Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.  \n> 增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. \n\nIntellect INT 智力   \n> increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases. \n> 每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.  \n> 杂注 智力也可以提升法力上限, 回蓝速度等 \n\nStamina STA 耐力  \n> Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.  \n> 前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 \n\nSpirit SPI 精神 \n> Increases in-combat mana regeneration for healers. It's the primary attribute for mana regeneration of healers. \n> 增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  \n\n\n---  \n### 二级属性 | 次要属性 | 直接参与战斗计算 \n\nMastery 掌握熟练度  \n\n###### Physical combat  物理对抗   \n\nWeapon damage 武器伤害\n> 战武器增加近战伤害 远程武器增加远程伤害 ... \n\nHit 命中  \n> 增加近战中的命中率  \n\nAttack power AP 攻击强度 攻击力   (Melee 近战)\n\nAttack Speed 攻击速度  \n\nRanged Attack Power RAP 远程攻击力\n\nArmor penetration 护甲穿透  \n> 这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算   \n> 护盾 一般是可消耗的 \n\n###### Enhancements 增益  \n\nCritical strike 暴击 \n\nCrushing blow 破碎打击  \n\nHaste 急速  \n> Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.   \n> 急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。  \n> It also increases these attributes for the player's pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player's damage over time and heal over time effects.   \n> 它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。\n> Spell haste also reduces the length of the global cooldown for spells and some melee abilities.    \n> 法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） \n\n\nExpertise 专精  \n\n###### Spell combat  法术对抗\n\nSpell power SP 法强 \n>  Increases damage and healing of spells  \n\nSpell hit  法术命中  \n\nSpell crit chance 法术暴击 \n\nSpell penetration 法术穿透 \n\nCasting speed 施法速度  \n\n\n###### Defense  防御 \n\nHelped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.  \n通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  \n\nAvoidance 避免攻击  \n\nMiss 命中失败\n> 来源于dodage属性的公式计算结果   \n\n\nDodge 躲避 \n> 躲避传入近战攻击的机会。远程攻击不能被躲避。  \n\nParry 格挡  \n> 它是用近战武器招架近战攻击的机会。远程攻击无法格挡。\n> 魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  \n\nAbsorb 偏转  \n> 类似格挡 属于同一位置\n\nImmune 免疫 \n> 目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  \n\nEvade 回避  \n> 怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  \n\nBlock 阻挡  \n> Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].   \n> 用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]  \n> 阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。\n> 阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  \n\nArmor 护甲 \n> 减少受到的物理伤害。  \n\nBonus Armor 额外护甲  \n\nResistance 抵抗  \n> 减少魔法攻击造成的伤害。  \n\nResilience 韧性(恢复力)  \n\n---   \n### 三级属性 | 特征属性提升  \n\nIndestructible rating 坚不可摧 \n\nMultistrike rating 多次击打 \n> 触发第二次打击的概率   \n \nLeech rating 吸血/水蛭  \n> Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.  \n> 将一定比例的伤害或者治疗转化为自我修复 \n\nVersatility rating  多功能级别  \n> 例如 1%的伤害提升同时降低受到伤害的0.5% \n\n\n---  \n### 杂项  \nSwing 动作  \n> 两次swing的间隔一般接近攻击速度   \n> 魔兽的动作只有前摇  \n\nmelee weapons  近战武器\nranged weapons 远程武器 \n\ndiminishing 收益减免  \n\nHealth 血 \nMana 魔法 \nmove speed  移速\nattack speed 攻速  \nregen 回复(血蓝)\n\nRage 怒气  \nattack 攻击  \n\nlucky 幸运  \ncurse 诅咒\n\nhit 命中  \ndodge 闪避 \n\ncrithit 暴击  \ncrithit resist 抗暴 \n\nresist 抗\n\ndamage 伤害 \n\npct 比例 \n\ndexterity 灵巧 \n\nelite 精英  \n\nMitigation 减轻缓和 \nBonus 增强 \n\ncritical strike 致命一击\n\nBlock 阻止\n\nAvoidance 回避 \nmiss 丢失  \ndodge 闪避  \nparry 格挡 \n\nabsorb 吸收  \nDeflect 扭曲 \nEvade 逃避 \nImmune 免疫\nReflect 反弹\n\nResilience 恢复力/ 伤害减免\n\nDefense 防御  \n\n普通-Normal (大部分近战单位)\n\n穿刺-Pierce (大部分远程攻击单位)\n\n攻城-Siege (攻城单位)\n\n混乱-Chaos (一些野外生物，强力召唤单位)\n\n魔法-Magic (大部分的魔法单位和空中单位)\n> 魔法攻击对虚无形态的单位附加66%额外伤害。 \n\n英雄-Hero\n\n武器类型 \n> 普通-Normal\n> 远程-Missile\n\n火炮-Artillery\n> 一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。\n\n直接-Instant\n> 不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。\n\n溅射-Splash\n> 对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。\n\n特殊武器类型\n> Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。\n> Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。\n> Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。\n> Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。\n\n护甲类型\n\n无甲-Unarmored (大部分魔法单位)\n> 一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。\n轻甲-Light (大部分空中单位)\n\n中甲-Medium (大部分远程攻击单位和农民)\n\n重甲-Heavy (大部分近战单位)\n\n城甲-Fort (建筑)\n","source":"_posts/2018-12-22-attribute.md","raw":"---\ntitle: MMO属性中英文对照  \ndate: 2018-12-22 17:21:00\nauthor: yawei.zhang \n---\n\n[wwowwiki属性说明](http://wowwiki.wikia.com/wiki/Attribute)  \n\n---  \n###  一级属性 | 主要属性  \nStrength STR 力量 \n>  gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力  \n> Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.  \n> 力量不会影响致命一击的机会。力量不会增加阻挡的机会。  \n<!-- more -->\n\nAgility AGI 敏捷 \n> Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.  \n> 增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. \n\nIntellect INT 智力   \n> increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases. \n> 每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.  \n> 杂注 智力也可以提升法力上限, 回蓝速度等 \n\nStamina STA 耐力  \n> Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.  \n> 前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 \n\nSpirit SPI 精神 \n> Increases in-combat mana regeneration for healers. It's the primary attribute for mana regeneration of healers. \n> 增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  \n\n\n---  \n### 二级属性 | 次要属性 | 直接参与战斗计算 \n\nMastery 掌握熟练度  \n\n###### Physical combat  物理对抗   \n\nWeapon damage 武器伤害\n> 战武器增加近战伤害 远程武器增加远程伤害 ... \n\nHit 命中  \n> 增加近战中的命中率  \n\nAttack power AP 攻击强度 攻击力   (Melee 近战)\n\nAttack Speed 攻击速度  \n\nRanged Attack Power RAP 远程攻击力\n\nArmor penetration 护甲穿透  \n> 这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算   \n> 护盾 一般是可消耗的 \n\n###### Enhancements 增益  \n\nCritical strike 暴击 \n\nCrushing blow 破碎打击  \n\nHaste 急速  \n> Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.   \n> 急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。  \n> It also increases these attributes for the player's pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player's damage over time and heal over time effects.   \n> 它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。\n> Spell haste also reduces the length of the global cooldown for spells and some melee abilities.    \n> 法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） \n\n\nExpertise 专精  \n\n###### Spell combat  法术对抗\n\nSpell power SP 法强 \n>  Increases damage and healing of spells  \n\nSpell hit  法术命中  \n\nSpell crit chance 法术暴击 \n\nSpell penetration 法术穿透 \n\nCasting speed 施法速度  \n\n\n###### Defense  防御 \n\nHelped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.  \n通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  \n\nAvoidance 避免攻击  \n\nMiss 命中失败\n> 来源于dodage属性的公式计算结果   \n\n\nDodge 躲避 \n> 躲避传入近战攻击的机会。远程攻击不能被躲避。  \n\nParry 格挡  \n> 它是用近战武器招架近战攻击的机会。远程攻击无法格挡。\n> 魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  \n\nAbsorb 偏转  \n> 类似格挡 属于同一位置\n\nImmune 免疫 \n> 目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  \n\nEvade 回避  \n> 怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  \n\nBlock 阻挡  \n> Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].   \n> 用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]  \n> 阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。\n> 阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  \n\nArmor 护甲 \n> 减少受到的物理伤害。  \n\nBonus Armor 额外护甲  \n\nResistance 抵抗  \n> 减少魔法攻击造成的伤害。  \n\nResilience 韧性(恢复力)  \n\n---   \n### 三级属性 | 特征属性提升  \n\nIndestructible rating 坚不可摧 \n\nMultistrike rating 多次击打 \n> 触发第二次打击的概率   \n \nLeech rating 吸血/水蛭  \n> Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.  \n> 将一定比例的伤害或者治疗转化为自我修复 \n\nVersatility rating  多功能级别  \n> 例如 1%的伤害提升同时降低受到伤害的0.5% \n\n\n---  \n### 杂项  \nSwing 动作  \n> 两次swing的间隔一般接近攻击速度   \n> 魔兽的动作只有前摇  \n\nmelee weapons  近战武器\nranged weapons 远程武器 \n\ndiminishing 收益减免  \n\nHealth 血 \nMana 魔法 \nmove speed  移速\nattack speed 攻速  \nregen 回复(血蓝)\n\nRage 怒气  \nattack 攻击  \n\nlucky 幸运  \ncurse 诅咒\n\nhit 命中  \ndodge 闪避 \n\ncrithit 暴击  \ncrithit resist 抗暴 \n\nresist 抗\n\ndamage 伤害 \n\npct 比例 \n\ndexterity 灵巧 \n\nelite 精英  \n\nMitigation 减轻缓和 \nBonus 增强 \n\ncritical strike 致命一击\n\nBlock 阻止\n\nAvoidance 回避 \nmiss 丢失  \ndodge 闪避  \nparry 格挡 \n\nabsorb 吸收  \nDeflect 扭曲 \nEvade 逃避 \nImmune 免疫\nReflect 反弹\n\nResilience 恢复力/ 伤害减免\n\nDefense 防御  \n\n普通-Normal (大部分近战单位)\n\n穿刺-Pierce (大部分远程攻击单位)\n\n攻城-Siege (攻城单位)\n\n混乱-Chaos (一些野外生物，强力召唤单位)\n\n魔法-Magic (大部分的魔法单位和空中单位)\n> 魔法攻击对虚无形态的单位附加66%额外伤害。 \n\n英雄-Hero\n\n武器类型 \n> 普通-Normal\n> 远程-Missile\n\n火炮-Artillery\n> 一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。\n\n直接-Instant\n> 不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。\n\n溅射-Splash\n> 对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。\n\n特殊武器类型\n> Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。\n> Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。\n> Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。\n> Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。\n\n护甲类型\n\n无甲-Unarmored (大部分魔法单位)\n> 一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。\n轻甲-Light (大部分空中单位)\n\n中甲-Medium (大部分远程攻击单位和农民)\n\n重甲-Heavy (大部分近战单位)\n\n城甲-Fort (建筑)\n","slug":"2018-12-22-attribute","published":1,"updated":"2019-01-17T14:04:23.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6hy000p185hwpi0yuqz","content":"<p><a href=\"http://wowwiki.wikia.com/wiki/Attribute\" target=\"_blank\" rel=\"external\">wwowwiki属性说明</a>  </p>\n<hr>\n<h3 id=\"一级属性-主要属性\"><a href=\"#一级属性-主要属性\" class=\"headerlink\" title=\"一级属性 | 主要属性\"></a>一级属性 | 主要属性</h3><p>Strength STR 力量 </p>\n<blockquote>\n<p> gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力<br>Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.<br>力量不会影响致命一击的机会。力量不会增加阻挡的机会。<br><a id=\"more\"></a></p>\n</blockquote>\n<p>Agility AGI 敏捷 </p>\n<blockquote>\n<p>Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.<br>增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. </p>\n</blockquote>\n<p>Intellect INT 智力   </p>\n<blockquote>\n<p>increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases.<br>每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.<br>杂注 智力也可以提升法力上限, 回蓝速度等 </p>\n</blockquote>\n<p>Stamina STA 耐力  </p>\n<blockquote>\n<p>Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.<br>前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 </p>\n</blockquote>\n<p>Spirit SPI 精神 </p>\n<blockquote>\n<p>Increases in-combat mana regeneration for healers. It’s the primary attribute for mana regeneration of healers.<br>增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  </p>\n</blockquote>\n<hr>\n<h3 id=\"二级属性-次要属性-直接参与战斗计算\"><a href=\"#二级属性-次要属性-直接参与战斗计算\" class=\"headerlink\" title=\"二级属性 | 次要属性 | 直接参与战斗计算\"></a>二级属性 | 次要属性 | 直接参与战斗计算</h3><p>Mastery 掌握熟练度  </p>\n<h6 id=\"Physical-combat-物理对抗\"><a href=\"#Physical-combat-物理对抗\" class=\"headerlink\" title=\"Physical combat  物理对抗\"></a>Physical combat  物理对抗</h6><p>Weapon damage 武器伤害</p>\n<blockquote>\n<p>战武器增加近战伤害 远程武器增加远程伤害 … </p>\n</blockquote>\n<p>Hit 命中  </p>\n<blockquote>\n<p>增加近战中的命中率  </p>\n</blockquote>\n<p>Attack power AP 攻击强度 攻击力   (Melee 近战)</p>\n<p>Attack Speed 攻击速度  </p>\n<p>Ranged Attack Power RAP 远程攻击力</p>\n<p>Armor penetration 护甲穿透  </p>\n<blockquote>\n<p>这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算<br>护盾 一般是可消耗的 </p>\n</blockquote>\n<h6 id=\"Enhancements-增益\"><a href=\"#Enhancements-增益\" class=\"headerlink\" title=\"Enhancements 增益\"></a>Enhancements 增益</h6><p>Critical strike 暴击 </p>\n<p>Crushing blow 破碎打击  </p>\n<p>Haste 急速  </p>\n<blockquote>\n<p>Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.<br>急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。<br>It also increases these attributes for the player’s pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player’s damage over time and heal over time effects.<br>它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。<br>Spell haste also reduces the length of the global cooldown for spells and some melee abilities.<br>法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） </p>\n</blockquote>\n<p>Expertise 专精  </p>\n<h6 id=\"Spell-combat-法术对抗\"><a href=\"#Spell-combat-法术对抗\" class=\"headerlink\" title=\"Spell combat  法术对抗\"></a>Spell combat  法术对抗</h6><p>Spell power SP 法强 </p>\n<blockquote>\n<p> Increases damage and healing of spells  </p>\n</blockquote>\n<p>Spell hit  法术命中  </p>\n<p>Spell crit chance 法术暴击 </p>\n<p>Spell penetration 法术穿透 </p>\n<p>Casting speed 施法速度  </p>\n<h6 id=\"Defense-防御\"><a href=\"#Defense-防御\" class=\"headerlink\" title=\"Defense  防御\"></a>Defense  防御</h6><p>Helped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.<br>通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  </p>\n<p>Avoidance 避免攻击  </p>\n<p>Miss 命中失败</p>\n<blockquote>\n<p>来源于dodage属性的公式计算结果   </p>\n</blockquote>\n<p>Dodge 躲避 </p>\n<blockquote>\n<p>躲避传入近战攻击的机会。远程攻击不能被躲避。  </p>\n</blockquote>\n<p>Parry 格挡  </p>\n<blockquote>\n<p>它是用近战武器招架近战攻击的机会。远程攻击无法格挡。<br>魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  </p>\n</blockquote>\n<p>Absorb 偏转  </p>\n<blockquote>\n<p>类似格挡 属于同一位置</p>\n</blockquote>\n<p>Immune 免疫 </p>\n<blockquote>\n<p>目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  </p>\n</blockquote>\n<p>Evade 回避  </p>\n<blockquote>\n<p>怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  </p>\n</blockquote>\n<p>Block 阻挡  </p>\n<blockquote>\n<p>Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].<br>用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]<br>阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。<br>阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  </p>\n</blockquote>\n<p>Armor 护甲 </p>\n<blockquote>\n<p>减少受到的物理伤害。  </p>\n</blockquote>\n<p>Bonus Armor 额外护甲  </p>\n<p>Resistance 抵抗  </p>\n<blockquote>\n<p>减少魔法攻击造成的伤害。  </p>\n</blockquote>\n<p>Resilience 韧性(恢复力)  </p>\n<hr>\n<h3 id=\"三级属性-特征属性提升\"><a href=\"#三级属性-特征属性提升\" class=\"headerlink\" title=\"三级属性 | 特征属性提升\"></a>三级属性 | 特征属性提升</h3><p>Indestructible rating 坚不可摧 </p>\n<p>Multistrike rating 多次击打 </p>\n<blockquote>\n<p>触发第二次打击的概率   </p>\n</blockquote>\n<p>Leech rating 吸血/水蛭  </p>\n<blockquote>\n<p>Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.<br>将一定比例的伤害或者治疗转化为自我修复 </p>\n</blockquote>\n<p>Versatility rating  多功能级别  </p>\n<blockquote>\n<p>例如 1%的伤害提升同时降低受到伤害的0.5% </p>\n</blockquote>\n<hr>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>Swing 动作  </p>\n<blockquote>\n<p>两次swing的间隔一般接近攻击速度<br>魔兽的动作只有前摇  </p>\n</blockquote>\n<p>melee weapons  近战武器<br>ranged weapons 远程武器 </p>\n<p>diminishing 收益减免  </p>\n<p>Health 血<br>Mana 魔法<br>move speed  移速<br>attack speed 攻速<br>regen 回复(血蓝)</p>\n<p>Rage 怒气<br>attack 攻击  </p>\n<p>lucky 幸运<br>curse 诅咒</p>\n<p>hit 命中<br>dodge 闪避 </p>\n<p>crithit 暴击<br>crithit resist 抗暴 </p>\n<p>resist 抗</p>\n<p>damage 伤害 </p>\n<p>pct 比例 </p>\n<p>dexterity 灵巧 </p>\n<p>elite 精英  </p>\n<p>Mitigation 减轻缓和<br>Bonus 增强 </p>\n<p>critical strike 致命一击</p>\n<p>Block 阻止</p>\n<p>Avoidance 回避<br>miss 丢失<br>dodge 闪避<br>parry 格挡 </p>\n<p>absorb 吸收<br>Deflect 扭曲<br>Evade 逃避<br>Immune 免疫<br>Reflect 反弹</p>\n<p>Resilience 恢复力/ 伤害减免</p>\n<p>Defense 防御  </p>\n<p>普通-Normal (大部分近战单位)</p>\n<p>穿刺-Pierce (大部分远程攻击单位)</p>\n<p>攻城-Siege (攻城单位)</p>\n<p>混乱-Chaos (一些野外生物，强力召唤单位)</p>\n<p>魔法-Magic (大部分的魔法单位和空中单位)</p>\n<blockquote>\n<p>魔法攻击对虚无形态的单位附加66%额外伤害。 </p>\n</blockquote>\n<p>英雄-Hero</p>\n<p>武器类型 </p>\n<blockquote>\n<p>普通-Normal<br>远程-Missile</p>\n</blockquote>\n<p>火炮-Artillery</p>\n<blockquote>\n<p>一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。</p>\n</blockquote>\n<p>直接-Instant</p>\n<blockquote>\n<p>不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。</p>\n</blockquote>\n<p>溅射-Splash</p>\n<blockquote>\n<p>对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。</p>\n</blockquote>\n<p>特殊武器类型</p>\n<blockquote>\n<p>Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。<br>Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。<br>Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。<br>Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。</p>\n</blockquote>\n<p>护甲类型</p>\n<p>无甲-Unarmored (大部分魔法单位)</p>\n<blockquote>\n<p>一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。<br>轻甲-Light (大部分空中单位)</p>\n</blockquote>\n<p>中甲-Medium (大部分远程攻击单位和农民)</p>\n<p>重甲-Heavy (大部分近战单位)</p>\n<p>城甲-Fort (建筑)</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://wowwiki.wikia.com/wiki/Attribute\" target=\"_blank\" rel=\"external\">wwowwiki属性说明</a>  </p>\n<hr>\n<h3 id=\"一级属性-主要属性\"><a href=\"#一级属性-主要属性\" class=\"headerlink\" title=\"一级属性 | 主要属性\"></a>一级属性 | 主要属性</h3><p>Strength STR 力量 </p>\n<blockquote>\n<p> gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力<br>Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.<br>力量不会影响致命一击的机会。力量不会增加阻挡的机会。<br>","more":"</p>\n</blockquote>\n<p>Agility AGI 敏捷 </p>\n<blockquote>\n<p>Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.<br>增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. </p>\n</blockquote>\n<p>Intellect INT 智力   </p>\n<blockquote>\n<p>increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases.<br>每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.<br>杂注 智力也可以提升法力上限, 回蓝速度等 </p>\n</blockquote>\n<p>Stamina STA 耐力  </p>\n<blockquote>\n<p>Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.<br>前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 </p>\n</blockquote>\n<p>Spirit SPI 精神 </p>\n<blockquote>\n<p>Increases in-combat mana regeneration for healers. It’s the primary attribute for mana regeneration of healers.<br>增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  </p>\n</blockquote>\n<hr>\n<h3 id=\"二级属性-次要属性-直接参与战斗计算\"><a href=\"#二级属性-次要属性-直接参与战斗计算\" class=\"headerlink\" title=\"二级属性 | 次要属性 | 直接参与战斗计算\"></a>二级属性 | 次要属性 | 直接参与战斗计算</h3><p>Mastery 掌握熟练度  </p>\n<h6 id=\"Physical-combat-物理对抗\"><a href=\"#Physical-combat-物理对抗\" class=\"headerlink\" title=\"Physical combat  物理对抗\"></a>Physical combat  物理对抗</h6><p>Weapon damage 武器伤害</p>\n<blockquote>\n<p>战武器增加近战伤害 远程武器增加远程伤害 … </p>\n</blockquote>\n<p>Hit 命中  </p>\n<blockquote>\n<p>增加近战中的命中率  </p>\n</blockquote>\n<p>Attack power AP 攻击强度 攻击力   (Melee 近战)</p>\n<p>Attack Speed 攻击速度  </p>\n<p>Ranged Attack Power RAP 远程攻击力</p>\n<p>Armor penetration 护甲穿透  </p>\n<blockquote>\n<p>这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算<br>护盾 一般是可消耗的 </p>\n</blockquote>\n<h6 id=\"Enhancements-增益\"><a href=\"#Enhancements-增益\" class=\"headerlink\" title=\"Enhancements 增益\"></a>Enhancements 增益</h6><p>Critical strike 暴击 </p>\n<p>Crushing blow 破碎打击  </p>\n<p>Haste 急速  </p>\n<blockquote>\n<p>Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.<br>急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。<br>It also increases these attributes for the player’s pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player’s damage over time and heal over time effects.<br>它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。<br>Spell haste also reduces the length of the global cooldown for spells and some melee abilities.<br>法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） </p>\n</blockquote>\n<p>Expertise 专精  </p>\n<h6 id=\"Spell-combat-法术对抗\"><a href=\"#Spell-combat-法术对抗\" class=\"headerlink\" title=\"Spell combat  法术对抗\"></a>Spell combat  法术对抗</h6><p>Spell power SP 法强 </p>\n<blockquote>\n<p> Increases damage and healing of spells  </p>\n</blockquote>\n<p>Spell hit  法术命中  </p>\n<p>Spell crit chance 法术暴击 </p>\n<p>Spell penetration 法术穿透 </p>\n<p>Casting speed 施法速度  </p>\n<h6 id=\"Defense-防御\"><a href=\"#Defense-防御\" class=\"headerlink\" title=\"Defense  防御\"></a>Defense  防御</h6><p>Helped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.<br>通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  </p>\n<p>Avoidance 避免攻击  </p>\n<p>Miss 命中失败</p>\n<blockquote>\n<p>来源于dodage属性的公式计算结果   </p>\n</blockquote>\n<p>Dodge 躲避 </p>\n<blockquote>\n<p>躲避传入近战攻击的机会。远程攻击不能被躲避。  </p>\n</blockquote>\n<p>Parry 格挡  </p>\n<blockquote>\n<p>它是用近战武器招架近战攻击的机会。远程攻击无法格挡。<br>魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  </p>\n</blockquote>\n<p>Absorb 偏转  </p>\n<blockquote>\n<p>类似格挡 属于同一位置</p>\n</blockquote>\n<p>Immune 免疫 </p>\n<blockquote>\n<p>目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  </p>\n</blockquote>\n<p>Evade 回避  </p>\n<blockquote>\n<p>怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  </p>\n</blockquote>\n<p>Block 阻挡  </p>\n<blockquote>\n<p>Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].<br>用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]<br>阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。<br>阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  </p>\n</blockquote>\n<p>Armor 护甲 </p>\n<blockquote>\n<p>减少受到的物理伤害。  </p>\n</blockquote>\n<p>Bonus Armor 额外护甲  </p>\n<p>Resistance 抵抗  </p>\n<blockquote>\n<p>减少魔法攻击造成的伤害。  </p>\n</blockquote>\n<p>Resilience 韧性(恢复力)  </p>\n<hr>\n<h3 id=\"三级属性-特征属性提升\"><a href=\"#三级属性-特征属性提升\" class=\"headerlink\" title=\"三级属性 | 特征属性提升\"></a>三级属性 | 特征属性提升</h3><p>Indestructible rating 坚不可摧 </p>\n<p>Multistrike rating 多次击打 </p>\n<blockquote>\n<p>触发第二次打击的概率   </p>\n</blockquote>\n<p>Leech rating 吸血/水蛭  </p>\n<blockquote>\n<p>Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.<br>将一定比例的伤害或者治疗转化为自我修复 </p>\n</blockquote>\n<p>Versatility rating  多功能级别  </p>\n<blockquote>\n<p>例如 1%的伤害提升同时降低受到伤害的0.5% </p>\n</blockquote>\n<hr>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>Swing 动作  </p>\n<blockquote>\n<p>两次swing的间隔一般接近攻击速度<br>魔兽的动作只有前摇  </p>\n</blockquote>\n<p>melee weapons  近战武器<br>ranged weapons 远程武器 </p>\n<p>diminishing 收益减免  </p>\n<p>Health 血<br>Mana 魔法<br>move speed  移速<br>attack speed 攻速<br>regen 回复(血蓝)</p>\n<p>Rage 怒气<br>attack 攻击  </p>\n<p>lucky 幸运<br>curse 诅咒</p>\n<p>hit 命中<br>dodge 闪避 </p>\n<p>crithit 暴击<br>crithit resist 抗暴 </p>\n<p>resist 抗</p>\n<p>damage 伤害 </p>\n<p>pct 比例 </p>\n<p>dexterity 灵巧 </p>\n<p>elite 精英  </p>\n<p>Mitigation 减轻缓和<br>Bonus 增强 </p>\n<p>critical strike 致命一击</p>\n<p>Block 阻止</p>\n<p>Avoidance 回避<br>miss 丢失<br>dodge 闪避<br>parry 格挡 </p>\n<p>absorb 吸收<br>Deflect 扭曲<br>Evade 逃避<br>Immune 免疫<br>Reflect 反弹</p>\n<p>Resilience 恢复力/ 伤害减免</p>\n<p>Defense 防御  </p>\n<p>普通-Normal (大部分近战单位)</p>\n<p>穿刺-Pierce (大部分远程攻击单位)</p>\n<p>攻城-Siege (攻城单位)</p>\n<p>混乱-Chaos (一些野外生物，强力召唤单位)</p>\n<p>魔法-Magic (大部分的魔法单位和空中单位)</p>\n<blockquote>\n<p>魔法攻击对虚无形态的单位附加66%额外伤害。 </p>\n</blockquote>\n<p>英雄-Hero</p>\n<p>武器类型 </p>\n<blockquote>\n<p>普通-Normal<br>远程-Missile</p>\n</blockquote>\n<p>火炮-Artillery</p>\n<blockquote>\n<p>一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。</p>\n</blockquote>\n<p>直接-Instant</p>\n<blockquote>\n<p>不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。</p>\n</blockquote>\n<p>溅射-Splash</p>\n<blockquote>\n<p>对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。</p>\n</blockquote>\n<p>特殊武器类型</p>\n<blockquote>\n<p>Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。<br>Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。<br>Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。<br>Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。</p>\n</blockquote>\n<p>护甲类型</p>\n<p>无甲-Unarmored (大部分魔法单位)</p>\n<blockquote>\n<p>一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。<br>轻甲-Light (大部分空中单位)</p>\n</blockquote>\n<p>中甲-Medium (大部分远程攻击单位和农民)</p>\n<p>重甲-Heavy (大部分近战单位)</p>\n<p>城甲-Fort (建筑)</p>"},{"title":"ELITE","date":"2019-01-06T19:21:00.000Z","author":"yawei.zhang","_content":"\n\n\n### 对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜  \n---  \n\n在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：[有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。](#)  \n\n这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：[在大部分人习以为常的场景下，有探究规律本质的欲望。](#)  \n\n> 举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。  \n> 但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？  \n> 能意识到这个问题的人，就有成为聪明人的潜质。  \n\n当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  \n\n为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  \n\n如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   \n\n对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   \n> 和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：   \n> **为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？**   \n\n这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   \n\n  <!-- more -->\n### 能在一件事情上极为专注\n---  \n\n「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   \n\n这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    \n\n这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   \n\n```\n以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  \n而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。  \n```\n\n### 有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件   \n---  \n\n正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   \n\n但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   \n\n有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  \n\n\n### 用发展的眼光看问题，会不断修正对事物的印象   \n---  \n\n人们总说，我们对一件事或一个人的第一印象是非常重要的。   \n\n从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   \n\n这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  \n\n与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  \n\n\n### 大多数在骨子里争强好胜，但也更愿意臣服于事实   \n---  \n\n什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   \n\n事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  \n\n和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  \n\n\n### 在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识  \n---  \n\n他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  \n\n因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  \n\n\n### 往往能包容事物的多样性  \n---  \n\n这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  \n\n他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；   \n他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   \n\n对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   \n\n（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   \n\n特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  \n\n\n### 鲜见低质量的社交   \n---  \n\n有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   \n\n比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。  \n但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  \n\n「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   \n\n\n### 很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教   \n---  \n\n「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   \n\n比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   \n\n而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   \n\n这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  \n\n\n### 善于在不同的人面前展现截然不同的个性   \n---  \n\n「聪明人」不会在所有人面前都让自己显得聪明。   \n\n因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。  \n而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  \n\n「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   \n\n所以你看，很多聪明人在别人面前总显得傻乎乎的。   \n\n而那些真正傻乎乎的人，却以为自己才是聪明人呢~   \n","source":"_posts/2019-01-07-elite.md","raw":"---\ntitle: ELITE\ndate: 2019-01-07 03:21:00\nauthor: yawei.zhang \n---\n\n\n\n### 对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜  \n---  \n\n在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：[有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。](#)  \n\n这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：[在大部分人习以为常的场景下，有探究规律本质的欲望。](#)  \n\n> 举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。  \n> 但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？  \n> 能意识到这个问题的人，就有成为聪明人的潜质。  \n\n当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  \n\n为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  \n\n如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   \n\n对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   \n> 和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：   \n> **为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？**   \n\n这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   \n\n  <!-- more -->\n### 能在一件事情上极为专注\n---  \n\n「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   \n\n这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    \n\n这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   \n\n```\n以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  \n而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。  \n```\n\n### 有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件   \n---  \n\n正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   \n\n但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   \n\n有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  \n\n\n### 用发展的眼光看问题，会不断修正对事物的印象   \n---  \n\n人们总说，我们对一件事或一个人的第一印象是非常重要的。   \n\n从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   \n\n这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  \n\n与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  \n\n\n### 大多数在骨子里争强好胜，但也更愿意臣服于事实   \n---  \n\n什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   \n\n事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  \n\n和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  \n\n\n### 在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识  \n---  \n\n他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  \n\n因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  \n\n\n### 往往能包容事物的多样性  \n---  \n\n这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  \n\n他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；   \n他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   \n\n对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   \n\n（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   \n\n特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  \n\n\n### 鲜见低质量的社交   \n---  \n\n有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   \n\n比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。  \n但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  \n\n「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   \n\n\n### 很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教   \n---  \n\n「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   \n\n比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   \n\n而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   \n\n这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  \n\n\n### 善于在不同的人面前展现截然不同的个性   \n---  \n\n「聪明人」不会在所有人面前都让自己显得聪明。   \n\n因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。  \n而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  \n\n「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   \n\n所以你看，很多聪明人在别人面前总显得傻乎乎的。   \n\n而那些真正傻乎乎的人，却以为自己才是聪明人呢~   \n","slug":"2019-01-07-elite","published":1,"updated":"2019-01-17T14:04:25.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6hz000q185hqhwlcvma","content":"<h3 id=\"对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\"><a href=\"#对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\" class=\"headerlink\" title=\"对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\"></a>对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜</h3><hr>\n<p>在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：<a href=\"#\">有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。</a>  </p>\n<p>这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：<a href=\"#\">在大部分人习以为常的场景下，有探究规律本质的欲望。</a>  </p>\n<blockquote>\n<p>举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。<br>但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？<br>能意识到这个问题的人，就有成为聪明人的潜质。  </p>\n</blockquote>\n<p>当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  </p>\n<p>为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  </p>\n<p>如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   </p>\n<p>对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   </p>\n<blockquote>\n<p>和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：<br><strong>为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？</strong>   </p>\n</blockquote>\n<p>这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   </p>\n  <a id=\"more\"></a>\n<h3 id=\"能在一件事情上极为专注\"><a href=\"#能在一件事情上极为专注\" class=\"headerlink\" title=\"能在一件事情上极为专注\"></a>能在一件事情上极为专注</h3><hr>\n<p>「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   </p>\n<p>这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    </p>\n<p>这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  </div><div class=\"line\">而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。</div></pre></td></tr></table></figure>\n<h3 id=\"有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\"><a href=\"#有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\" class=\"headerlink\" title=\"有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\"></a>有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件</h3><hr>\n<p>正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   </p>\n<p>但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   </p>\n<p>有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  </p>\n<h3 id=\"用发展的眼光看问题，会不断修正对事物的印象\"><a href=\"#用发展的眼光看问题，会不断修正对事物的印象\" class=\"headerlink\" title=\"用发展的眼光看问题，会不断修正对事物的印象\"></a>用发展的眼光看问题，会不断修正对事物的印象</h3><hr>\n<p>人们总说，我们对一件事或一个人的第一印象是非常重要的。   </p>\n<p>从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   </p>\n<p>这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  </p>\n<p>与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  </p>\n<h3 id=\"大多数在骨子里争强好胜，但也更愿意臣服于事实\"><a href=\"#大多数在骨子里争强好胜，但也更愿意臣服于事实\" class=\"headerlink\" title=\"大多数在骨子里争强好胜，但也更愿意臣服于事实\"></a>大多数在骨子里争强好胜，但也更愿意臣服于事实</h3><hr>\n<p>什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   </p>\n<p>事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  </p>\n<p>和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  </p>\n<h3 id=\"在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\"><a href=\"#在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\" class=\"headerlink\" title=\"在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\"></a>在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识</h3><hr>\n<p>他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  </p>\n<p>因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  </p>\n<h3 id=\"往往能包容事物的多样性\"><a href=\"#往往能包容事物的多样性\" class=\"headerlink\" title=\"往往能包容事物的多样性\"></a>往往能包容事物的多样性</h3><hr>\n<p>这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  </p>\n<p>他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；<br>他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   </p>\n<p>对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   </p>\n<p>（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   </p>\n<p>特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  </p>\n<h3 id=\"鲜见低质量的社交\"><a href=\"#鲜见低质量的社交\" class=\"headerlink\" title=\"鲜见低质量的社交\"></a>鲜见低质量的社交</h3><hr>\n<p>有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   </p>\n<p>比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。<br>但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  </p>\n<p>「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   </p>\n<h3 id=\"很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\"><a href=\"#很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\" class=\"headerlink\" title=\"很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\"></a>很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教</h3><hr>\n<p>「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   </p>\n<p>比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   </p>\n<p>而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   </p>\n<p>这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  </p>\n<h3 id=\"善于在不同的人面前展现截然不同的个性\"><a href=\"#善于在不同的人面前展现截然不同的个性\" class=\"headerlink\" title=\"善于在不同的人面前展现截然不同的个性\"></a>善于在不同的人面前展现截然不同的个性</h3><hr>\n<p>「聪明人」不会在所有人面前都让自己显得聪明。   </p>\n<p>因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。<br>而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  </p>\n<p>「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   </p>\n<p>所以你看，很多聪明人在别人面前总显得傻乎乎的。   </p>\n<p>而那些真正傻乎乎的人，却以为自己才是聪明人呢~   </p>\n","site":{"data":{}},"excerpt":"<h3 id=\"对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\"><a href=\"#对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\" class=\"headerlink\" title=\"对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\"></a>对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜</h3><hr>\n<p>在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：<a href=\"#\">有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。</a>  </p>\n<p>这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：<a href=\"#\">在大部分人习以为常的场景下，有探究规律本质的欲望。</a>  </p>\n<blockquote>\n<p>举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。<br>但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？<br>能意识到这个问题的人，就有成为聪明人的潜质。  </p>\n</blockquote>\n<p>当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  </p>\n<p>为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  </p>\n<p>如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   </p>\n<p>对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   </p>\n<blockquote>\n<p>和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：<br><strong>为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？</strong>   </p>\n</blockquote>\n<p>这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   </p>","more":"<h3 id=\"能在一件事情上极为专注\"><a href=\"#能在一件事情上极为专注\" class=\"headerlink\" title=\"能在一件事情上极为专注\"></a>能在一件事情上极为专注</h3><hr>\n<p>「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   </p>\n<p>这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    </p>\n<p>这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  </div><div class=\"line\">而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。</div></pre></td></tr></table></figure>\n<h3 id=\"有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\"><a href=\"#有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\" class=\"headerlink\" title=\"有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\"></a>有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件</h3><hr>\n<p>正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   </p>\n<p>但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   </p>\n<p>有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  </p>\n<h3 id=\"用发展的眼光看问题，会不断修正对事物的印象\"><a href=\"#用发展的眼光看问题，会不断修正对事物的印象\" class=\"headerlink\" title=\"用发展的眼光看问题，会不断修正对事物的印象\"></a>用发展的眼光看问题，会不断修正对事物的印象</h3><hr>\n<p>人们总说，我们对一件事或一个人的第一印象是非常重要的。   </p>\n<p>从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   </p>\n<p>这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  </p>\n<p>与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  </p>\n<h3 id=\"大多数在骨子里争强好胜，但也更愿意臣服于事实\"><a href=\"#大多数在骨子里争强好胜，但也更愿意臣服于事实\" class=\"headerlink\" title=\"大多数在骨子里争强好胜，但也更愿意臣服于事实\"></a>大多数在骨子里争强好胜，但也更愿意臣服于事实</h3><hr>\n<p>什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   </p>\n<p>事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  </p>\n<p>和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  </p>\n<h3 id=\"在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\"><a href=\"#在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\" class=\"headerlink\" title=\"在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\"></a>在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识</h3><hr>\n<p>他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  </p>\n<p>因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  </p>\n<h3 id=\"往往能包容事物的多样性\"><a href=\"#往往能包容事物的多样性\" class=\"headerlink\" title=\"往往能包容事物的多样性\"></a>往往能包容事物的多样性</h3><hr>\n<p>这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  </p>\n<p>他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；<br>他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   </p>\n<p>对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   </p>\n<p>（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   </p>\n<p>特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  </p>\n<h3 id=\"鲜见低质量的社交\"><a href=\"#鲜见低质量的社交\" class=\"headerlink\" title=\"鲜见低质量的社交\"></a>鲜见低质量的社交</h3><hr>\n<p>有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   </p>\n<p>比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。<br>但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  </p>\n<p>「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   </p>\n<h3 id=\"很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\"><a href=\"#很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\" class=\"headerlink\" title=\"很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\"></a>很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教</h3><hr>\n<p>「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   </p>\n<p>比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   </p>\n<p>而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   </p>\n<p>这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  </p>\n<h3 id=\"善于在不同的人面前展现截然不同的个性\"><a href=\"#善于在不同的人面前展现截然不同的个性\" class=\"headerlink\" title=\"善于在不同的人面前展现截然不同的个性\"></a>善于在不同的人面前展现截然不同的个性</h3><hr>\n<p>「聪明人」不会在所有人面前都让自己显得聪明。   </p>\n<p>因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。<br>而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  </p>\n<p>「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   </p>\n<p>所以你看，很多聪明人在别人面前总显得傻乎乎的。   </p>\n<p>而那些真正傻乎乎的人，却以为自己才是聪明人呢~   </p>"},{"title":"FPS游戏同步术语","date":"2019-01-07T09:21:00.000Z","author":"yawei.zhang","_content":"\n在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  \n\n网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。  \n  <!-- more -->  \n  \n1）**Latency**：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。\n\n80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。\n\n2）**Hit Box**：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。\n\n3）**Tick Rate**：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。\n\n比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms\n\n4）**Client Update Rate**：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。\n\n5）**Framerate**：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS\n\n6）**Refresh Rate**：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。\n\n7）**Interpolation**：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。\n\n8）**Extrapolation**：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。\n\n9）**Lag Compensation**：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为\"Client Delay\"）可用下式给出：\n\nClientDelay = (1/2 * Latency) + InterpolationDelay\n\n延迟补偿的实际操作步骤：\n\n1.  Player A看到Player B向一个角落跑去\n2.  Player A开枪，其客户端把这个操作发送给服务器\n3.  假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作\n4.  服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A's interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。\n5.  服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：  \n    (1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)\n6.  在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。\n\n需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。\n\n按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。\n\n若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。\n\n如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。  \n若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。  \n服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。\n\n在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。\n\n如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：\n\n1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。\n\n2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。\n\n3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。\n\n4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。\n\n5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。\n\n6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。\n\n7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。\n\n8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。\n","source":"_posts/2019-01-08-fps-synchronization.md","raw":"---\ntitle: FPS游戏同步术语\ndate: 2019-01-07 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  \n\n网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。  \n  <!-- more -->  \n  \n1）**Latency**：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。\n\n80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。\n\n2）**Hit Box**：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。\n\n3）**Tick Rate**：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。\n\n比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms\n\n4）**Client Update Rate**：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。\n\n5）**Framerate**：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS\n\n6）**Refresh Rate**：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。\n\n7）**Interpolation**：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。\n\n8）**Extrapolation**：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。\n\n9）**Lag Compensation**：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为\"Client Delay\"）可用下式给出：\n\nClientDelay = (1/2 * Latency) + InterpolationDelay\n\n延迟补偿的实际操作步骤：\n\n1.  Player A看到Player B向一个角落跑去\n2.  Player A开枪，其客户端把这个操作发送给服务器\n3.  假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作\n4.  服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A's interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。\n5.  服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：  \n    (1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)\n6.  在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。\n\n需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。\n\n按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。\n\n若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。\n\n如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。  \n若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。  \n服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。\n\n在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。\n\n如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：\n\n1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。\n\n2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。\n\n3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。\n\n4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。\n\n5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。\n\n6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。\n\n7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。\n\n8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。\n","slug":"2019-01-08-fps-synchronization","published":1,"updated":"2019-01-17T14:04:29.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6i0000r185hw9cjjgxd","content":"<p>在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  </p>\n<p>网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。<br>  <a id=\"more\"></a>  </p>\n<p>1）<strong>Latency</strong>：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。</p>\n<p>80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。</p>\n<p>2）<strong>Hit Box</strong>：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。</p>\n<p>3）<strong>Tick Rate</strong>：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。</p>\n<p>比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms</p>\n<p>4）<strong>Client Update Rate</strong>：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。</p>\n<p>5）<strong>Framerate</strong>：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS</p>\n<p>6）<strong>Refresh Rate</strong>：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。</p>\n<p>7）<strong>Interpolation</strong>：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。</p>\n<p>8）<strong>Extrapolation</strong>：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。</p>\n<p>9）<strong>Lag Compensation</strong>：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为”Client Delay”）可用下式给出：</p>\n<p>ClientDelay = (1/2 * Latency) + InterpolationDelay</p>\n<p>延迟补偿的实际操作步骤：</p>\n<ol>\n<li>Player A看到Player B向一个角落跑去</li>\n<li>Player A开枪，其客户端把这个操作发送给服务器</li>\n<li>假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作</li>\n<li>服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A’s interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。</li>\n<li>服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：<br>(1/2 <em> PlayerALatency + 1/2 </em> PlayerBLatency + TimeSinceLastTick)</li>\n<li>在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。</li>\n</ol>\n<p>需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。</p>\n<p>按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。</p>\n<p>若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。</p>\n<p>如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。<br>若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。<br>服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。</p>\n<p>在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。</p>\n<p>如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：</p>\n<p>1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。</p>\n<p>2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。</p>\n<p>3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。</p>\n<p>4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。</p>\n<p>5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。</p>\n<p>6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。</p>\n<p>7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。</p>\n<p>8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。</p>\n","site":{"data":{}},"excerpt":"<p>在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  </p>\n<p>网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。<br>","more":"</p>\n<p>1）<strong>Latency</strong>：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。</p>\n<p>80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。</p>\n<p>2）<strong>Hit Box</strong>：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。</p>\n<p>3）<strong>Tick Rate</strong>：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。</p>\n<p>比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms</p>\n<p>4）<strong>Client Update Rate</strong>：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。</p>\n<p>5）<strong>Framerate</strong>：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS</p>\n<p>6）<strong>Refresh Rate</strong>：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。</p>\n<p>7）<strong>Interpolation</strong>：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。</p>\n<p>8）<strong>Extrapolation</strong>：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。</p>\n<p>9）<strong>Lag Compensation</strong>：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为”Client Delay”）可用下式给出：</p>\n<p>ClientDelay = (1/2 * Latency) + InterpolationDelay</p>\n<p>延迟补偿的实际操作步骤：</p>\n<ol>\n<li>Player A看到Player B向一个角落跑去</li>\n<li>Player A开枪，其客户端把这个操作发送给服务器</li>\n<li>假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作</li>\n<li>服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A’s interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。</li>\n<li>服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：<br>(1/2 <em> PlayerALatency + 1/2 </em> PlayerBLatency + TimeSinceLastTick)</li>\n<li>在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。</li>\n</ol>\n<p>需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。</p>\n<p>按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。</p>\n<p>若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。</p>\n<p>如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。<br>若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。<br>服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。</p>\n<p>在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。</p>\n<p>如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：</p>\n<p>1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。</p>\n<p>2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。</p>\n<p>3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。</p>\n<p>4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。</p>\n<p>5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。</p>\n<p>6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。</p>\n<p>7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。</p>\n<p>8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。</p>"},{"title":"古希腊历史和奥德赛","date":"2019-01-29T06:21:00.000Z","author":"yawei.zhang","_content":"\n> 在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  \n\n> 希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    \n\n> 提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  \n\n### story line:\n![古代希腊](http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg)   \n  \n  <!-- more --> \n> 公元前一万年  亚特兰蒂斯 被洪水毁灭  \n\n> 公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  \n\n> 公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 \n\n> 公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).\n\n\n> 公元前753年 罗马建城  \n\n> 公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  \n \n> 公元前8世纪 700-799 《奥德赛》成书  \n\n> 公元前650年 斯巴达成为希腊军事霸主  \n\n> 公元前600年 希腊称波斯地区为 波斯  \n\n> 公元前509 罗马共和国 元老院与罗马人民  \n\n> 公元前499年 希波战争  \n\n> 公元前490年  (希波战争)马拉松战役  \n\n> 公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士  \n> 公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败  \n> 公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  \n\n\n> 公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    \n\n> 公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  \n\n> 公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  \n\n\n> 公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  \n\n> 公元前146年 斯巴达被罗马征服  \n\n> 公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  \n> \n> 公元17世纪 罗马废除君主制,成立意大利共和国  \n> 公元1861年 意大利统一  意大利王国  \n> 公元1935年 波斯国王宣布国际改称伊朗 \n> 公元1946年 意大利建立共和国  \n\n\n##### 金苹果  \n希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  \n\n事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。\n\n在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   \n\n##### 三叉戟  \n在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  \n\n特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  \n\n普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.\n\n奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  \n\n\n刺客信条:\n这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。\n\n三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。\n\n  \n\n\n##### 金羊毛  \n\n在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。\n\n故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。\n\n\n##### 裹尸布  \n耶稣被钉死在十字架后用的裹尸布, 殓布.   \n朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.   \n圣杯,真十字架 圣枪都为圣物.   \n\n\n##### 弥赛亚  \n弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。\n\n### 刺客信条 结构  伊甸碎片设计\n\n裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   \n\n游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  \n\n裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。\n\n在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：\n\n　　1、改变先行者的身体结构。\n\n　　2、把思想储存到一些无机物里（比如石头）。\n\n　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  \n\n　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  \n\n\n信条和组织\n\n刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。\n\n巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。\n\n\n\n\n\n\n\n### 轴心时代   \n雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    \n\n完成超越突破拥有超越视野的四种结构:    \n\n* **个体生命的意义在来世 要依靠外力才能实现**  \n这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  \n\n* **个体生命的意义在今生 要依靠外力才能实现**  \n这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。\n\n* **个体生命的意义在来世 要依靠个体自身才能实现**  \n  这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。\n\n* **个体生命的意义在今生 要依靠个体自身才能实现**  \n  这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。\n\n","source":"_posts/2019-01-17-Odyssey.md","raw":"---\ntitle: 古希腊历史和奥德赛  \ndate: 2019-01-29 14:21:00\ncategories: \nauthor: yawei.zhang \n---\n\n> 在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  \n\n> 希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    \n\n> 提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  \n\n### story line:\n![古代希腊](http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg)   \n  \n  <!-- more --> \n> 公元前一万年  亚特兰蒂斯 被洪水毁灭  \n\n> 公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  \n\n> 公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 \n\n> 公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).\n\n\n> 公元前753年 罗马建城  \n\n> 公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  \n \n> 公元前8世纪 700-799 《奥德赛》成书  \n\n> 公元前650年 斯巴达成为希腊军事霸主  \n\n> 公元前600年 希腊称波斯地区为 波斯  \n\n> 公元前509 罗马共和国 元老院与罗马人民  \n\n> 公元前499年 希波战争  \n\n> 公元前490年  (希波战争)马拉松战役  \n\n> 公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士  \n> 公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败  \n> 公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  \n\n\n> 公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    \n\n> 公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  \n\n> 公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  \n\n\n> 公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  \n\n> 公元前146年 斯巴达被罗马征服  \n\n> 公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  \n> \n> 公元17世纪 罗马废除君主制,成立意大利共和国  \n> 公元1861年 意大利统一  意大利王国  \n> 公元1935年 波斯国王宣布国际改称伊朗 \n> 公元1946年 意大利建立共和国  \n\n\n##### 金苹果  \n希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  \n\n事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。\n\n在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   \n\n##### 三叉戟  \n在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  \n\n特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  \n\n普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.\n\n奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  \n\n\n刺客信条:\n这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。\n\n三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。\n\n  \n\n\n##### 金羊毛  \n\n在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。\n\n故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。\n\n\n##### 裹尸布  \n耶稣被钉死在十字架后用的裹尸布, 殓布.   \n朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.   \n圣杯,真十字架 圣枪都为圣物.   \n\n\n##### 弥赛亚  \n弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。\n\n### 刺客信条 结构  伊甸碎片设计\n\n裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   \n\n游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  \n\n裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。\n\n在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：\n\n　　1、改变先行者的身体结构。\n\n　　2、把思想储存到一些无机物里（比如石头）。\n\n　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  \n\n　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  \n\n\n信条和组织\n\n刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。\n\n巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。\n\n\n\n\n\n\n\n### 轴心时代   \n雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    \n\n完成超越突破拥有超越视野的四种结构:    \n\n* **个体生命的意义在来世 要依靠外力才能实现**  \n这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  \n\n* **个体生命的意义在今生 要依靠外力才能实现**  \n这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。\n\n* **个体生命的意义在来世 要依靠个体自身才能实现**  \n  这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。\n\n* **个体生命的意义在今生 要依靠个体自身才能实现**  \n  这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。\n\n","slug":"2019-01-17-Odyssey","published":1,"updated":"2019-02-19T07:22:36.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6i2000s185ho62xxll4","content":"<blockquote>\n<p>在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  </p>\n<p>希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    </p>\n<p>提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  </p>\n</blockquote>\n<h3 id=\"story-line\"><a href=\"#story-line\" class=\"headerlink\" title=\"story line:\"></a>story line:</h3><p><img src=\"http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg\" alt=\"古代希腊\">   </p>\n  <a id=\"more\"></a> \n<blockquote>\n<p>公元前一万年  亚特兰蒂斯 被洪水毁灭  </p>\n<p>公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  </p>\n<p>公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 </p>\n<p>公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).</p>\n<p>公元前753年 罗马建城  </p>\n<p>公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  </p>\n<p>公元前8世纪 700-799 《奥德赛》成书  </p>\n<p>公元前650年 斯巴达成为希腊军事霸主  </p>\n<p>公元前600年 希腊称波斯地区为 波斯  </p>\n<p>公元前509 罗马共和国 元老院与罗马人民  </p>\n<p>公元前499年 希波战争  </p>\n<p>公元前490年  (希波战争)马拉松战役  </p>\n<p>公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士<br>公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败<br>公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  </p>\n<p>公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    </p>\n<p>公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  </p>\n<p>公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  </p>\n<p>公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  </p>\n<p>公元前146年 斯巴达被罗马征服  </p>\n<p>公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  </p>\n<p>公元17世纪 罗马废除君主制,成立意大利共和国<br>公元1861年 意大利统一  意大利王国<br>公元1935年 波斯国王宣布国际改称伊朗<br>公元1946年 意大利建立共和国  </p>\n</blockquote>\n<h5 id=\"金苹果\"><a href=\"#金苹果\" class=\"headerlink\" title=\"金苹果\"></a>金苹果</h5><p>希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  </p>\n<p>事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。</p>\n<p>在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   </p>\n<h5 id=\"三叉戟\"><a href=\"#三叉戟\" class=\"headerlink\" title=\"三叉戟\"></a>三叉戟</h5><p>在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  </p>\n<p>特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  </p>\n<p>普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.</p>\n<p>奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  </p>\n<p>刺客信条:<br>这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。</p>\n<p>三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。</p>\n<h5 id=\"金羊毛\"><a href=\"#金羊毛\" class=\"headerlink\" title=\"金羊毛\"></a>金羊毛</h5><p>在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。</p>\n<p>故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。</p>\n<h5 id=\"裹尸布\"><a href=\"#裹尸布\" class=\"headerlink\" title=\"裹尸布\"></a>裹尸布</h5><p>耶稣被钉死在十字架后用的裹尸布, 殓布.<br>朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.<br>圣杯,真十字架 圣枪都为圣物.   </p>\n<h5 id=\"弥赛亚\"><a href=\"#弥赛亚\" class=\"headerlink\" title=\"弥赛亚\"></a>弥赛亚</h5><p>弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。</p>\n<h3 id=\"刺客信条-结构-伊甸碎片设计\"><a href=\"#刺客信条-结构-伊甸碎片设计\" class=\"headerlink\" title=\"刺客信条 结构  伊甸碎片设计\"></a>刺客信条 结构  伊甸碎片设计</h3><p>裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   </p>\n<p>游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  </p>\n<p>裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。</p>\n<p>在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：</p>\n<p>　　1、改变先行者的身体结构。</p>\n<p>　　2、把思想储存到一些无机物里（比如石头）。</p>\n<p>　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  </p>\n<p>　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  </p>\n<p>信条和组织</p>\n<p>刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。</p>\n<p>巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。</p>\n<h3 id=\"轴心时代\"><a href=\"#轴心时代\" class=\"headerlink\" title=\"轴心时代\"></a>轴心时代</h3><p>雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    </p>\n<p>完成超越突破拥有超越视野的四种结构:    </p>\n<ul>\n<li><p><strong>个体生命的意义在来世 要依靠外力才能实现</strong><br>这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  </p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠外力才能实现</strong><br>这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。</p>\n</li>\n<li><p><strong>个体生命的意义在来世 要依靠个体自身才能实现</strong><br>这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。</p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠个体自身才能实现</strong><br>这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  </p>\n<p>希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    </p>\n<p>提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  </p>\n</blockquote>\n<h3 id=\"story-line\"><a href=\"#story-line\" class=\"headerlink\" title=\"story line:\"></a>story line:</h3><p><img src=\"http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg\" alt=\"古代希腊\">   </p>","more":"<blockquote>\n<p>公元前一万年  亚特兰蒂斯 被洪水毁灭  </p>\n<p>公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  </p>\n<p>公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 </p>\n<p>公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).</p>\n<p>公元前753年 罗马建城  </p>\n<p>公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  </p>\n<p>公元前8世纪 700-799 《奥德赛》成书  </p>\n<p>公元前650年 斯巴达成为希腊军事霸主  </p>\n<p>公元前600年 希腊称波斯地区为 波斯  </p>\n<p>公元前509 罗马共和国 元老院与罗马人民  </p>\n<p>公元前499年 希波战争  </p>\n<p>公元前490年  (希波战争)马拉松战役  </p>\n<p>公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士<br>公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败<br>公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  </p>\n<p>公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    </p>\n<p>公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  </p>\n<p>公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  </p>\n<p>公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  </p>\n<p>公元前146年 斯巴达被罗马征服  </p>\n<p>公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  </p>\n<p>公元17世纪 罗马废除君主制,成立意大利共和国<br>公元1861年 意大利统一  意大利王国<br>公元1935年 波斯国王宣布国际改称伊朗<br>公元1946年 意大利建立共和国  </p>\n</blockquote>\n<h5 id=\"金苹果\"><a href=\"#金苹果\" class=\"headerlink\" title=\"金苹果\"></a>金苹果</h5><p>希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  </p>\n<p>事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。</p>\n<p>在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   </p>\n<h5 id=\"三叉戟\"><a href=\"#三叉戟\" class=\"headerlink\" title=\"三叉戟\"></a>三叉戟</h5><p>在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  </p>\n<p>特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  </p>\n<p>普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.</p>\n<p>奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  </p>\n<p>刺客信条:<br>这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。</p>\n<p>三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。</p>\n<h5 id=\"金羊毛\"><a href=\"#金羊毛\" class=\"headerlink\" title=\"金羊毛\"></a>金羊毛</h5><p>在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。</p>\n<p>故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。</p>\n<h5 id=\"裹尸布\"><a href=\"#裹尸布\" class=\"headerlink\" title=\"裹尸布\"></a>裹尸布</h5><p>耶稣被钉死在十字架后用的裹尸布, 殓布.<br>朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.<br>圣杯,真十字架 圣枪都为圣物.   </p>\n<h5 id=\"弥赛亚\"><a href=\"#弥赛亚\" class=\"headerlink\" title=\"弥赛亚\"></a>弥赛亚</h5><p>弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。</p>\n<h3 id=\"刺客信条-结构-伊甸碎片设计\"><a href=\"#刺客信条-结构-伊甸碎片设计\" class=\"headerlink\" title=\"刺客信条 结构  伊甸碎片设计\"></a>刺客信条 结构  伊甸碎片设计</h3><p>裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   </p>\n<p>游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  </p>\n<p>裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。</p>\n<p>在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：</p>\n<p>　　1、改变先行者的身体结构。</p>\n<p>　　2、把思想储存到一些无机物里（比如石头）。</p>\n<p>　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  </p>\n<p>　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  </p>\n<p>信条和组织</p>\n<p>刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。</p>\n<p>巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。</p>\n<h3 id=\"轴心时代\"><a href=\"#轴心时代\" class=\"headerlink\" title=\"轴心时代\"></a>轴心时代</h3><p>雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    </p>\n<p>完成超越突破拥有超越视野的四种结构:    </p>\n<ul>\n<li><p><strong>个体生命的意义在来世 要依靠外力才能实现</strong><br>这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  </p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠外力才能实现</strong><br>这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。</p>\n</li>\n<li><p><strong>个体生命的意义在来世 要依靠个体自身才能实现</strong><br>这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。</p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠个体自身才能实现</strong><br>这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。</p>\n</li>\n</ul>"},{"title":"问题的解决","date":"2019-09-15T16:00:00.000Z","author":"yawei.zhang","_content":"\n在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.    \n该过程分为四个阶段  \n* 发现问题\n* 分析（明确）问题\n* 提出假设  \n* 验证假设  \n\n其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    \n\n问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   \n\n\n## 问题解决的一般性阶段及其描述:    \n\n* **问题的存在,发现和提出**  \n* **定义问题域, 即定义问题集以及问题的约束集**  \n* **从问题域中递归的构造可演算的计算(概念)模型**  \n* **制定现实可执行的解决方案**  \n* **实施并植入问题域所在现实环境验证**   \n* **问题的解决**  \n\n在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近'真正的问题'的问题定义, 以及'真正的问题解决'的结果, 从而采用形式化的方法寻找到最优的解决路径   \n\n<!-- more --> \n### 问题的存在   \n问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  \n\n* 数学领域 问题是关于数学对象和结构的疑问, 比如很具体的'求X^2-1=0的解' 或者很一般的'为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。'.     \n* 商业领域 问题是现状和期望的差别 例如\"某项目上线后各项数据低于预期\"  (Root-Cause-Analyze来分析问题)\n* 社会领域 问题是某类困境.  \n\n更具体一些, 差异主要分为两种情况:\n* 主体对上下文的理解和目标状态的理解程度的差异  \n* 客体和目标状态的差异    \n  \n'期望'表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 \"问题是独立于问题解决的主体存在的客观世界的一种表达方式\", 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   \n\n**主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会'不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)', 从而更有利于发现符合逻辑的解释方法和解决方法.**       \n\n* 问题\n问题是期望和现状的差异, 是客观存在的, 是提问的基础.   \n* 提问  \n提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   \n* 目标\n目标是达成'解决问题'的某个具体状态  \n\n\n\n### 对问题的思考   \n* 基本的问题特征  \n  * 定义明确的问题和定义不明确的问题  \n    * 定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    \n  \n  * 复杂规模评估  \n    * 组成问题的部分是否可枚举(不可枚举) \n    * 组成问题的部分是否具备同质性(异质性)  \n    * 组成问题的部分是否彼此连通(连接的层次关系, 分配关系) \n    * 问题是否存在时间限制  \n    * 问题是否对时间敏感 \n    * 问题是否存在相位效应\n    * 问题是否存在动态的不可预测性\n    * 问题的来源是否透明可见  \n    * 问题的发生过程是否透明可见  \n    * 问题是否同时存在多个目标状态  \n      * 多个目标之间是否存在以上可能导致问题复杂的'规模,时间,动态,透明'等复杂问题.\n      * 部分目标是否存在冲突, 不表达等相容问题  \n\n* 分析问题的基本障碍\n  * 确认偏误\n  * 心理(思维)定势\n  * 功能固定性\n  * 不必要的约束\n  * 不相关的信息\n\n* 结构化的问题分析方式   \n  * 搜集和界定问题  \n    * 搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   \n      * 确认期望结果集  \n      * 确认非期望结果集(现状集)  \n    * 提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   \n    * 界定问题域的所属集合以及其约束.   \n  * 逻辑树,问题域建模  \n    * 寻找逻辑关系和结构关系  \n      * 寻找时间/步骤顺序 (时序)  \n      * 寻找空间/结构顺序 (拓扑)  \n      * 寻找程度/重要性顺序 (主次非)  \n    * 基本思维方法\n      * 归纳推理  \n        * 归类分组 概括其共性  以MECE为准则尽量做到不重不漏 \n      * 演绎推理 \n        * 三段论 排除问题或者得出明确的结论   \n      * 质疑和提问  \n  * 构建逻辑模型(逻辑树)  \n    * 自上而下构建\n      * 提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   \n    * 自下而上构建\n      * 通过已确认的基础部分进行有序的组合构造/抽象出上层模型  \n  * 验证和迭代模型   \n\n### 计算机科学领域中的问题解决\n* 定义问题域 (定义问题集以及问题的约束集)   \n  * 包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   \n* 通过形式化方法构建计算模型  \n  * 计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   \n  * 使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     \n  * 构建的基本策略  \n    * 通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    \n* 问题解决域 系统模型构建   \n  * 问题解决域定义了解决问题的过程(实现路径)  \n  * 问题解决域定义了解决问题的目标\n  * 问题解决域定义了解决方案所必须运行的抽象环境.   \n  * 解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   \n  \n* 杂注   \n  * 工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   \n  * 业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    \n  * 数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     \n\n\n### 相关理论:\n\n* 序理论 \n  * 序理论研究数学排序的直觉概念上的各种二元关系.  \n    * 从自然数的<=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. \n  * 序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  \n    * 通过指定 \"<=关系必须是数学意义上的次序关系\"这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序\n      * 这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   \n\n  * (非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  \n    * 偏序集合: 配备了偏序关系的集合    \n    * 定义: \n      * 自反性:   对任意x∈A，有xRx  \n      * 反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 全序：对集合中任意两个元素都有关系  \n    * 全序关系必然是偏序关系 \n  * 严格次序  \n    * <=为平常次序,  <为严格次序  \n  * 严格偏序 \n    * 定义\n      * 反自反性:   对任意x∈A，xRx必然不成立  \n      * 非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 可视化 \n      * 可以使用hasse图等直观的表示部分有序的元素和关系 \n\n \n* 域理论:  \n  * 域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   \n  * 域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  \n    1. 通过对计算的每个域增加一个额外的元素 即形式化'部分信息'或者'不完全信息'的概念,  来构造演算的模型,  并且计算的域被装备一个'次序关系', 这其中的'未定义结果'或者说'部分信息'为最小元素. \n    2. 在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  \n    3. 接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素\")等价于完成一个计算.   \n   \n  * 收敛规范\n    * 在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a<=c 和 b <= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  \n      * 意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   \n      * 有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  \n      * \"有向, 偏序\" 很自然的我们会对dcpo 有向完全偏序感兴趣  \n      * 把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  \n  * 域的基础  \n    * 因为我们无法计算无限大的对象 因此在实践中 \"是否可以保证可以将域的所有元素作为更简单元素的极限来获得\" 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  \n\n* Root-Cause-Analyze  \n  * 核心问题和根本原因    \n  * 产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   \n  * 不同的原因产生不同问题, 在组成'差异'的子集中, 核心问题来自于root cause, 其他问题 或者不是造成'差异'的主要部分,  也或者是属于核心问题的衍生.  \n\n* 科学方法的基本循环步骤  (表征, 假设, 验证)    \n  * 问题的认知与表述 (表征, 通过观察和分析明确问题)  \n    * 问题需要满足 可观察 可经验（empirical） 可量度   \n  * 提出假设  \n    * 提出一个达到解决问题的目标       \n  * 预测(解释)     \n    * 对提出的假设或者理论进行归纳和演绎推论  \n  * 实验   \n    * 对上述表征 假设 预测进行测试验证   \n  * 实验结果分析  提出新的假设   \n  * 发布结果   ","source":"_posts/2019-09-16-problem-domain.md","raw":"---\ntitle: 问题的解决  \ndate: 2019-09-16\ncategories: develop \nauthor: yawei.zhang \n---\n\n在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.    \n该过程分为四个阶段  \n* 发现问题\n* 分析（明确）问题\n* 提出假设  \n* 验证假设  \n\n其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    \n\n问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   \n\n\n## 问题解决的一般性阶段及其描述:    \n\n* **问题的存在,发现和提出**  \n* **定义问题域, 即定义问题集以及问题的约束集**  \n* **从问题域中递归的构造可演算的计算(概念)模型**  \n* **制定现实可执行的解决方案**  \n* **实施并植入问题域所在现实环境验证**   \n* **问题的解决**  \n\n在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近'真正的问题'的问题定义, 以及'真正的问题解决'的结果, 从而采用形式化的方法寻找到最优的解决路径   \n\n<!-- more --> \n### 问题的存在   \n问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  \n\n* 数学领域 问题是关于数学对象和结构的疑问, 比如很具体的'求X^2-1=0的解' 或者很一般的'为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。'.     \n* 商业领域 问题是现状和期望的差别 例如\"某项目上线后各项数据低于预期\"  (Root-Cause-Analyze来分析问题)\n* 社会领域 问题是某类困境.  \n\n更具体一些, 差异主要分为两种情况:\n* 主体对上下文的理解和目标状态的理解程度的差异  \n* 客体和目标状态的差异    \n  \n'期望'表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 \"问题是独立于问题解决的主体存在的客观世界的一种表达方式\", 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   \n\n**主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会'不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)', 从而更有利于发现符合逻辑的解释方法和解决方法.**       \n\n* 问题\n问题是期望和现状的差异, 是客观存在的, 是提问的基础.   \n* 提问  \n提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   \n* 目标\n目标是达成'解决问题'的某个具体状态  \n\n\n\n### 对问题的思考   \n* 基本的问题特征  \n  * 定义明确的问题和定义不明确的问题  \n    * 定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    \n  \n  * 复杂规模评估  \n    * 组成问题的部分是否可枚举(不可枚举) \n    * 组成问题的部分是否具备同质性(异质性)  \n    * 组成问题的部分是否彼此连通(连接的层次关系, 分配关系) \n    * 问题是否存在时间限制  \n    * 问题是否对时间敏感 \n    * 问题是否存在相位效应\n    * 问题是否存在动态的不可预测性\n    * 问题的来源是否透明可见  \n    * 问题的发生过程是否透明可见  \n    * 问题是否同时存在多个目标状态  \n      * 多个目标之间是否存在以上可能导致问题复杂的'规模,时间,动态,透明'等复杂问题.\n      * 部分目标是否存在冲突, 不表达等相容问题  \n\n* 分析问题的基本障碍\n  * 确认偏误\n  * 心理(思维)定势\n  * 功能固定性\n  * 不必要的约束\n  * 不相关的信息\n\n* 结构化的问题分析方式   \n  * 搜集和界定问题  \n    * 搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   \n      * 确认期望结果集  \n      * 确认非期望结果集(现状集)  \n    * 提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   \n    * 界定问题域的所属集合以及其约束.   \n  * 逻辑树,问题域建模  \n    * 寻找逻辑关系和结构关系  \n      * 寻找时间/步骤顺序 (时序)  \n      * 寻找空间/结构顺序 (拓扑)  \n      * 寻找程度/重要性顺序 (主次非)  \n    * 基本思维方法\n      * 归纳推理  \n        * 归类分组 概括其共性  以MECE为准则尽量做到不重不漏 \n      * 演绎推理 \n        * 三段论 排除问题或者得出明确的结论   \n      * 质疑和提问  \n  * 构建逻辑模型(逻辑树)  \n    * 自上而下构建\n      * 提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   \n    * 自下而上构建\n      * 通过已确认的基础部分进行有序的组合构造/抽象出上层模型  \n  * 验证和迭代模型   \n\n### 计算机科学领域中的问题解决\n* 定义问题域 (定义问题集以及问题的约束集)   \n  * 包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   \n* 通过形式化方法构建计算模型  \n  * 计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   \n  * 使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     \n  * 构建的基本策略  \n    * 通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    \n* 问题解决域 系统模型构建   \n  * 问题解决域定义了解决问题的过程(实现路径)  \n  * 问题解决域定义了解决问题的目标\n  * 问题解决域定义了解决方案所必须运行的抽象环境.   \n  * 解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   \n  \n* 杂注   \n  * 工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   \n  * 业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    \n  * 数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     \n\n\n### 相关理论:\n\n* 序理论 \n  * 序理论研究数学排序的直觉概念上的各种二元关系.  \n    * 从自然数的<=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. \n  * 序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  \n    * 通过指定 \"<=关系必须是数学意义上的次序关系\"这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序\n      * 这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   \n\n  * (非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  \n    * 偏序集合: 配备了偏序关系的集合    \n    * 定义: \n      * 自反性:   对任意x∈A，有xRx  \n      * 反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 全序：对集合中任意两个元素都有关系  \n    * 全序关系必然是偏序关系 \n  * 严格次序  \n    * <=为平常次序,  <为严格次序  \n  * 严格偏序 \n    * 定义\n      * 反自反性:   对任意x∈A，xRx必然不成立  \n      * 非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 可视化 \n      * 可以使用hasse图等直观的表示部分有序的元素和关系 \n\n \n* 域理论:  \n  * 域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   \n  * 域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  \n    1. 通过对计算的每个域增加一个额外的元素 即形式化'部分信息'或者'不完全信息'的概念,  来构造演算的模型,  并且计算的域被装备一个'次序关系', 这其中的'未定义结果'或者说'部分信息'为最小元素. \n    2. 在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  \n    3. 接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素\")等价于完成一个计算.   \n   \n  * 收敛规范\n    * 在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a<=c 和 b <= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  \n      * 意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   \n      * 有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  \n      * \"有向, 偏序\" 很自然的我们会对dcpo 有向完全偏序感兴趣  \n      * 把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  \n  * 域的基础  \n    * 因为我们无法计算无限大的对象 因此在实践中 \"是否可以保证可以将域的所有元素作为更简单元素的极限来获得\" 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  \n\n* Root-Cause-Analyze  \n  * 核心问题和根本原因    \n  * 产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   \n  * 不同的原因产生不同问题, 在组成'差异'的子集中, 核心问题来自于root cause, 其他问题 或者不是造成'差异'的主要部分,  也或者是属于核心问题的衍生.  \n\n* 科学方法的基本循环步骤  (表征, 假设, 验证)    \n  * 问题的认知与表述 (表征, 通过观察和分析明确问题)  \n    * 问题需要满足 可观察 可经验（empirical） 可量度   \n  * 提出假设  \n    * 提出一个达到解决问题的目标       \n  * 预测(解释)     \n    * 对提出的假设或者理论进行归纳和演绎推论  \n  * 实验   \n    * 对上述表征 假设 预测进行测试验证   \n  * 实验结果分析  提出新的假设   \n  * 发布结果   ","slug":"2019-09-16-problem-domain","published":1,"updated":"2019-11-04T08:55:28.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6i3000t185hjcrcpdit","content":"<p>在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.<br>该过程分为四个阶段  </p>\n<ul>\n<li>发现问题</li>\n<li>分析（明确）问题</li>\n<li>提出假设  </li>\n<li>验证假设  </li>\n</ul>\n<p>其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    </p>\n<p>问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   </p>\n<h2 id=\"问题解决的一般性阶段及其描述\"><a href=\"#问题解决的一般性阶段及其描述\" class=\"headerlink\" title=\"问题解决的一般性阶段及其描述:\"></a>问题解决的一般性阶段及其描述:</h2><ul>\n<li><strong>问题的存在,发现和提出</strong>  </li>\n<li><strong>定义问题域, 即定义问题集以及问题的约束集</strong>  </li>\n<li><strong>从问题域中递归的构造可演算的计算(概念)模型</strong>  </li>\n<li><strong>制定现实可执行的解决方案</strong>  </li>\n<li><strong>实施并植入问题域所在现实环境验证</strong>   </li>\n<li><strong>问题的解决</strong>  </li>\n</ul>\n<p>在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近’真正的问题’的问题定义, 以及’真正的问题解决’的结果, 从而采用形式化的方法寻找到最优的解决路径   </p>\n<a id=\"more\"></a> \n<h3 id=\"问题的存在\"><a href=\"#问题的存在\" class=\"headerlink\" title=\"问题的存在\"></a>问题的存在</h3><p>问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  </p>\n<ul>\n<li>数学领域 问题是关于数学对象和结构的疑问, 比如很具体的’求X^2-1=0的解’ 或者很一般的’为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。’.     </li>\n<li>商业领域 问题是现状和期望的差别 例如”某项目上线后各项数据低于预期”  (Root-Cause-Analyze来分析问题)</li>\n<li>社会领域 问题是某类困境.  </li>\n</ul>\n<p>更具体一些, 差异主要分为两种情况:</p>\n<ul>\n<li>主体对上下文的理解和目标状态的理解程度的差异  </li>\n<li>客体和目标状态的差异    </li>\n</ul>\n<p>‘期望’表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 “问题是独立于问题解决的主体存在的客观世界的一种表达方式”, 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   </p>\n<p><strong>主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会’不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)’, 从而更有利于发现符合逻辑的解释方法和解决方法.</strong>       </p>\n<ul>\n<li>问题<br>问题是期望和现状的差异, 是客观存在的, 是提问的基础.   </li>\n<li>提问<br>提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   </li>\n<li>目标<br>目标是达成’解决问题’的某个具体状态  </li>\n</ul>\n<h3 id=\"对问题的思考\"><a href=\"#对问题的思考\" class=\"headerlink\" title=\"对问题的思考\"></a>对问题的思考</h3><ul>\n<li><p>基本的问题特征  </p>\n<ul>\n<li><p>定义明确的问题和定义不明确的问题  </p>\n<ul>\n<li>定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    </li>\n</ul>\n</li>\n<li><p>复杂规模评估  </p>\n<ul>\n<li>组成问题的部分是否可枚举(不可枚举) </li>\n<li>组成问题的部分是否具备同质性(异质性)  </li>\n<li>组成问题的部分是否彼此连通(连接的层次关系, 分配关系) </li>\n<li>问题是否存在时间限制  </li>\n<li>问题是否对时间敏感 </li>\n<li>问题是否存在相位效应</li>\n<li>问题是否存在动态的不可预测性</li>\n<li>问题的来源是否透明可见  </li>\n<li>问题的发生过程是否透明可见  </li>\n<li>问题是否同时存在多个目标状态  <ul>\n<li>多个目标之间是否存在以上可能导致问题复杂的’规模,时间,动态,透明’等复杂问题.</li>\n<li>部分目标是否存在冲突, 不表达等相容问题  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分析问题的基本障碍</p>\n<ul>\n<li>确认偏误</li>\n<li>心理(思维)定势</li>\n<li>功能固定性</li>\n<li>不必要的约束</li>\n<li>不相关的信息</li>\n</ul>\n</li>\n<li><p>结构化的问题分析方式   </p>\n<ul>\n<li>搜集和界定问题  <ul>\n<li>搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   <ul>\n<li>确认期望结果集  </li>\n<li>确认非期望结果集(现状集)  </li>\n</ul>\n</li>\n<li>提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   </li>\n<li>界定问题域的所属集合以及其约束.   </li>\n</ul>\n</li>\n<li>逻辑树,问题域建模  <ul>\n<li>寻找逻辑关系和结构关系  <ul>\n<li>寻找时间/步骤顺序 (时序)  </li>\n<li>寻找空间/结构顺序 (拓扑)  </li>\n<li>寻找程度/重要性顺序 (主次非)  </li>\n</ul>\n</li>\n<li>基本思维方法<ul>\n<li>归纳推理  <ul>\n<li>归类分组 概括其共性  以MECE为准则尽量做到不重不漏 </li>\n</ul>\n</li>\n<li>演绎推理 <ul>\n<li>三段论 排除问题或者得出明确的结论   </li>\n</ul>\n</li>\n<li>质疑和提问  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构建逻辑模型(逻辑树)  <ul>\n<li>自上而下构建<ul>\n<li>提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   </li>\n</ul>\n</li>\n<li>自下而上构建<ul>\n<li>通过已确认的基础部分进行有序的组合构造/抽象出上层模型  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>验证和迭代模型   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机科学领域中的问题解决\"><a href=\"#计算机科学领域中的问题解决\" class=\"headerlink\" title=\"计算机科学领域中的问题解决\"></a>计算机科学领域中的问题解决</h3><ul>\n<li>定义问题域 (定义问题集以及问题的约束集)   <ul>\n<li>包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   </li>\n</ul>\n</li>\n<li>通过形式化方法构建计算模型  <ul>\n<li>计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   </li>\n<li>使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     </li>\n<li>构建的基本策略  <ul>\n<li>通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>问题解决域 系统模型构建   </p>\n<ul>\n<li>问题解决域定义了解决问题的过程(实现路径)  </li>\n<li>问题解决域定义了解决问题的目标</li>\n<li>问题解决域定义了解决方案所必须运行的抽象环境.   </li>\n<li>解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   </li>\n</ul>\n</li>\n<li><p>杂注   </p>\n<ul>\n<li>工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   </li>\n<li>业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    </li>\n<li>数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相关理论\"><a href=\"#相关理论\" class=\"headerlink\" title=\"相关理论:\"></a>相关理论:</h3><ul>\n<li><p>序理论 </p>\n<ul>\n<li>序理论研究数学排序的直觉概念上的各种二元关系.  <ul>\n<li>从自然数的&lt;=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. </li>\n</ul>\n</li>\n<li><p>序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  </p>\n<ul>\n<li>通过指定 “&lt;=关系必须是数学意义上的次序关系”这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序<ul>\n<li>这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>(非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  </p>\n<ul>\n<li>偏序集合: 配备了偏序关系的集合    </li>\n<li>定义: <ul>\n<li>自反性:   对任意x∈A，有xRx  </li>\n<li>反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>全序：对集合中任意两个元素都有关系  <ul>\n<li>全序关系必然是偏序关系 </li>\n</ul>\n</li>\n<li>严格次序  <ul>\n<li>&lt;=为平常次序,  &lt;为严格次序  </li>\n</ul>\n</li>\n<li>严格偏序 <ul>\n<li>定义<ul>\n<li>反自反性:   对任意x∈A，xRx必然不成立  </li>\n<li>非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>可视化 <ul>\n<li>可以使用hasse图等直观的表示部分有序的元素和关系 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>域理论:  </p>\n<ul>\n<li>域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   </li>\n<li><p>域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  </p>\n<ol>\n<li>通过对计算的每个域增加一个额外的元素 即形式化’部分信息’或者’不完全信息’的概念,  来构造演算的模型,  并且计算的域被装备一个’次序关系’, 这其中的’未定义结果’或者说’部分信息’为最小元素. </li>\n<li>在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  </li>\n<li>接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素”)等价于完成一个计算.   </li>\n</ol>\n</li>\n<li><p>收敛规范</p>\n<ul>\n<li>在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a&lt;=c 和 b &lt;= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  <ul>\n<li>意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   </li>\n<li>有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  </li>\n<li>“有向, 偏序” 很自然的我们会对dcpo 有向完全偏序感兴趣  </li>\n<li>把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>域的基础  <ul>\n<li>因为我们无法计算无限大的对象 因此在实践中 “是否可以保证可以将域的所有元素作为更简单元素的极限来获得” 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Root-Cause-Analyze  </p>\n<ul>\n<li>核心问题和根本原因    </li>\n<li>产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   </li>\n<li>不同的原因产生不同问题, 在组成’差异’的子集中, 核心问题来自于root cause, 其他问题 或者不是造成’差异’的主要部分,  也或者是属于核心问题的衍生.  </li>\n</ul>\n</li>\n<li><p>科学方法的基本循环步骤  (表征, 假设, 验证)    </p>\n<ul>\n<li>问题的认知与表述 (表征, 通过观察和分析明确问题)  <ul>\n<li>问题需要满足 可观察 可经验（empirical） 可量度   </li>\n</ul>\n</li>\n<li>提出假设  <ul>\n<li>提出一个达到解决问题的目标       </li>\n</ul>\n</li>\n<li>预测(解释)     <ul>\n<li>对提出的假设或者理论进行归纳和演绎推论  </li>\n</ul>\n</li>\n<li>实验   <ul>\n<li>对上述表征 假设 预测进行测试验证   </li>\n</ul>\n</li>\n<li>实验结果分析  提出新的假设   </li>\n<li>发布结果   </li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.<br>该过程分为四个阶段  </p>\n<ul>\n<li>发现问题</li>\n<li>分析（明确）问题</li>\n<li>提出假设  </li>\n<li>验证假设  </li>\n</ul>\n<p>其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    </p>\n<p>问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   </p>\n<h2 id=\"问题解决的一般性阶段及其描述\"><a href=\"#问题解决的一般性阶段及其描述\" class=\"headerlink\" title=\"问题解决的一般性阶段及其描述:\"></a>问题解决的一般性阶段及其描述:</h2><ul>\n<li><strong>问题的存在,发现和提出</strong>  </li>\n<li><strong>定义问题域, 即定义问题集以及问题的约束集</strong>  </li>\n<li><strong>从问题域中递归的构造可演算的计算(概念)模型</strong>  </li>\n<li><strong>制定现实可执行的解决方案</strong>  </li>\n<li><strong>实施并植入问题域所在现实环境验证</strong>   </li>\n<li><strong>问题的解决</strong>  </li>\n</ul>\n<p>在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近’真正的问题’的问题定义, 以及’真正的问题解决’的结果, 从而采用形式化的方法寻找到最优的解决路径   </p>","more":"<h3 id=\"问题的存在\"><a href=\"#问题的存在\" class=\"headerlink\" title=\"问题的存在\"></a>问题的存在</h3><p>问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  </p>\n<ul>\n<li>数学领域 问题是关于数学对象和结构的疑问, 比如很具体的’求X^2-1=0的解’ 或者很一般的’为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。’.     </li>\n<li>商业领域 问题是现状和期望的差别 例如”某项目上线后各项数据低于预期”  (Root-Cause-Analyze来分析问题)</li>\n<li>社会领域 问题是某类困境.  </li>\n</ul>\n<p>更具体一些, 差异主要分为两种情况:</p>\n<ul>\n<li>主体对上下文的理解和目标状态的理解程度的差异  </li>\n<li>客体和目标状态的差异    </li>\n</ul>\n<p>‘期望’表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 “问题是独立于问题解决的主体存在的客观世界的一种表达方式”, 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   </p>\n<p><strong>主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会’不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)’, 从而更有利于发现符合逻辑的解释方法和解决方法.</strong>       </p>\n<ul>\n<li>问题<br>问题是期望和现状的差异, 是客观存在的, 是提问的基础.   </li>\n<li>提问<br>提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   </li>\n<li>目标<br>目标是达成’解决问题’的某个具体状态  </li>\n</ul>\n<h3 id=\"对问题的思考\"><a href=\"#对问题的思考\" class=\"headerlink\" title=\"对问题的思考\"></a>对问题的思考</h3><ul>\n<li><p>基本的问题特征  </p>\n<ul>\n<li><p>定义明确的问题和定义不明确的问题  </p>\n<ul>\n<li>定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    </li>\n</ul>\n</li>\n<li><p>复杂规模评估  </p>\n<ul>\n<li>组成问题的部分是否可枚举(不可枚举) </li>\n<li>组成问题的部分是否具备同质性(异质性)  </li>\n<li>组成问题的部分是否彼此连通(连接的层次关系, 分配关系) </li>\n<li>问题是否存在时间限制  </li>\n<li>问题是否对时间敏感 </li>\n<li>问题是否存在相位效应</li>\n<li>问题是否存在动态的不可预测性</li>\n<li>问题的来源是否透明可见  </li>\n<li>问题的发生过程是否透明可见  </li>\n<li>问题是否同时存在多个目标状态  <ul>\n<li>多个目标之间是否存在以上可能导致问题复杂的’规模,时间,动态,透明’等复杂问题.</li>\n<li>部分目标是否存在冲突, 不表达等相容问题  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分析问题的基本障碍</p>\n<ul>\n<li>确认偏误</li>\n<li>心理(思维)定势</li>\n<li>功能固定性</li>\n<li>不必要的约束</li>\n<li>不相关的信息</li>\n</ul>\n</li>\n<li><p>结构化的问题分析方式   </p>\n<ul>\n<li>搜集和界定问题  <ul>\n<li>搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   <ul>\n<li>确认期望结果集  </li>\n<li>确认非期望结果集(现状集)  </li>\n</ul>\n</li>\n<li>提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   </li>\n<li>界定问题域的所属集合以及其约束.   </li>\n</ul>\n</li>\n<li>逻辑树,问题域建模  <ul>\n<li>寻找逻辑关系和结构关系  <ul>\n<li>寻找时间/步骤顺序 (时序)  </li>\n<li>寻找空间/结构顺序 (拓扑)  </li>\n<li>寻找程度/重要性顺序 (主次非)  </li>\n</ul>\n</li>\n<li>基本思维方法<ul>\n<li>归纳推理  <ul>\n<li>归类分组 概括其共性  以MECE为准则尽量做到不重不漏 </li>\n</ul>\n</li>\n<li>演绎推理 <ul>\n<li>三段论 排除问题或者得出明确的结论   </li>\n</ul>\n</li>\n<li>质疑和提问  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构建逻辑模型(逻辑树)  <ul>\n<li>自上而下构建<ul>\n<li>提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   </li>\n</ul>\n</li>\n<li>自下而上构建<ul>\n<li>通过已确认的基础部分进行有序的组合构造/抽象出上层模型  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>验证和迭代模型   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机科学领域中的问题解决\"><a href=\"#计算机科学领域中的问题解决\" class=\"headerlink\" title=\"计算机科学领域中的问题解决\"></a>计算机科学领域中的问题解决</h3><ul>\n<li>定义问题域 (定义问题集以及问题的约束集)   <ul>\n<li>包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   </li>\n</ul>\n</li>\n<li>通过形式化方法构建计算模型  <ul>\n<li>计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   </li>\n<li>使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     </li>\n<li>构建的基本策略  <ul>\n<li>通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>问题解决域 系统模型构建   </p>\n<ul>\n<li>问题解决域定义了解决问题的过程(实现路径)  </li>\n<li>问题解决域定义了解决问题的目标</li>\n<li>问题解决域定义了解决方案所必须运行的抽象环境.   </li>\n<li>解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   </li>\n</ul>\n</li>\n<li><p>杂注   </p>\n<ul>\n<li>工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   </li>\n<li>业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    </li>\n<li>数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相关理论\"><a href=\"#相关理论\" class=\"headerlink\" title=\"相关理论:\"></a>相关理论:</h3><ul>\n<li><p>序理论 </p>\n<ul>\n<li>序理论研究数学排序的直觉概念上的各种二元关系.  <ul>\n<li>从自然数的&lt;=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. </li>\n</ul>\n</li>\n<li><p>序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  </p>\n<ul>\n<li>通过指定 “&lt;=关系必须是数学意义上的次序关系”这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序<ul>\n<li>这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>(非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  </p>\n<ul>\n<li>偏序集合: 配备了偏序关系的集合    </li>\n<li>定义: <ul>\n<li>自反性:   对任意x∈A，有xRx  </li>\n<li>反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>全序：对集合中任意两个元素都有关系  <ul>\n<li>全序关系必然是偏序关系 </li>\n</ul>\n</li>\n<li>严格次序  <ul>\n<li>&lt;=为平常次序,  &lt;为严格次序  </li>\n</ul>\n</li>\n<li>严格偏序 <ul>\n<li>定义<ul>\n<li>反自反性:   对任意x∈A，xRx必然不成立  </li>\n<li>非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>可视化 <ul>\n<li>可以使用hasse图等直观的表示部分有序的元素和关系 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>域理论:  </p>\n<ul>\n<li>域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   </li>\n<li><p>域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  </p>\n<ol>\n<li>通过对计算的每个域增加一个额外的元素 即形式化’部分信息’或者’不完全信息’的概念,  来构造演算的模型,  并且计算的域被装备一个’次序关系’, 这其中的’未定义结果’或者说’部分信息’为最小元素. </li>\n<li>在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  </li>\n<li>接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素”)等价于完成一个计算.   </li>\n</ol>\n</li>\n<li><p>收敛规范</p>\n<ul>\n<li>在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a&lt;=c 和 b &lt;= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  <ul>\n<li>意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   </li>\n<li>有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  </li>\n<li>“有向, 偏序” 很自然的我们会对dcpo 有向完全偏序感兴趣  </li>\n<li>把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>域的基础  <ul>\n<li>因为我们无法计算无限大的对象 因此在实践中 “是否可以保证可以将域的所有元素作为更简单元素的极限来获得” 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Root-Cause-Analyze  </p>\n<ul>\n<li>核心问题和根本原因    </li>\n<li>产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   </li>\n<li>不同的原因产生不同问题, 在组成’差异’的子集中, 核心问题来自于root cause, 其他问题 或者不是造成’差异’的主要部分,  也或者是属于核心问题的衍生.  </li>\n</ul>\n</li>\n<li><p>科学方法的基本循环步骤  (表征, 假设, 验证)    </p>\n<ul>\n<li>问题的认知与表述 (表征, 通过观察和分析明确问题)  <ul>\n<li>问题需要满足 可观察 可经验（empirical） 可量度   </li>\n</ul>\n</li>\n<li>提出假设  <ul>\n<li>提出一个达到解决问题的目标       </li>\n</ul>\n</li>\n<li>预测(解释)     <ul>\n<li>对提出的假设或者理论进行归纳和演绎推论  </li>\n</ul>\n</li>\n<li>实验   <ul>\n<li>对上述表征 假设 预测进行测试验证   </li>\n</ul>\n</li>\n<li>实验结果分析  提出新的假设   </li>\n<li>发布结果   </li>\n</ul>\n</li>\n</ul>"},{"title":"RVO源码阅读笔记","date":"2019-06-08T10:37:00.000Z","author":"yawei.zhang","_content":"\n \n##### KDTREE  \n空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### 路径规划  \n##### 高级规划  \nDIJKSTRA 最短路径  等寻路方法  \n##### 底层规划  \nVO RVO ORCA等Obstacle Avoidance避障算法  \n\n### KDTREE\n这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### VO  Velocity Obstacles  速度障碍  \n核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外   \n抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  \n\n### RVO Reciprocal Velocity Obstacles  互惠的速度障碍  \n核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   \n\n### ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免  \n核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   \n\n* **对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA**  \n* **在候选集中求解跟自己偏好速度最近的一个速度vnewA**  \n\n<!-- more --> \n##### computeNewVelocity  \n``` cpp\n/* Search for the best new velocity. */\nvoid Agent::computeNewVelocity()\n{\n    orcaLines_.clear();\n\n    const size_t numObstLines = orcaLines_.size();\n\n    const float invTimeHorizon = 1.0f / timeHorizon_;\n\n    /* Create agent ORCA lines. */\n    for (size_t i = 0; i < agentNeighbors_.size(); ++i) {\n        const Agent *const other = agentNeighbors_[i].second;\n\n        const Vector2 relativePosition = other->position_ - position_;\n        const Vector2 relativeVelocity = velocity_ - other->velocity_;\n        const float distSq = absSq(relativePosition);\n        const float combinedRadius = radius_ + other->radius_;\n        const float combinedRadiusSq = sqr(combinedRadius);\n\n        Line line;\n        Vector2 u;\n\n        if (distSq > combinedRadiusSq) {\n            /* No collision. */\n            const Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;\n            /* Vector from cutoff center to relative velocity. */\n            const float wLengthSq = absSq(w);\n\n            const float dotProduct1 = w * relativePosition;\n\n            if (dotProduct1 < 0.0f && sqr(dotProduct1) > combinedRadiusSq * wLengthSq) {\n                /* Project on cut-off circle. */\n                const float wLength = std::sqrt(wLengthSq);\n                const Vector2 unitW = w / wLength;\n\n                line.direction = Vector2(unitW.y(), -unitW.x());\n                u = (combinedRadius * invTimeHorizon - wLength) * unitW;\n            }\n            else {\n                /* Project on legs. */\n                const float leg = std::sqrt(distSq - combinedRadiusSq);\n\n                if (det(relativePosition, w) > 0.0f) {\n                    /* Project on left leg. */\n                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n                else {\n                    /* Project on right leg. */\n                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n\n                const float dotProduct2 = relativeVelocity * line.direction;\n\n                u = dotProduct2 * line.direction - relativeVelocity;\n            }\n        }\n        else {\n            /* Collision. Project on cut-off circle of time timeStep. */\n            const float invTimeStep = 1.0f / sim_->timeStep_;\n\n            /* Vector from cutoff center to relative velocity. */\n            const Vector2 w = relativeVelocity - invTimeStep * relativePosition;\n\n            const float wLength = abs(w);\n            const Vector2 unitW = w / wLength;\n\n            line.direction = Vector2(unitW.y(), -unitW.x());\n            u = (combinedRadius * invTimeStep - wLength) * unitW;\n        }\n\n        line.point = velocity_ + 0.5f * u;\n        orcaLines_.push_back(line);\n    }\n\n    size_t lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, false, newVelocity_);\n\n    if (lineFail < orcaLines_.size()) {\n        //linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);\n    }\n}\n```\n##### linearProgram2\n``` cpp\nsize_t linearProgram2(const std::vector<Line> &lines, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    if (directionOpt) {\n        /*\n            * Optimize direction. Note that the optimization velocity is of unit\n            * length in this case.\n            */\n        result = optVelocity * radius;\n    }\n    else if (absSq(optVelocity) > sqr(radius)) {\n        /* Optimize closest point and outside circle. */\n        result = normalize(optVelocity) * radius;\n    }\n    else {\n        /* Optimize closest point and inside circle. */\n        result = optVelocity;\n    }\n\n    for (size_t i = 0; i < lines.size(); ++i) {\n        if (det(lines[i].direction, lines[i].point - result) > 0.0f) {\n            /* Result does not satisfy constraint i. Compute new optimal result. */\n            const Vector2 tempResult = result;\n\n            if (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) {\n                result = tempResult;\n                return i;\n            }\n        }\n    }\n\n    return lines.size();\n}\n```\n\n##### linearProgram1\n``` cpp \nbool linearProgram1(const std::vector<Line> &lines, size_t lineNo, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    const float dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    const float discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    if (discriminant < 0.0f) {\n        /* Max speed circle fully invalidates line lineNo. */\n        return false;\n    }\n\n    const float sqrtDiscriminant = std::sqrt(discriminant);\n    float tLeft = -dotProduct - sqrtDiscriminant;\n    float tRight = -dotProduct + sqrtDiscriminant;\n\n    for (size_t i = 0; i < lineNo; ++i) {\n        const float denominator = det(lines[lineNo].direction, lines[i].direction);\n        const float numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        if (std::fabs(denominator) <= RVO_EPSILON) {\n            /* Lines lineNo and i are (almost) parallel. */\n            if (numerator < 0.0f) {\n                return false;\n            }\n            else {\n                continue;\n            }\n        }\n\n        const float t = numerator / denominator;\n\n        if (denominator >= 0.0f) {\n            /* Line i bounds line lineNo on the right. */\n            tRight = std::min(tRight, t);\n        }\n        else {\n            /* Line i bounds line lineNo on the left. */\n            tLeft = std::max(tLeft, t);\n        }\n\n        if (tLeft > tRight) {\n            return false;\n        }\n    }\n\n    if (directionOpt) {\n        /* Optimize direction. */\n        if (optVelocity * lines[lineNo].direction > 0.0f) {\n            /* Take right extreme. */\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            /* Take left extreme. */\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    else {\n        /* Optimize closest point. */\n        const float t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        if (t < tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        else if (t > tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    return true;\n}\n``` \n","source":"_posts/2019-06-08-rvo.md","raw":"---\ntitle: RVO源码阅读笔记  \ndate: 2019-06-08 18:37:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n \n##### KDTREE  \n空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### 路径规划  \n##### 高级规划  \nDIJKSTRA 最短路径  等寻路方法  \n##### 底层规划  \nVO RVO ORCA等Obstacle Avoidance避障算法  \n\n### KDTREE\n这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### VO  Velocity Obstacles  速度障碍  \n核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外   \n抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  \n\n### RVO Reciprocal Velocity Obstacles  互惠的速度障碍  \n核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   \n\n### ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免  \n核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   \n\n* **对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA**  \n* **在候选集中求解跟自己偏好速度最近的一个速度vnewA**  \n\n<!-- more --> \n##### computeNewVelocity  \n``` cpp\n/* Search for the best new velocity. */\nvoid Agent::computeNewVelocity()\n{\n    orcaLines_.clear();\n\n    const size_t numObstLines = orcaLines_.size();\n\n    const float invTimeHorizon = 1.0f / timeHorizon_;\n\n    /* Create agent ORCA lines. */\n    for (size_t i = 0; i < agentNeighbors_.size(); ++i) {\n        const Agent *const other = agentNeighbors_[i].second;\n\n        const Vector2 relativePosition = other->position_ - position_;\n        const Vector2 relativeVelocity = velocity_ - other->velocity_;\n        const float distSq = absSq(relativePosition);\n        const float combinedRadius = radius_ + other->radius_;\n        const float combinedRadiusSq = sqr(combinedRadius);\n\n        Line line;\n        Vector2 u;\n\n        if (distSq > combinedRadiusSq) {\n            /* No collision. */\n            const Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;\n            /* Vector from cutoff center to relative velocity. */\n            const float wLengthSq = absSq(w);\n\n            const float dotProduct1 = w * relativePosition;\n\n            if (dotProduct1 < 0.0f && sqr(dotProduct1) > combinedRadiusSq * wLengthSq) {\n                /* Project on cut-off circle. */\n                const float wLength = std::sqrt(wLengthSq);\n                const Vector2 unitW = w / wLength;\n\n                line.direction = Vector2(unitW.y(), -unitW.x());\n                u = (combinedRadius * invTimeHorizon - wLength) * unitW;\n            }\n            else {\n                /* Project on legs. */\n                const float leg = std::sqrt(distSq - combinedRadiusSq);\n\n                if (det(relativePosition, w) > 0.0f) {\n                    /* Project on left leg. */\n                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n                else {\n                    /* Project on right leg. */\n                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n\n                const float dotProduct2 = relativeVelocity * line.direction;\n\n                u = dotProduct2 * line.direction - relativeVelocity;\n            }\n        }\n        else {\n            /* Collision. Project on cut-off circle of time timeStep. */\n            const float invTimeStep = 1.0f / sim_->timeStep_;\n\n            /* Vector from cutoff center to relative velocity. */\n            const Vector2 w = relativeVelocity - invTimeStep * relativePosition;\n\n            const float wLength = abs(w);\n            const Vector2 unitW = w / wLength;\n\n            line.direction = Vector2(unitW.y(), -unitW.x());\n            u = (combinedRadius * invTimeStep - wLength) * unitW;\n        }\n\n        line.point = velocity_ + 0.5f * u;\n        orcaLines_.push_back(line);\n    }\n\n    size_t lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, false, newVelocity_);\n\n    if (lineFail < orcaLines_.size()) {\n        //linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);\n    }\n}\n```\n##### linearProgram2\n``` cpp\nsize_t linearProgram2(const std::vector<Line> &lines, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    if (directionOpt) {\n        /*\n            * Optimize direction. Note that the optimization velocity is of unit\n            * length in this case.\n            */\n        result = optVelocity * radius;\n    }\n    else if (absSq(optVelocity) > sqr(radius)) {\n        /* Optimize closest point and outside circle. */\n        result = normalize(optVelocity) * radius;\n    }\n    else {\n        /* Optimize closest point and inside circle. */\n        result = optVelocity;\n    }\n\n    for (size_t i = 0; i < lines.size(); ++i) {\n        if (det(lines[i].direction, lines[i].point - result) > 0.0f) {\n            /* Result does not satisfy constraint i. Compute new optimal result. */\n            const Vector2 tempResult = result;\n\n            if (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) {\n                result = tempResult;\n                return i;\n            }\n        }\n    }\n\n    return lines.size();\n}\n```\n\n##### linearProgram1\n``` cpp \nbool linearProgram1(const std::vector<Line> &lines, size_t lineNo, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    const float dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    const float discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    if (discriminant < 0.0f) {\n        /* Max speed circle fully invalidates line lineNo. */\n        return false;\n    }\n\n    const float sqrtDiscriminant = std::sqrt(discriminant);\n    float tLeft = -dotProduct - sqrtDiscriminant;\n    float tRight = -dotProduct + sqrtDiscriminant;\n\n    for (size_t i = 0; i < lineNo; ++i) {\n        const float denominator = det(lines[lineNo].direction, lines[i].direction);\n        const float numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        if (std::fabs(denominator) <= RVO_EPSILON) {\n            /* Lines lineNo and i are (almost) parallel. */\n            if (numerator < 0.0f) {\n                return false;\n            }\n            else {\n                continue;\n            }\n        }\n\n        const float t = numerator / denominator;\n\n        if (denominator >= 0.0f) {\n            /* Line i bounds line lineNo on the right. */\n            tRight = std::min(tRight, t);\n        }\n        else {\n            /* Line i bounds line lineNo on the left. */\n            tLeft = std::max(tLeft, t);\n        }\n\n        if (tLeft > tRight) {\n            return false;\n        }\n    }\n\n    if (directionOpt) {\n        /* Optimize direction. */\n        if (optVelocity * lines[lineNo].direction > 0.0f) {\n            /* Take right extreme. */\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            /* Take left extreme. */\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    else {\n        /* Optimize closest point. */\n        const float t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        if (t < tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        else if (t > tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    return true;\n}\n``` \n","slug":"2019-06-08-rvo","published":1,"updated":"2019-06-08T10:38:30.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6i4000v185h1n42sli8","content":"<h5 id=\"KDTREE\"><a href=\"#KDTREE\" class=\"headerlink\" title=\"KDTREE\"></a>KDTREE</h5><p>空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3 id=\"路径规划\"><a href=\"#路径规划\" class=\"headerlink\" title=\"路径规划\"></a>路径规划</h3><h5 id=\"高级规划\"><a href=\"#高级规划\" class=\"headerlink\" title=\"高级规划\"></a>高级规划</h5><p>DIJKSTRA 最短路径  等寻路方法  </p>\n<h5 id=\"底层规划\"><a href=\"#底层规划\" class=\"headerlink\" title=\"底层规划\"></a>底层规划</h5><p>VO RVO ORCA等Obstacle Avoidance避障算法  </p>\n<h3 id=\"KDTREE-1\"><a href=\"#KDTREE-1\" class=\"headerlink\" title=\"KDTREE\"></a>KDTREE</h3><p>这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3 id=\"VO-Velocity-Obstacles-速度障碍\"><a href=\"#VO-Velocity-Obstacles-速度障碍\" class=\"headerlink\" title=\"VO  Velocity Obstacles  速度障碍\"></a>VO  Velocity Obstacles  速度障碍</h3><p>核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外<br>抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  </p>\n<h3 id=\"RVO-Reciprocal-Velocity-Obstacles-互惠的速度障碍\"><a href=\"#RVO-Reciprocal-Velocity-Obstacles-互惠的速度障碍\" class=\"headerlink\" title=\"RVO Reciprocal Velocity Obstacles  互惠的速度障碍\"></a>RVO Reciprocal Velocity Obstacles  互惠的速度障碍</h3><p>核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   </p>\n<h3 id=\"ORCA-Optimal-Reciprocal-Collision-Avoidance-最优互惠碰撞避免\"><a href=\"#ORCA-Optimal-Reciprocal-Collision-Avoidance-最优互惠碰撞避免\" class=\"headerlink\" title=\"ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免\"></a>ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免</h3><p>核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   </p>\n<ul>\n<li><strong>对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA</strong>  </li>\n<li><strong>在候选集中求解跟自己偏好速度最近的一个速度vnewA</strong>  </li>\n</ul>\n<a id=\"more\"></a> \n<h5 id=\"computeNewVelocity\"><a href=\"#computeNewVelocity\" class=\"headerlink\" title=\"computeNewVelocity\"></a>computeNewVelocity</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Search for the best new velocity. */</span></div><div class=\"line\"><span class=\"keyword\">void</span> Agent::computeNewVelocity()</div><div class=\"line\">&#123;</div><div class=\"line\">    orcaLines_.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> numObstLines = orcaLines_.size();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeHorizon = <span class=\"number\">1.0f</span> / timeHorizon_;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* Create agent ORCA lines. */</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; agentNeighbors_.size(); ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> Agent *<span class=\"keyword\">const</span> other = agentNeighbors_[i].second;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativePosition = other-&gt;position_ - position_;</div><div class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativeVelocity = velocity_ - other-&gt;velocity_;</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> distSq = absSq(relativePosition);</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadius = radius_ + other-&gt;radius_;</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadiusSq = sqr(combinedRadius);</div><div class=\"line\"></div><div class=\"line\">        Line line;</div><div class=\"line\">        Vector2 u;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (distSq &gt; combinedRadiusSq) &#123;</div><div class=\"line\">            <span class=\"comment\">/* No collision. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;</div><div class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLengthSq = absSq(w);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct1 = w * relativePosition;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (dotProduct1 &lt; <span class=\"number\">0.0f</span> &amp;&amp; sqr(dotProduct1) &gt; combinedRadiusSq * wLengthSq) &#123;</div><div class=\"line\">                <span class=\"comment\">/* Project on cut-off circle. */</span></div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(wLengthSq);</div><div class=\"line\">                <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</div><div class=\"line\"></div><div class=\"line\">                line.direction = Vector2(unitW.y(), -unitW.x());</div><div class=\"line\">                u = (combinedRadius * invTimeHorizon - wLength) * unitW;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">/* Project on legs. */</span></div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> leg = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(distSq - combinedRadiusSq);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (det(relativePosition, w) &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">/* Project on left leg. */</span></div><div class=\"line\">                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">/* Project on right leg. */</span></div><div class=\"line\">                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct2 = relativeVelocity * line.direction;</div><div class=\"line\"></div><div class=\"line\">                u = dotProduct2 * line.direction - relativeVelocity;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">/* Collision. Project on cut-off circle of time timeStep. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeStep = <span class=\"number\">1.0f</span> / sim_-&gt;timeStep_;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeStep * relativePosition;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">abs</span>(w);</div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</div><div class=\"line\"></div><div class=\"line\">            line.direction = Vector2(unitW.y(), -unitW.x());</div><div class=\"line\">            u = (combinedRadius * invTimeStep - wLength) * unitW;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        line.point = velocity_ + <span class=\"number\">0.5f</span> * u;</div><div class=\"line\">        orcaLines_.push_back(line);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">size_t</span> lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, <span class=\"literal\">false</span>, newVelocity_);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (lineFail &lt; orcaLines_.size()) &#123;</div><div class=\"line\">        <span class=\"comment\">//linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"linearProgram2\"><a href=\"#linearProgram2\" class=\"headerlink\" title=\"linearProgram2\"></a>linearProgram2</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">size_t</span> linearProgram2(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (directionOpt) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">            * Optimize direction. Note that the optimization velocity is of unit</div><div class=\"line\">            * length in this case.</div><div class=\"line\">            */</div><div class=\"line\">        result = optVelocity * radius;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absSq(optVelocity) &gt; sqr(radius)) &#123;</div><div class=\"line\">        <span class=\"comment\">/* Optimize closest point and outside circle. */</span></div><div class=\"line\">        result = normalize(optVelocity) * radius;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* Optimize closest point and inside circle. */</span></div><div class=\"line\">        result = optVelocity;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lines.size(); ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (det(lines[i].direction, lines[i].point - result) &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">/* Result does not satisfy constraint i. Compute new optimal result. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 tempResult = result;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) &#123;</div><div class=\"line\">                result = tempResult;</div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> lines.size();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"linearProgram1\"><a href=\"#linearProgram1\" class=\"headerlink\" title=\"linearProgram1\"></a>linearProgram1</h5><pre><code class=\"cpp\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linearProgram1</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">size_t</span> lineNo, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</span>\n</span>{\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    <span class=\"keyword\">if</span> (discriminant &lt; <span class=\"number\">0.0f</span>) {\n        <span class=\"comment\">/* Max speed circle fully invalidates line lineNo. */</span>\n        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n    }\n\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sqrtDiscriminant = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(discriminant);\n    <span class=\"keyword\">float</span> tLeft = -dotProduct - sqrtDiscriminant;\n    <span class=\"keyword\">float</span> tRight = -dotProduct + sqrtDiscriminant;\n\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lineNo; ++i) {\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> denominator = det(lines[lineNo].direction, lines[i].direction);\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>(denominator) &lt;= RVO_EPSILON) {\n            <span class=\"comment\">/* Lines lineNo and i are (almost) parallel. */</span>\n            <span class=\"keyword\">if</span> (numerator &lt; <span class=\"number\">0.0f</span>) {\n                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n            }\n            <span class=\"keyword\">else</span> {\n                <span class=\"keyword\">continue</span>;\n            }\n        }\n\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = numerator / denominator;\n\n        <span class=\"keyword\">if</span> (denominator &gt;= <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Line i bounds line lineNo on the right. */</span>\n            tRight = <span class=\"built_in\">std</span>::min(tRight, t);\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Line i bounds line lineNo on the left. */</span>\n            tLeft = <span class=\"built_in\">std</span>::max(tLeft, t);\n        }\n\n        <span class=\"keyword\">if</span> (tLeft &gt; tRight) {\n            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n        }\n    }\n\n    <span class=\"keyword\">if</span> (directionOpt) {\n        <span class=\"comment\">/* Optimize direction. */</span>\n        <span class=\"keyword\">if</span> (optVelocity * lines[lineNo].direction &gt; <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Take right extreme. */</span>\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Take left extreme. */</span>\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    <span class=\"keyword\">else</span> {\n        <span class=\"comment\">/* Optimize closest point. */</span>\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        <span class=\"keyword\">if</span> (t &lt; tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &gt; tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"<h5 id=\"KDTREE\"><a href=\"#KDTREE\" class=\"headerlink\" title=\"KDTREE\"></a>KDTREE</h5><p>空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3 id=\"路径规划\"><a href=\"#路径规划\" class=\"headerlink\" title=\"路径规划\"></a>路径规划</h3><h5 id=\"高级规划\"><a href=\"#高级规划\" class=\"headerlink\" title=\"高级规划\"></a>高级规划</h5><p>DIJKSTRA 最短路径  等寻路方法  </p>\n<h5 id=\"底层规划\"><a href=\"#底层规划\" class=\"headerlink\" title=\"底层规划\"></a>底层规划</h5><p>VO RVO ORCA等Obstacle Avoidance避障算法  </p>\n<h3 id=\"KDTREE-1\"><a href=\"#KDTREE-1\" class=\"headerlink\" title=\"KDTREE\"></a>KDTREE</h3><p>这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3 id=\"VO-Velocity-Obstacles-速度障碍\"><a href=\"#VO-Velocity-Obstacles-速度障碍\" class=\"headerlink\" title=\"VO  Velocity Obstacles  速度障碍\"></a>VO  Velocity Obstacles  速度障碍</h3><p>核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外<br>抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  </p>\n<h3 id=\"RVO-Reciprocal-Velocity-Obstacles-互惠的速度障碍\"><a href=\"#RVO-Reciprocal-Velocity-Obstacles-互惠的速度障碍\" class=\"headerlink\" title=\"RVO Reciprocal Velocity Obstacles  互惠的速度障碍\"></a>RVO Reciprocal Velocity Obstacles  互惠的速度障碍</h3><p>核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   </p>\n<h3 id=\"ORCA-Optimal-Reciprocal-Collision-Avoidance-最优互惠碰撞避免\"><a href=\"#ORCA-Optimal-Reciprocal-Collision-Avoidance-最优互惠碰撞避免\" class=\"headerlink\" title=\"ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免\"></a>ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免</h3><p>核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   </p>\n<ul>\n<li><strong>对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA</strong>  </li>\n<li><strong>在候选集中求解跟自己偏好速度最近的一个速度vnewA</strong>  </li>\n</ul>","more":"<h5 id=\"computeNewVelocity\"><a href=\"#computeNewVelocity\" class=\"headerlink\" title=\"computeNewVelocity\"></a>computeNewVelocity</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Search for the best new velocity. */</span></div><div class=\"line\"><span class=\"keyword\">void</span> Agent::computeNewVelocity()</div><div class=\"line\">&#123;</div><div class=\"line\">    orcaLines_.clear();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> numObstLines = orcaLines_.size();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeHorizon = <span class=\"number\">1.0f</span> / timeHorizon_;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* Create agent ORCA lines. */</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; agentNeighbors_.size(); ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> Agent *<span class=\"keyword\">const</span> other = agentNeighbors_[i].second;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativePosition = other-&gt;position_ - position_;</div><div class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativeVelocity = velocity_ - other-&gt;velocity_;</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> distSq = absSq(relativePosition);</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadius = radius_ + other-&gt;radius_;</div><div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadiusSq = sqr(combinedRadius);</div><div class=\"line\"></div><div class=\"line\">        Line line;</div><div class=\"line\">        Vector2 u;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (distSq &gt; combinedRadiusSq) &#123;</div><div class=\"line\">            <span class=\"comment\">/* No collision. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;</div><div class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLengthSq = absSq(w);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct1 = w * relativePosition;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (dotProduct1 &lt; <span class=\"number\">0.0f</span> &amp;&amp; sqr(dotProduct1) &gt; combinedRadiusSq * wLengthSq) &#123;</div><div class=\"line\">                <span class=\"comment\">/* Project on cut-off circle. */</span></div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(wLengthSq);</div><div class=\"line\">                <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</div><div class=\"line\"></div><div class=\"line\">                line.direction = Vector2(unitW.y(), -unitW.x());</div><div class=\"line\">                u = (combinedRadius * invTimeHorizon - wLength) * unitW;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">/* Project on legs. */</span></div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> leg = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(distSq - combinedRadiusSq);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (det(relativePosition, w) &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">/* Project on left leg. */</span></div><div class=\"line\">                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">/* Project on right leg. */</span></div><div class=\"line\">                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct2 = relativeVelocity * line.direction;</div><div class=\"line\"></div><div class=\"line\">                u = dotProduct2 * line.direction - relativeVelocity;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">/* Collision. Project on cut-off circle of time timeStep. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeStep = <span class=\"number\">1.0f</span> / sim_-&gt;timeStep_;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeStep * relativePosition;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">abs</span>(w);</div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</div><div class=\"line\"></div><div class=\"line\">            line.direction = Vector2(unitW.y(), -unitW.x());</div><div class=\"line\">            u = (combinedRadius * invTimeStep - wLength) * unitW;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        line.point = velocity_ + <span class=\"number\">0.5f</span> * u;</div><div class=\"line\">        orcaLines_.push_back(line);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">size_t</span> lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, <span class=\"literal\">false</span>, newVelocity_);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (lineFail &lt; orcaLines_.size()) &#123;</div><div class=\"line\">        <span class=\"comment\">//linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"linearProgram2\"><a href=\"#linearProgram2\" class=\"headerlink\" title=\"linearProgram2\"></a>linearProgram2</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">size_t</span> linearProgram2(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (directionOpt) &#123;</div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">            * Optimize direction. Note that the optimization velocity is of unit</div><div class=\"line\">            * length in this case.</div><div class=\"line\">            */</div><div class=\"line\">        result = optVelocity * radius;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absSq(optVelocity) &gt; sqr(radius)) &#123;</div><div class=\"line\">        <span class=\"comment\">/* Optimize closest point and outside circle. */</span></div><div class=\"line\">        result = normalize(optVelocity) * radius;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">/* Optimize closest point and inside circle. */</span></div><div class=\"line\">        result = optVelocity;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lines.size(); ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (det(lines[i].direction, lines[i].point - result) &gt; <span class=\"number\">0.0f</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">/* Result does not satisfy constraint i. Compute new optimal result. */</span></div><div class=\"line\">            <span class=\"keyword\">const</span> Vector2 tempResult = result;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) &#123;</div><div class=\"line\">                result = tempResult;</div><div class=\"line\">                <span class=\"keyword\">return</span> i;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> lines.size();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"linearProgram1\"><a href=\"#linearProgram1\" class=\"headerlink\" title=\"linearProgram1\"></a>linearProgram1</h5><pre><code class=\"cpp\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linearProgram1</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">size_t</span> lineNo, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</span>\n</span>{\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    <span class=\"keyword\">if</span> (discriminant &lt; <span class=\"number\">0.0f</span>) {\n        <span class=\"comment\">/* Max speed circle fully invalidates line lineNo. */</span>\n        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n    }\n\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sqrtDiscriminant = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(discriminant);\n    <span class=\"keyword\">float</span> tLeft = -dotProduct - sqrtDiscriminant;\n    <span class=\"keyword\">float</span> tRight = -dotProduct + sqrtDiscriminant;\n\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lineNo; ++i) {\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> denominator = det(lines[lineNo].direction, lines[i].direction);\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>(denominator) &lt;= RVO_EPSILON) {\n            <span class=\"comment\">/* Lines lineNo and i are (almost) parallel. */</span>\n            <span class=\"keyword\">if</span> (numerator &lt; <span class=\"number\">0.0f</span>) {\n                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n            }\n            <span class=\"keyword\">else</span> {\n                <span class=\"keyword\">continue</span>;\n            }\n        }\n\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = numerator / denominator;\n\n        <span class=\"keyword\">if</span> (denominator &gt;= <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Line i bounds line lineNo on the right. */</span>\n            tRight = <span class=\"built_in\">std</span>::min(tRight, t);\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Line i bounds line lineNo on the left. */</span>\n            tLeft = <span class=\"built_in\">std</span>::max(tLeft, t);\n        }\n\n        <span class=\"keyword\">if</span> (tLeft &gt; tRight) {\n            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n        }\n    }\n\n    <span class=\"keyword\">if</span> (directionOpt) {\n        <span class=\"comment\">/* Optimize direction. */</span>\n        <span class=\"keyword\">if</span> (optVelocity * lines[lineNo].direction &gt; <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Take right extreme. */</span>\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Take left extreme. */</span>\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    <span class=\"keyword\">else</span> {\n        <span class=\"comment\">/* Optimize closest point. */</span>\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        <span class=\"keyword\">if</span> (t &lt; tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &gt; tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n}\n</code></pre>"},{"title":"AT&T 和 INTEL 汇编格式区别","date":"2019-01-11T09:21:00.000Z","author":"yawei.zhang","_content":"\n### 一、AT&T 格式Linux 汇编语法格式\n\n\n* 在 AT&T 汇编格式中，寄存器名要加上 '%' 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|   pushl %eax        |           push eax          |\n\n  <!-- more -->  \n\n* 在 AT&T 汇编格式中，用 '$' 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|       pushl $1       |           push 1            |\n\n\n* AT&T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&T 汇编格式中，目标操作数在源操作数的右边。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------        |        -----------          |\n|      addl $1, %eax   |         add eax, 1          |\n\n\n\n* 在 AT&T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀'b'、'w'、'l'分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 \"byte ptr\" 和 \"word ptr\" 等前缀来表示的。例如：\n\n|       AT&T格式       |         Intel格式                   |\n|       -------        |        -----------                  |\n|      movb val, %al   |         mov al, byte ptr val        |\n\n\n* 在 AT&T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上'*'作为前缀，而在 Intel 格式中则不需要。  \n* 远程转移指令和远程子调用指令的操作码，在 AT&T 汇编格式中为 \"ljump\" 和 \"lcall\"，而在 Intel 汇编格式中则为 \"jmp far\" 和 \"call far\"，即：  \n\n|       AT&T格式                    |         Intel格式                   |\n|       -------                     |        -----------                  |\n|      ljump $section, $offset      |        jmp far section:offset       |\n|     lcall $section, $offset       |        call far section:offset      |\n\n\n* 与之相应的远程返回指令则为：\n\n|       AT&T格式               |         Intel格式                 |\n|       -------                 |        -----------             |\n|      lret $stack_adjust      |        ret far stack_adjust      |\n\n\n* 内存操作数的寻址方式  \n\n|       AT&T格式                             |         Intel格式                                 |\n|       -------                              |        -----------                               |\n|      section:disp(base, index, scale)      |        section:[base + index*scale + disp]      |\n\n\n\n* 由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：\n```\ndisp + base + index * scale\n```\n\n* 下面是一些内存操作数的例子：  \n\n|       AT&T格式                             |          Intel格式                                 |\n|       -------                             |          -----------                               |\n|      movl -4(%ebp), %eax                  |          mov eax, [ebp - 4]                       |\n|      movl array(, %eax, 4), %eax          |          mov eax, [eax*4 + array]                 |\n|      movw array(%ebx, %eax, 4), %cx       |          mov cx, [ebx + 4*eax + array]              |\n|      movb $4, %fs:(%eax)                  |          mov fs:eax, 4                             |\n\n\n\n\n### 二、Hello World!\n\n既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 \"Hello World!\"，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  \n\n在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  \n\nLinux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&T 汇编语言格式：   \n\n###### 例1. AT&T 格式\n\n* #hello.s\n```\n.data                    # 数据段声明\n\n        msg : .string \"Hello, world!\\\\n\" # 要输出的字符串\n\n        len = . - msg                   # 字串长度\n\n.text                    # 代码段声明\n\n.global _start           # 指定入口函数\n\n_start:                  # 在屏幕上显示一个字符串\n\n        movl $len, %edx  # 参数三：字符串长度\n\n        movl $msg, %ecx  # 参数二：要显示的字符串\n\n        movl $1, %ebx    # 参数一：文件描述符(stdout)\n\n        movl $4, %eax    # 系统调用号(sys_write)\n\n        int  $0x80       # 调用内核功能\n\n                         # 退出程序\n\n        movl $0,%ebx     # 参数一：退出代码\n\n        movl $1,%eax     # 系统调用号(sys_exit)\n\n        int  $0x80       # 调用内核功能\n```\n\n初次接触到 AT&T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：\n\n###### 例2. Intel 格式\n\n; hello.asm\n```\nsection .data            ; 数据段声明\n\n        msg db \"Hello, world!\", 0xA     ; 要输出的字符串\n\n        len equ $ - msg                 ; 字串长度\n\nsection .text            ; 代码段声明\n\nglobal _start            ; 指定入口函数\n\n_start:                  ; 在屏幕上显示一个字符串\n\n        mov edx, len     ; 参数三：字符串长度\n\n        mov ecx, msg     ; 参数二：要显示的字符串\n\n        mov ebx, 1       ; 参数一：文件描述符(stdout)\n\n        mov eax, 4       ; 系统调用号(sys_write)\n\n        int 0x80         ; 调用内核功能\n\n                         ; 退出程序\n\n        mov ebx, 0       ; 参数一：退出代码\n\n        mov eax, 1       ; 系统调用号(sys_exit)\n\n        int 0x80         ; 调用内核功能\n```\n\n上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。\n\n### 四、系统调用\n\n即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。\n\n在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。\n\n和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。\n\n所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：\n```\nssize_t write(int fd, const void *buf, size_t count);\n```\n该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。\n\n或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：\n```\nvoid * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c\n```\n当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。\n\n由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。\n\n### 五、命令行参数\n\n在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：\n\n例3. 处理命令行参数\n\n##### args.S\n```\n.text\n\n.globl _start\n\n_start:\n\npopl %ecx # argc\n\nvnext:\n\npopl %ecx # argv\n\ntest %ecx, %ecx # 空指针表明结束\n\njz exit\n\nmovl %ecx, %ebx\n\nxorl %edx, %edx\n\nstrlen:\n\nmovb (%ebx), %al\n\ninc %edx\n\ninc %ebx\n\ntest %al, %al\n\njnz strlen\n\nmovb $10, -1(%ebx)\n\nmovl $4, %eax # 系统调用号(sys_write)\n\nmovl $1, %ebx # 文件描述符(stdout)\n\nint $0x80\n\njmp vnext\n\nexit: movl $1,%eax # 系统调用号(sys_exit)\n\nxorl %ebx, %ebx # 退出代码\n\nint $0x80\n\nret\n```\n\n### 六、GCC 内联汇编\n\n用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比\"纯粹\"的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。\n\nGCC 提供了很好的内联汇编支持，最基本的格式是：\n```\n__asm__(\"asm statements\");\n```\n例如：\n```\n__asm__(\"nop\");\n```\n如果需要同时执行多条汇编语句，则应该用\"\\\\n\\\\t\"将各个语句分隔开，例如：\n```\n__asm__( \"pushl %%eax \\\\n\\\\t\"\n\n\"movl $0, %%eax \\\\n\\\\t\"\n\n\"popl %eax\");\n```\n通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：\n```\n__asm__(\"asm statements\" : outputs : inputs : registers-modified);\n```\n插入到 C 代码中的汇编语句是以\":\"分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。\n\n在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出\"样板\"和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。\n\n在GCC 内联汇编语句的指令部中，加上前缀''%''的数字(如%0，%1)表示的就是需要使用寄存器的\"样板\"操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用'' %''作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个''%''，以免产生混淆。\n\n紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个\"约束\"，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以''=''号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。\n\n输出部后面是输入部，输入约束的格式和输出约束相似，但不带''=''号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。\n\n有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。\n\n下面是一个内联汇编的简单例子：\n\n###### 例4.内联汇编\n```\nint main()\n{\n    int a = 10, b = 0;\n\n    __asm__ __volatile__(\"movl %1, %%eax;\\\\n\\\\r\"\n\n    \"movl %%eax, %0;\"\n\n    :\"=r\"(b)\n\n    :\"r\"(a)\n\n    :\"%eax\");\n\n    printf(\"Result: %d, %d\\\\n\", a, b);\n}\n```\n\n上面的程序完成将变量a的值赋予变量b，有几点需要说明：\n\n变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。\n输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符''=''。\n在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个''%''，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个''%''的标识符都看成是操作数，而不是寄存器。\n内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。\n由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。\n在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上''%''作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：\n\n\n|                限定符                 |            意义          \n|                -----                 |            -----          \n|                \"m\"、\"v\"、\"o\"          |            内存单元        \n|                \"r\"                    |            任何寄存器         \n|                \"q\"                    |            寄存器eax、ebx、ecx、edx之一     \n|                \"i\"、\"h\"               |            直接操作数          \n|                \"E\"和\"F\"               |            浮点数           \n|                \"g\"                    |            任意          \n|                \"a\"、\"b\"、\"c\"、\"d\"      |            分别表示寄存器eax、ebx、ecx和edx          \n|                \"S\"和\"D\"               |            寄存器esi、edi          \n|                \"I\"                    |            常数（0至31）         \n\n\n\n\n### 七.  LIBCO协程的swap代码  \n```\n.globl coctx_swap\n#if !defined( __APPLE__ )\n.type  coctx_swap, @function\n#endif\ncoctx_swap:\n\n#if defined(__i386__)\n\tleal 4(%esp), %eax //sp \n\tmovl 4(%esp), %esp \n\tleal 32(%esp), %esp //parm a : &regs[7] + sizeof(void*)\n\n\tpushl %eax //esp ->parm a \n\n\tpushl %ebp\n\tpushl %esi\n\tpushl %edi\n\tpushl %edx\n\tpushl %ecx\n\tpushl %ebx\n\tpushl -4(%eax)\n\n\t\n\tmovl 4(%eax), %esp //parm b -> &regs[0]\n\n\tpopl %eax  //ret func addr\n\tpopl %ebx  \n\tpopl %ecx\n\tpopl %edx\n\tpopl %edi\n\tpopl %esi\n\tpopl %ebp\n\tpopl %esp\n\tpushl %eax //set ret func addr\n\n\txorl %eax, %eax\n\tret\n\n#elif defined(__x86_64__)\n\tleaq 8(%rsp),%rax\n\tleaq 112(%rdi),%rsp\n\tpushq %rax\n\tpushq %rbx\n\tpushq %rcx\n\tpushq %rdx\n\n\tpushq -8(%rax) //ret func addr\n\n\tpushq %rsi\n\tpushq %rdi\n\tpushq %rbp\n\tpushq %r8\n\tpushq %r9\n\tpushq %r12\n\tpushq %r13\n\tpushq %r14\n\tpushq %r15\n\t\n\tmovq %rsi, %rsp\n\tpopq %r15\n\tpopq %r14\n\tpopq %r13\n\tpopq %r12\n\tpopq %r9\n\tpopq %r8\n\tpopq %rbp\n\tpopq %rdi\n\tpopq %rsi\n\tpopq %rax //ret func addr\n\tpopq %rdx\n\tpopq %rcx\n\tpopq %rbx\n\tpopq %rsp\n\tpushq %rax\n\t\n\txorl %eax, %eax\n\tret\n#endif\n\n```\n\n使用方式:  \n```\n\n#define ESP 0\n#define EIP 1\n#define EAX 2\n#define ECX 3\n// -----------\n#define RSP 0\n#define RIP 1\n#define RBX 2\n#define RDI 3\n#define RSI 4\n\n#define RBP 5\n#define R12 6\n#define R13 7\n#define R14 8\n#define R15 9\n#define RDX 10\n#define RCX 11\n#define R8 12\n#define R9 13\n\n\n//----- --------\n// 32 bit\n// | regs[0]: ret |\n// | regs[1]: ebx |\n// | regs[2]: ecx |\n// | regs[3]: edx |\n// | regs[4]: edi |\n// | regs[5]: esi |\n// | regs[6]: ebp |\n// | regs[7]: eax |  = esp\nenum\n{\n\tkEIP = 0,\n\tkESP = 7,\n};\n\n//-------------\n// 64 bit\n//low | regs[0]: r15 |\n//    | regs[1]: r14 |\n//    | regs[2]: r13 |\n//    | regs[3]: r12 |\n//    | regs[4]: r9  |\n//    | regs[5]: r8  | \n//    | regs[6]: rbp |\n//    | regs[7]: rdi |\n//    | regs[8]: rsi |\n//    | regs[9]: ret |  //ret func addr\n//    | regs[10]: rdx |\n//    | regs[11]: rcx | \n//    | regs[12]: rbx |\n//hig | regs[13]: rsp |\nenum\n{\n\tkRDI = 7,\n\tkRSI = 8,\n\tkRETAddr = 9,\n\tkRSP = 13,\n};\n\nint coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )\n{\n\tchar *sp = ctx->ss_sp + ctx->ss_size;\n\tsp = (char*) ((unsigned long)sp & -16LL  );\n\n\tmemset(ctx->regs, 0, sizeof(ctx->regs));\n\n\tctx->regs[ kRSP ] = sp - 8;\n\n\tctx->regs[ kRETAddr] = (char*)pfn;\n\n\tctx->regs[ kRDI ] = (char*)s;\n\tctx->regs[ kRSI ] = (char*)s1;\n\treturn 0;\n}\n\nint coctx_init( coctx_t *ctx )\n{\n\tmemset( ctx,0,sizeof(*ctx));\n\treturn 0;\n}\n\nextern \"C\"\n{\n    extern void coctx_swap(coctx_t *, coctx_t*) asm(\"coctx_swap\");\n};\n\ncoctx_init(&worker.ctx);\ncoctx_make(&worker.ctx, stress, (void*)0, &worker);\nclock_t start = clock();\nfor (int i = 0; i < 1000 * 10000; ++i)\n{\n    coctx_swap(&main_co.ctx, &worker.ctx);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-01-11-AT&T-INTEL-ASM.md","raw":"---\ntitle: AT&T 和 INTEL 汇编格式区别  \ndate: 2019-01-11 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 一、AT&T 格式Linux 汇编语法格式\n\n\n* 在 AT&T 汇编格式中，寄存器名要加上 '%' 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|   pushl %eax        |           push eax          |\n\n  <!-- more -->  \n\n* 在 AT&T 汇编格式中，用 '$' 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|       pushl $1       |           push 1            |\n\n\n* AT&T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&T 汇编格式中，目标操作数在源操作数的右边。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------        |        -----------          |\n|      addl $1, %eax   |         add eax, 1          |\n\n\n\n* 在 AT&T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀'b'、'w'、'l'分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 \"byte ptr\" 和 \"word ptr\" 等前缀来表示的。例如：\n\n|       AT&T格式       |         Intel格式                   |\n|       -------        |        -----------                  |\n|      movb val, %al   |         mov al, byte ptr val        |\n\n\n* 在 AT&T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上'*'作为前缀，而在 Intel 格式中则不需要。  \n* 远程转移指令和远程子调用指令的操作码，在 AT&T 汇编格式中为 \"ljump\" 和 \"lcall\"，而在 Intel 汇编格式中则为 \"jmp far\" 和 \"call far\"，即：  \n\n|       AT&T格式                    |         Intel格式                   |\n|       -------                     |        -----------                  |\n|      ljump $section, $offset      |        jmp far section:offset       |\n|     lcall $section, $offset       |        call far section:offset      |\n\n\n* 与之相应的远程返回指令则为：\n\n|       AT&T格式               |         Intel格式                 |\n|       -------                 |        -----------             |\n|      lret $stack_adjust      |        ret far stack_adjust      |\n\n\n* 内存操作数的寻址方式  \n\n|       AT&T格式                             |         Intel格式                                 |\n|       -------                              |        -----------                               |\n|      section:disp(base, index, scale)      |        section:[base + index*scale + disp]      |\n\n\n\n* 由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：\n```\ndisp + base + index * scale\n```\n\n* 下面是一些内存操作数的例子：  \n\n|       AT&T格式                             |          Intel格式                                 |\n|       -------                             |          -----------                               |\n|      movl -4(%ebp), %eax                  |          mov eax, [ebp - 4]                       |\n|      movl array(, %eax, 4), %eax          |          mov eax, [eax*4 + array]                 |\n|      movw array(%ebx, %eax, 4), %cx       |          mov cx, [ebx + 4*eax + array]              |\n|      movb $4, %fs:(%eax)                  |          mov fs:eax, 4                             |\n\n\n\n\n### 二、Hello World!\n\n既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 \"Hello World!\"，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  \n\n在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  \n\nLinux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&T 汇编语言格式：   \n\n###### 例1. AT&T 格式\n\n* #hello.s\n```\n.data                    # 数据段声明\n\n        msg : .string \"Hello, world!\\\\n\" # 要输出的字符串\n\n        len = . - msg                   # 字串长度\n\n.text                    # 代码段声明\n\n.global _start           # 指定入口函数\n\n_start:                  # 在屏幕上显示一个字符串\n\n        movl $len, %edx  # 参数三：字符串长度\n\n        movl $msg, %ecx  # 参数二：要显示的字符串\n\n        movl $1, %ebx    # 参数一：文件描述符(stdout)\n\n        movl $4, %eax    # 系统调用号(sys_write)\n\n        int  $0x80       # 调用内核功能\n\n                         # 退出程序\n\n        movl $0,%ebx     # 参数一：退出代码\n\n        movl $1,%eax     # 系统调用号(sys_exit)\n\n        int  $0x80       # 调用内核功能\n```\n\n初次接触到 AT&T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：\n\n###### 例2. Intel 格式\n\n; hello.asm\n```\nsection .data            ; 数据段声明\n\n        msg db \"Hello, world!\", 0xA     ; 要输出的字符串\n\n        len equ $ - msg                 ; 字串长度\n\nsection .text            ; 代码段声明\n\nglobal _start            ; 指定入口函数\n\n_start:                  ; 在屏幕上显示一个字符串\n\n        mov edx, len     ; 参数三：字符串长度\n\n        mov ecx, msg     ; 参数二：要显示的字符串\n\n        mov ebx, 1       ; 参数一：文件描述符(stdout)\n\n        mov eax, 4       ; 系统调用号(sys_write)\n\n        int 0x80         ; 调用内核功能\n\n                         ; 退出程序\n\n        mov ebx, 0       ; 参数一：退出代码\n\n        mov eax, 1       ; 系统调用号(sys_exit)\n\n        int 0x80         ; 调用内核功能\n```\n\n上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。\n\n### 四、系统调用\n\n即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。\n\n在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。\n\n和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。\n\n所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：\n```\nssize_t write(int fd, const void *buf, size_t count);\n```\n该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。\n\n或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：\n```\nvoid * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c\n```\n当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。\n\n由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。\n\n### 五、命令行参数\n\n在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：\n\n例3. 处理命令行参数\n\n##### args.S\n```\n.text\n\n.globl _start\n\n_start:\n\npopl %ecx # argc\n\nvnext:\n\npopl %ecx # argv\n\ntest %ecx, %ecx # 空指针表明结束\n\njz exit\n\nmovl %ecx, %ebx\n\nxorl %edx, %edx\n\nstrlen:\n\nmovb (%ebx), %al\n\ninc %edx\n\ninc %ebx\n\ntest %al, %al\n\njnz strlen\n\nmovb $10, -1(%ebx)\n\nmovl $4, %eax # 系统调用号(sys_write)\n\nmovl $1, %ebx # 文件描述符(stdout)\n\nint $0x80\n\njmp vnext\n\nexit: movl $1,%eax # 系统调用号(sys_exit)\n\nxorl %ebx, %ebx # 退出代码\n\nint $0x80\n\nret\n```\n\n### 六、GCC 内联汇编\n\n用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比\"纯粹\"的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。\n\nGCC 提供了很好的内联汇编支持，最基本的格式是：\n```\n__asm__(\"asm statements\");\n```\n例如：\n```\n__asm__(\"nop\");\n```\n如果需要同时执行多条汇编语句，则应该用\"\\\\n\\\\t\"将各个语句分隔开，例如：\n```\n__asm__( \"pushl %%eax \\\\n\\\\t\"\n\n\"movl $0, %%eax \\\\n\\\\t\"\n\n\"popl %eax\");\n```\n通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：\n```\n__asm__(\"asm statements\" : outputs : inputs : registers-modified);\n```\n插入到 C 代码中的汇编语句是以\":\"分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。\n\n在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出\"样板\"和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。\n\n在GCC 内联汇编语句的指令部中，加上前缀''%''的数字(如%0，%1)表示的就是需要使用寄存器的\"样板\"操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用'' %''作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个''%''，以免产生混淆。\n\n紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个\"约束\"，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以''=''号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。\n\n输出部后面是输入部，输入约束的格式和输出约束相似，但不带''=''号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。\n\n有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。\n\n下面是一个内联汇编的简单例子：\n\n###### 例4.内联汇编\n```\nint main()\n{\n    int a = 10, b = 0;\n\n    __asm__ __volatile__(\"movl %1, %%eax;\\\\n\\\\r\"\n\n    \"movl %%eax, %0;\"\n\n    :\"=r\"(b)\n\n    :\"r\"(a)\n\n    :\"%eax\");\n\n    printf(\"Result: %d, %d\\\\n\", a, b);\n}\n```\n\n上面的程序完成将变量a的值赋予变量b，有几点需要说明：\n\n变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。\n输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符''=''。\n在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个''%''，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个''%''的标识符都看成是操作数，而不是寄存器。\n内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。\n由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。\n在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上''%''作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：\n\n\n|                限定符                 |            意义          \n|                -----                 |            -----          \n|                \"m\"、\"v\"、\"o\"          |            内存单元        \n|                \"r\"                    |            任何寄存器         \n|                \"q\"                    |            寄存器eax、ebx、ecx、edx之一     \n|                \"i\"、\"h\"               |            直接操作数          \n|                \"E\"和\"F\"               |            浮点数           \n|                \"g\"                    |            任意          \n|                \"a\"、\"b\"、\"c\"、\"d\"      |            分别表示寄存器eax、ebx、ecx和edx          \n|                \"S\"和\"D\"               |            寄存器esi、edi          \n|                \"I\"                    |            常数（0至31）         \n\n\n\n\n### 七.  LIBCO协程的swap代码  \n```\n.globl coctx_swap\n#if !defined( __APPLE__ )\n.type  coctx_swap, @function\n#endif\ncoctx_swap:\n\n#if defined(__i386__)\n\tleal 4(%esp), %eax //sp \n\tmovl 4(%esp), %esp \n\tleal 32(%esp), %esp //parm a : &regs[7] + sizeof(void*)\n\n\tpushl %eax //esp ->parm a \n\n\tpushl %ebp\n\tpushl %esi\n\tpushl %edi\n\tpushl %edx\n\tpushl %ecx\n\tpushl %ebx\n\tpushl -4(%eax)\n\n\t\n\tmovl 4(%eax), %esp //parm b -> &regs[0]\n\n\tpopl %eax  //ret func addr\n\tpopl %ebx  \n\tpopl %ecx\n\tpopl %edx\n\tpopl %edi\n\tpopl %esi\n\tpopl %ebp\n\tpopl %esp\n\tpushl %eax //set ret func addr\n\n\txorl %eax, %eax\n\tret\n\n#elif defined(__x86_64__)\n\tleaq 8(%rsp),%rax\n\tleaq 112(%rdi),%rsp\n\tpushq %rax\n\tpushq %rbx\n\tpushq %rcx\n\tpushq %rdx\n\n\tpushq -8(%rax) //ret func addr\n\n\tpushq %rsi\n\tpushq %rdi\n\tpushq %rbp\n\tpushq %r8\n\tpushq %r9\n\tpushq %r12\n\tpushq %r13\n\tpushq %r14\n\tpushq %r15\n\t\n\tmovq %rsi, %rsp\n\tpopq %r15\n\tpopq %r14\n\tpopq %r13\n\tpopq %r12\n\tpopq %r9\n\tpopq %r8\n\tpopq %rbp\n\tpopq %rdi\n\tpopq %rsi\n\tpopq %rax //ret func addr\n\tpopq %rdx\n\tpopq %rcx\n\tpopq %rbx\n\tpopq %rsp\n\tpushq %rax\n\t\n\txorl %eax, %eax\n\tret\n#endif\n\n```\n\n使用方式:  \n```\n\n#define ESP 0\n#define EIP 1\n#define EAX 2\n#define ECX 3\n// -----------\n#define RSP 0\n#define RIP 1\n#define RBX 2\n#define RDI 3\n#define RSI 4\n\n#define RBP 5\n#define R12 6\n#define R13 7\n#define R14 8\n#define R15 9\n#define RDX 10\n#define RCX 11\n#define R8 12\n#define R9 13\n\n\n//----- --------\n// 32 bit\n// | regs[0]: ret |\n// | regs[1]: ebx |\n// | regs[2]: ecx |\n// | regs[3]: edx |\n// | regs[4]: edi |\n// | regs[5]: esi |\n// | regs[6]: ebp |\n// | regs[7]: eax |  = esp\nenum\n{\n\tkEIP = 0,\n\tkESP = 7,\n};\n\n//-------------\n// 64 bit\n//low | regs[0]: r15 |\n//    | regs[1]: r14 |\n//    | regs[2]: r13 |\n//    | regs[3]: r12 |\n//    | regs[4]: r9  |\n//    | regs[5]: r8  | \n//    | regs[6]: rbp |\n//    | regs[7]: rdi |\n//    | regs[8]: rsi |\n//    | regs[9]: ret |  //ret func addr\n//    | regs[10]: rdx |\n//    | regs[11]: rcx | \n//    | regs[12]: rbx |\n//hig | regs[13]: rsp |\nenum\n{\n\tkRDI = 7,\n\tkRSI = 8,\n\tkRETAddr = 9,\n\tkRSP = 13,\n};\n\nint coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )\n{\n\tchar *sp = ctx->ss_sp + ctx->ss_size;\n\tsp = (char*) ((unsigned long)sp & -16LL  );\n\n\tmemset(ctx->regs, 0, sizeof(ctx->regs));\n\n\tctx->regs[ kRSP ] = sp - 8;\n\n\tctx->regs[ kRETAddr] = (char*)pfn;\n\n\tctx->regs[ kRDI ] = (char*)s;\n\tctx->regs[ kRSI ] = (char*)s1;\n\treturn 0;\n}\n\nint coctx_init( coctx_t *ctx )\n{\n\tmemset( ctx,0,sizeof(*ctx));\n\treturn 0;\n}\n\nextern \"C\"\n{\n    extern void coctx_swap(coctx_t *, coctx_t*) asm(\"coctx_swap\");\n};\n\ncoctx_init(&worker.ctx);\ncoctx_make(&worker.ctx, stress, (void*)0, &worker);\nclock_t start = clock();\nfor (int i = 0; i < 1000 * 10000; ++i)\n{\n    coctx_swap(&main_co.ctx, &worker.ctx);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-01-11-AT&T-INTEL-ASM","published":1,"updated":"2019-01-17T14:04:35.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2n4c6k2000y185hzmrkusuh","content":"<h3 id=\"一、AT-amp-T-格式Linux-汇编语法格式\"><a href=\"#一、AT-amp-T-格式Linux-汇编语法格式\" class=\"headerlink\" title=\"一、AT&amp;T 格式Linux 汇编语法格式\"></a>一、AT&amp;T 格式Linux 汇编语法格式</h3><ul>\n<li>在 AT&amp;T 汇编格式中，寄存器名要加上 ‘%’ 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pushl %eax</td>\n<td>push eax</td>\n</tr>\n</tbody>\n</table>\n  <a id=\"more\"></a>  \n<ul>\n<li>在 AT&amp;T 汇编格式中，用 ‘$’ 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pushl $1</td>\n<td>push 1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addl $1, %eax</td>\n<td>add eax, 1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀’b’、’w’、’l’分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 “byte ptr” 和 “word ptr” 等前缀来表示的。例如：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>movb val, %al</td>\n<td>mov al, byte ptr val</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上’*’作为前缀，而在 Intel 格式中则不需要。  </li>\n<li>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 “ljump” 和 “lcall”，而在 Intel 汇编格式中则为 “jmp far” 和 “call far”，即：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ljump $section, $offset</td>\n<td>jmp far section:offset</td>\n</tr>\n<tr>\n<td>lcall $section, $offset</td>\n<td>call far section:offset</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>与之相应的远程返回指令则为：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lret $stack_adjust</td>\n<td>ret far stack_adjust</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>内存操作数的寻址方式  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>section:disp(base, index, scale)</td>\n<td>section:[base + index*scale + disp]</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">disp + base + index * scale</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面是一些内存操作数的例子：  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>movl -4(%ebp), %eax</td>\n<td>mov eax, [ebp - 4]</td>\n</tr>\n<tr>\n<td>movl array(, %eax, 4), %eax</td>\n<td>mov eax, [eax*4 + array]</td>\n</tr>\n<tr>\n<td>movw array(%ebx, %eax, 4), %cx</td>\n<td>mov cx, [ebx + 4*eax + array]</td>\n</tr>\n<tr>\n<td>movb $4, %fs:(%eax)</td>\n<td>mov fs:eax, 4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"二、Hello-World\"><a href=\"#二、Hello-World\" class=\"headerlink\" title=\"二、Hello World!\"></a>二、Hello World!</h3><p>既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 “Hello World!”，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  </p>\n<p>在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  </p>\n<p>Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：   </p>\n<h6 id=\"例1-AT-amp-T-格式\"><a href=\"#例1-AT-amp-T-格式\" class=\"headerlink\" title=\"例1. AT&amp;T 格式\"></a>例1. AT&amp;T 格式</h6><ul>\n<li>#hello.s<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">.data                    # 数据段声明</div><div class=\"line\"></div><div class=\"line\">        msg : .string &quot;Hello, world!\\\\n&quot; # 要输出的字符串</div><div class=\"line\"></div><div class=\"line\">        len = . - msg                   # 字串长度</div><div class=\"line\"></div><div class=\"line\">.text                    # 代码段声明</div><div class=\"line\"></div><div class=\"line\">.global _start           # 指定入口函数</div><div class=\"line\"></div><div class=\"line\">_start:                  # 在屏幕上显示一个字符串</div><div class=\"line\"></div><div class=\"line\">        movl $len, %edx  # 参数三：字符串长度</div><div class=\"line\"></div><div class=\"line\">        movl $msg, %ecx  # 参数二：要显示的字符串</div><div class=\"line\"></div><div class=\"line\">        movl $1, %ebx    # 参数一：文件描述符(stdout)</div><div class=\"line\"></div><div class=\"line\">        movl $4, %eax    # 系统调用号(sys_write)</div><div class=\"line\"></div><div class=\"line\">        int  $0x80       # 调用内核功能</div><div class=\"line\"></div><div class=\"line\">                         # 退出程序</div><div class=\"line\"></div><div class=\"line\">        movl $0,%ebx     # 参数一：退出代码</div><div class=\"line\"></div><div class=\"line\">        movl $1,%eax     # 系统调用号(sys_exit)</div><div class=\"line\"></div><div class=\"line\">        int  $0x80       # 调用内核功能</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>初次接触到 AT&amp;T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：</p>\n<h6 id=\"例2-Intel-格式\"><a href=\"#例2-Intel-格式\" class=\"headerlink\" title=\"例2. Intel 格式\"></a>例2. Intel 格式</h6><p>; hello.asm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">section .data            ; 数据段声明</div><div class=\"line\"></div><div class=\"line\">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</div><div class=\"line\"></div><div class=\"line\">        len equ $ - msg                 ; 字串长度</div><div class=\"line\"></div><div class=\"line\">section .text            ; 代码段声明</div><div class=\"line\"></div><div class=\"line\">global _start            ; 指定入口函数</div><div class=\"line\"></div><div class=\"line\">_start:                  ; 在屏幕上显示一个字符串</div><div class=\"line\"></div><div class=\"line\">        mov edx, len     ; 参数三：字符串长度</div><div class=\"line\"></div><div class=\"line\">        mov ecx, msg     ; 参数二：要显示的字符串</div><div class=\"line\"></div><div class=\"line\">        mov ebx, 1       ; 参数一：文件描述符(stdout)</div><div class=\"line\"></div><div class=\"line\">        mov eax, 4       ; 系统调用号(sys_write)</div><div class=\"line\"></div><div class=\"line\">        int 0x80         ; 调用内核功能</div><div class=\"line\"></div><div class=\"line\">                         ; 退出程序</div><div class=\"line\"></div><div class=\"line\">        mov ebx, 0       ; 参数一：退出代码</div><div class=\"line\"></div><div class=\"line\">        mov eax, 1       ; 系统调用号(sys_exit)</div><div class=\"line\"></div><div class=\"line\">        int 0x80         ; 调用内核功能</div></pre></td></tr></table></figure></p>\n<p>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。</p>\n<h3 id=\"四、系统调用\"><a href=\"#四、系统调用\" class=\"headerlink\" title=\"四、系统调用\"></a>四、系统调用</h3><p>即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。</p>\n<p>在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。</p>\n<p>和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。</p>\n<p>所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssize_t write(int fd, const void *buf, size_t count);</div></pre></td></tr></table></figure></name></p>\n<p>该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。</p>\n<p>或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c</div></pre></td></tr></table></figure></p>\n<p>当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。</p>\n<p>由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。</p>\n<h3 id=\"五、命令行参数\"><a href=\"#五、命令行参数\" class=\"headerlink\" title=\"五、命令行参数\"></a>五、命令行参数</h3><p>在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：</p>\n<p>例3. 处理命令行参数</p>\n<h5 id=\"args-S\"><a href=\"#args-S\" class=\"headerlink\" title=\"args.S\"></a>args.S</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text</div><div class=\"line\"></div><div class=\"line\">.globl _start</div><div class=\"line\"></div><div class=\"line\">_start:</div><div class=\"line\"></div><div class=\"line\">popl %ecx # argc</div><div class=\"line\"></div><div class=\"line\">vnext:</div><div class=\"line\"></div><div class=\"line\">popl %ecx # argv</div><div class=\"line\"></div><div class=\"line\">test %ecx, %ecx # 空指针表明结束</div><div class=\"line\"></div><div class=\"line\">jz exit</div><div class=\"line\"></div><div class=\"line\">movl %ecx, %ebx</div><div class=\"line\"></div><div class=\"line\">xorl %edx, %edx</div><div class=\"line\"></div><div class=\"line\">strlen:</div><div class=\"line\"></div><div class=\"line\">movb (%ebx), %al</div><div class=\"line\"></div><div class=\"line\">inc %edx</div><div class=\"line\"></div><div class=\"line\">inc %ebx</div><div class=\"line\"></div><div class=\"line\">test %al, %al</div><div class=\"line\"></div><div class=\"line\">jnz strlen</div><div class=\"line\"></div><div class=\"line\">movb $10, -1(%ebx)</div><div class=\"line\"></div><div class=\"line\">movl $4, %eax # 系统调用号(sys_write)</div><div class=\"line\"></div><div class=\"line\">movl $1, %ebx # 文件描述符(stdout)</div><div class=\"line\"></div><div class=\"line\">int $0x80</div><div class=\"line\"></div><div class=\"line\">jmp vnext</div><div class=\"line\"></div><div class=\"line\">exit: movl $1,%eax # 系统调用号(sys_exit)</div><div class=\"line\"></div><div class=\"line\">xorl %ebx, %ebx # 退出代码</div><div class=\"line\"></div><div class=\"line\">int $0x80</div><div class=\"line\"></div><div class=\"line\">ret</div></pre></td></tr></table></figure>\n<h3 id=\"六、GCC-内联汇编\"><a href=\"#六、GCC-内联汇编\" class=\"headerlink\" title=\"六、GCC 内联汇编\"></a>六、GCC 内联汇编</h3><p>用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比”纯粹”的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。</p>\n<p>GCC 提供了很好的内联汇编支持，最基本的格式是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__(&quot;asm statements&quot;);</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__(&quot;nop&quot;);</div></pre></td></tr></table></figure></p>\n<p>如果需要同时执行多条汇编语句，则应该用”\\n\\t”将各个语句分隔开，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__( &quot;pushl %%eax \\\\n\\\\t&quot;</div><div class=\"line\"></div><div class=\"line\">&quot;movl $0, %%eax \\\\n\\\\t&quot;</div><div class=\"line\"></div><div class=\"line\">&quot;popl %eax&quot;);</div></pre></td></tr></table></figure></p>\n<p>通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__(&quot;asm statements&quot; : outputs : inputs : registers-modified);</div></pre></td></tr></table></figure></p>\n<p>插入到 C 代码中的汇编语句是以”:”分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。</p>\n<p>在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出”样板”和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。</p>\n<p>在GCC 内联汇编语句的指令部中，加上前缀’’%’’的数字(如%0，%1)表示的就是需要使用寄存器的”样板”操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用’’ %’’作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个’’%’’，以免产生混淆。</p>\n<p>紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个”约束”，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以’’=’’号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。</p>\n<p>输出部后面是输入部，输入约束的格式和输出约束相似，但不带’’=’’号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。</p>\n<p>有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。</p>\n<p>下面是一个内联汇编的简单例子：</p>\n<h6 id=\"例4-内联汇编\"><a href=\"#例4-内联汇编\" class=\"headerlink\" title=\"例4.内联汇编\"></a>例4.内联汇编</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    int a = 10, b = 0;</div><div class=\"line\"></div><div class=\"line\">    __asm__ __volatile__(&quot;movl %1, %%eax;\\\\n\\\\r&quot;</div><div class=\"line\"></div><div class=\"line\">    &quot;movl %%eax, %0;&quot;</div><div class=\"line\"></div><div class=\"line\">    :&quot;=r&quot;(b)</div><div class=\"line\"></div><div class=\"line\">    :&quot;r&quot;(a)</div><div class=\"line\"></div><div class=\"line\">    :&quot;%eax&quot;);</div><div class=\"line\"></div><div class=\"line\">    printf(&quot;Result: %d, %d\\\\n&quot;, a, b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的程序完成将变量a的值赋予变量b，有几点需要说明：</p>\n<p>变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。<br>输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符’’=’’。<br>在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个’’%’’，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个’’%’’的标识符都看成是操作数，而不是寄存器。<br>内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。<br>由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。<br>在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上’’%’’作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：</p>\n<table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>意义          </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“m”、”v”、”o”</td>\n<td>内存单元        </td>\n</tr>\n<tr>\n<td>“r”</td>\n<td>任何寄存器         </td>\n</tr>\n<tr>\n<td>“q”</td>\n<td>寄存器eax、ebx、ecx、edx之一     </td>\n</tr>\n<tr>\n<td>“i”、”h”</td>\n<td>直接操作数          </td>\n</tr>\n<tr>\n<td>“E”和”F”</td>\n<td>浮点数           </td>\n</tr>\n<tr>\n<td>“g”</td>\n<td>任意          </td>\n</tr>\n<tr>\n<td>“a”、”b”、”c”、”d”</td>\n<td>分别表示寄存器eax、ebx、ecx和edx          </td>\n</tr>\n<tr>\n<td>“S”和”D”</td>\n<td>寄存器esi、edi          </td>\n</tr>\n<tr>\n<td>“I”</td>\n<td>常数（0至31）         </td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"七-LIBCO协程的swap代码\"><a href=\"#七-LIBCO协程的swap代码\" class=\"headerlink\" title=\"七.  LIBCO协程的swap代码\"></a>七.  LIBCO协程的swap代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">.globl coctx_swap</div><div class=\"line\">#if !defined( __APPLE__ )</div><div class=\"line\">.type  coctx_swap, @function</div><div class=\"line\">#endif</div><div class=\"line\">coctx_swap:</div><div class=\"line\"></div><div class=\"line\">#if defined(__i386__)</div><div class=\"line\">\tleal 4(%esp), %eax //sp </div><div class=\"line\">\tmovl 4(%esp), %esp </div><div class=\"line\">\tleal 32(%esp), %esp //parm a : &amp;regs[7] + sizeof(void*)</div><div class=\"line\"></div><div class=\"line\">\tpushl %eax //esp -&gt;parm a </div><div class=\"line\"></div><div class=\"line\">\tpushl %ebp</div><div class=\"line\">\tpushl %esi</div><div class=\"line\">\tpushl %edi</div><div class=\"line\">\tpushl %edx</div><div class=\"line\">\tpushl %ecx</div><div class=\"line\">\tpushl %ebx</div><div class=\"line\">\tpushl -4(%eax)</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\tmovl 4(%eax), %esp //parm b -&gt; &amp;regs[0]</div><div class=\"line\"></div><div class=\"line\">\tpopl %eax  //ret func addr</div><div class=\"line\">\tpopl %ebx  </div><div class=\"line\">\tpopl %ecx</div><div class=\"line\">\tpopl %edx</div><div class=\"line\">\tpopl %edi</div><div class=\"line\">\tpopl %esi</div><div class=\"line\">\tpopl %ebp</div><div class=\"line\">\tpopl %esp</div><div class=\"line\">\tpushl %eax //set ret func addr</div><div class=\"line\"></div><div class=\"line\">\txorl %eax, %eax</div><div class=\"line\">\tret</div><div class=\"line\"></div><div class=\"line\">#elif defined(__x86_64__)</div><div class=\"line\">\tleaq 8(%rsp),%rax</div><div class=\"line\">\tleaq 112(%rdi),%rsp</div><div class=\"line\">\tpushq %rax</div><div class=\"line\">\tpushq %rbx</div><div class=\"line\">\tpushq %rcx</div><div class=\"line\">\tpushq %rdx</div><div class=\"line\"></div><div class=\"line\">\tpushq -8(%rax) //ret func addr</div><div class=\"line\"></div><div class=\"line\">\tpushq %rsi</div><div class=\"line\">\tpushq %rdi</div><div class=\"line\">\tpushq %rbp</div><div class=\"line\">\tpushq %r8</div><div class=\"line\">\tpushq %r9</div><div class=\"line\">\tpushq %r12</div><div class=\"line\">\tpushq %r13</div><div class=\"line\">\tpushq %r14</div><div class=\"line\">\tpushq %r15</div><div class=\"line\">\t</div><div class=\"line\">\tmovq %rsi, %rsp</div><div class=\"line\">\tpopq %r15</div><div class=\"line\">\tpopq %r14</div><div class=\"line\">\tpopq %r13</div><div class=\"line\">\tpopq %r12</div><div class=\"line\">\tpopq %r9</div><div class=\"line\">\tpopq %r8</div><div class=\"line\">\tpopq %rbp</div><div class=\"line\">\tpopq %rdi</div><div class=\"line\">\tpopq %rsi</div><div class=\"line\">\tpopq %rax //ret func addr</div><div class=\"line\">\tpopq %rdx</div><div class=\"line\">\tpopq %rcx</div><div class=\"line\">\tpopq %rbx</div><div class=\"line\">\tpopq %rsp</div><div class=\"line\">\tpushq %rax</div><div class=\"line\">\t</div><div class=\"line\">\txorl %eax, %eax</div><div class=\"line\">\tret</div><div class=\"line\">#endif</div></pre></td></tr></table></figure>\n<p>使用方式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#define ESP 0</div><div class=\"line\">#define EIP 1</div><div class=\"line\">#define EAX 2</div><div class=\"line\">#define ECX 3</div><div class=\"line\">// -----------</div><div class=\"line\">#define RSP 0</div><div class=\"line\">#define RIP 1</div><div class=\"line\">#define RBX 2</div><div class=\"line\">#define RDI 3</div><div class=\"line\">#define RSI 4</div><div class=\"line\"></div><div class=\"line\">#define RBP 5</div><div class=\"line\">#define R12 6</div><div class=\"line\">#define R13 7</div><div class=\"line\">#define R14 8</div><div class=\"line\">#define R15 9</div><div class=\"line\">#define RDX 10</div><div class=\"line\">#define RCX 11</div><div class=\"line\">#define R8 12</div><div class=\"line\">#define R9 13</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//----- --------</div><div class=\"line\">// 32 bit</div><div class=\"line\">// | regs[0]: ret |</div><div class=\"line\">// | regs[1]: ebx |</div><div class=\"line\">// | regs[2]: ecx |</div><div class=\"line\">// | regs[3]: edx |</div><div class=\"line\">// | regs[4]: edi |</div><div class=\"line\">// | regs[5]: esi |</div><div class=\"line\">// | regs[6]: ebp |</div><div class=\"line\">// | regs[7]: eax |  = esp</div><div class=\"line\">enum</div><div class=\"line\">&#123;</div><div class=\"line\">\tkEIP = 0,</div><div class=\"line\">\tkESP = 7,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//-------------</div><div class=\"line\">// 64 bit</div><div class=\"line\">//low | regs[0]: r15 |</div><div class=\"line\">//    | regs[1]: r14 |</div><div class=\"line\">//    | regs[2]: r13 |</div><div class=\"line\">//    | regs[3]: r12 |</div><div class=\"line\">//    | regs[4]: r9  |</div><div class=\"line\">//    | regs[5]: r8  | </div><div class=\"line\">//    | regs[6]: rbp |</div><div class=\"line\">//    | regs[7]: rdi |</div><div class=\"line\">//    | regs[8]: rsi |</div><div class=\"line\">//    | regs[9]: ret |  //ret func addr</div><div class=\"line\">//    | regs[10]: rdx |</div><div class=\"line\">//    | regs[11]: rcx | </div><div class=\"line\">//    | regs[12]: rbx |</div><div class=\"line\">//hig | regs[13]: rsp |</div><div class=\"line\">enum</div><div class=\"line\">&#123;</div><div class=\"line\">\tkRDI = 7,</div><div class=\"line\">\tkRSI = 8,</div><div class=\"line\">\tkRETAddr = 9,</div><div class=\"line\">\tkRSP = 13,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )</div><div class=\"line\">&#123;</div><div class=\"line\">\tchar *sp = ctx-&gt;ss_sp + ctx-&gt;ss_size;</div><div class=\"line\">\tsp = (char*) ((unsigned long)sp &amp; -16LL  );</div><div class=\"line\"></div><div class=\"line\">\tmemset(ctx-&gt;regs, 0, sizeof(ctx-&gt;regs));</div><div class=\"line\"></div><div class=\"line\">\tctx-&gt;regs[ kRSP ] = sp - 8;</div><div class=\"line\"></div><div class=\"line\">\tctx-&gt;regs[ kRETAddr] = (char*)pfn;</div><div class=\"line\"></div><div class=\"line\">\tctx-&gt;regs[ kRDI ] = (char*)s;</div><div class=\"line\">\tctx-&gt;regs[ kRSI ] = (char*)s1;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int coctx_init( coctx_t *ctx )</div><div class=\"line\">&#123;</div><div class=\"line\">\tmemset( ctx,0,sizeof(*ctx));</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">extern &quot;C&quot;</div><div class=\"line\">&#123;</div><div class=\"line\">    extern void coctx_swap(coctx_t *, coctx_t*) asm(&quot;coctx_swap&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">coctx_init(&amp;worker.ctx);</div><div class=\"line\">coctx_make(&amp;worker.ctx, stress, (void*)0, &amp;worker);</div><div class=\"line\">clock_t start = clock();</div><div class=\"line\">for (int i = 0; i &lt; 1000 * 10000; ++i)</div><div class=\"line\">&#123;</div><div class=\"line\">    coctx_swap(&amp;main_co.ctx, &amp;worker.ctx);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"一、AT-amp-T-格式Linux-汇编语法格式\"><a href=\"#一、AT-amp-T-格式Linux-汇编语法格式\" class=\"headerlink\" title=\"一、AT&amp;T 格式Linux 汇编语法格式\"></a>一、AT&amp;T 格式Linux 汇编语法格式</h3><ul>\n<li>在 AT&amp;T 汇编格式中，寄存器名要加上 ‘%’ 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pushl %eax</td>\n<td>push eax</td>\n</tr>\n</tbody>\n</table>","more":"<ul>\n<li>在 AT&amp;T 汇编格式中，用 ‘$’ 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pushl $1</td>\n<td>push 1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addl $1, %eax</td>\n<td>add eax, 1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀’b’、’w’、’l’分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 “byte ptr” 和 “word ptr” 等前缀来表示的。例如：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>movb val, %al</td>\n<td>mov al, byte ptr val</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上’*’作为前缀，而在 Intel 格式中则不需要。  </li>\n<li>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 “ljump” 和 “lcall”，而在 Intel 汇编格式中则为 “jmp far” 和 “call far”，即：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ljump $section, $offset</td>\n<td>jmp far section:offset</td>\n</tr>\n<tr>\n<td>lcall $section, $offset</td>\n<td>call far section:offset</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>与之相应的远程返回指令则为：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lret $stack_adjust</td>\n<td>ret far stack_adjust</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>内存操作数的寻址方式  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>section:disp(base, index, scale)</td>\n<td>section:[base + index*scale + disp]</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">disp + base + index * scale</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面是一些内存操作数的例子：  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>movl -4(%ebp), %eax</td>\n<td>mov eax, [ebp - 4]</td>\n</tr>\n<tr>\n<td>movl array(, %eax, 4), %eax</td>\n<td>mov eax, [eax*4 + array]</td>\n</tr>\n<tr>\n<td>movw array(%ebx, %eax, 4), %cx</td>\n<td>mov cx, [ebx + 4*eax + array]</td>\n</tr>\n<tr>\n<td>movb $4, %fs:(%eax)</td>\n<td>mov fs:eax, 4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"二、Hello-World\"><a href=\"#二、Hello-World\" class=\"headerlink\" title=\"二、Hello World!\"></a>二、Hello World!</h3><p>既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 “Hello World!”，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  </p>\n<p>在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  </p>\n<p>Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：   </p>\n<h6 id=\"例1-AT-amp-T-格式\"><a href=\"#例1-AT-amp-T-格式\" class=\"headerlink\" title=\"例1. AT&amp;T 格式\"></a>例1. AT&amp;T 格式</h6><ul>\n<li>#hello.s<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">.data                    # 数据段声明</div><div class=\"line\"></div><div class=\"line\">        msg : .string &quot;Hello, world!\\\\n&quot; # 要输出的字符串</div><div class=\"line\"></div><div class=\"line\">        len = . - msg                   # 字串长度</div><div class=\"line\"></div><div class=\"line\">.text                    # 代码段声明</div><div class=\"line\"></div><div class=\"line\">.global _start           # 指定入口函数</div><div class=\"line\"></div><div class=\"line\">_start:                  # 在屏幕上显示一个字符串</div><div class=\"line\"></div><div class=\"line\">        movl $len, %edx  # 参数三：字符串长度</div><div class=\"line\"></div><div class=\"line\">        movl $msg, %ecx  # 参数二：要显示的字符串</div><div class=\"line\"></div><div class=\"line\">        movl $1, %ebx    # 参数一：文件描述符(stdout)</div><div class=\"line\"></div><div class=\"line\">        movl $4, %eax    # 系统调用号(sys_write)</div><div class=\"line\"></div><div class=\"line\">        int  $0x80       # 调用内核功能</div><div class=\"line\"></div><div class=\"line\">                         # 退出程序</div><div class=\"line\"></div><div class=\"line\">        movl $0,%ebx     # 参数一：退出代码</div><div class=\"line\"></div><div class=\"line\">        movl $1,%eax     # 系统调用号(sys_exit)</div><div class=\"line\"></div><div class=\"line\">        int  $0x80       # 调用内核功能</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>初次接触到 AT&amp;T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：</p>\n<h6 id=\"例2-Intel-格式\"><a href=\"#例2-Intel-格式\" class=\"headerlink\" title=\"例2. Intel 格式\"></a>例2. Intel 格式</h6><p>; hello.asm<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">section .data            ; 数据段声明</div><div class=\"line\"></div><div class=\"line\">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</div><div class=\"line\"></div><div class=\"line\">        len equ $ - msg                 ; 字串长度</div><div class=\"line\"></div><div class=\"line\">section .text            ; 代码段声明</div><div class=\"line\"></div><div class=\"line\">global _start            ; 指定入口函数</div><div class=\"line\"></div><div class=\"line\">_start:                  ; 在屏幕上显示一个字符串</div><div class=\"line\"></div><div class=\"line\">        mov edx, len     ; 参数三：字符串长度</div><div class=\"line\"></div><div class=\"line\">        mov ecx, msg     ; 参数二：要显示的字符串</div><div class=\"line\"></div><div class=\"line\">        mov ebx, 1       ; 参数一：文件描述符(stdout)</div><div class=\"line\"></div><div class=\"line\">        mov eax, 4       ; 系统调用号(sys_write)</div><div class=\"line\"></div><div class=\"line\">        int 0x80         ; 调用内核功能</div><div class=\"line\"></div><div class=\"line\">                         ; 退出程序</div><div class=\"line\"></div><div class=\"line\">        mov ebx, 0       ; 参数一：退出代码</div><div class=\"line\"></div><div class=\"line\">        mov eax, 1       ; 系统调用号(sys_exit)</div><div class=\"line\"></div><div class=\"line\">        int 0x80         ; 调用内核功能</div></pre></td></tr></table></figure></p>\n<p>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。</p>\n<h3 id=\"四、系统调用\"><a href=\"#四、系统调用\" class=\"headerlink\" title=\"四、系统调用\"></a>四、系统调用</h3><p>即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。</p>\n<p>在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。</p>\n<p>和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。</p>\n<p>所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssize_t write(int fd, const void *buf, size_t count);</div></pre></td></tr></table></figure></name></p>\n<p>该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。</p>\n<p>或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c</div></pre></td></tr></table></figure></p>\n<p>当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。</p>\n<p>由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。</p>\n<h3 id=\"五、命令行参数\"><a href=\"#五、命令行参数\" class=\"headerlink\" title=\"五、命令行参数\"></a>五、命令行参数</h3><p>在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：</p>\n<p>例3. 处理命令行参数</p>\n<h5 id=\"args-S\"><a href=\"#args-S\" class=\"headerlink\" title=\"args.S\"></a>args.S</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">.text</div><div class=\"line\"></div><div class=\"line\">.globl _start</div><div class=\"line\"></div><div class=\"line\">_start:</div><div class=\"line\"></div><div class=\"line\">popl %ecx # argc</div><div class=\"line\"></div><div class=\"line\">vnext:</div><div class=\"line\"></div><div class=\"line\">popl %ecx # argv</div><div class=\"line\"></div><div class=\"line\">test %ecx, %ecx # 空指针表明结束</div><div class=\"line\"></div><div class=\"line\">jz exit</div><div class=\"line\"></div><div class=\"line\">movl %ecx, %ebx</div><div class=\"line\"></div><div class=\"line\">xorl %edx, %edx</div><div class=\"line\"></div><div class=\"line\">strlen:</div><div class=\"line\"></div><div class=\"line\">movb (%ebx), %al</div><div class=\"line\"></div><div class=\"line\">inc %edx</div><div class=\"line\"></div><div class=\"line\">inc %ebx</div><div class=\"line\"></div><div class=\"line\">test %al, %al</div><div class=\"line\"></div><div class=\"line\">jnz strlen</div><div class=\"line\"></div><div class=\"line\">movb $10, -1(%ebx)</div><div class=\"line\"></div><div class=\"line\">movl $4, %eax # 系统调用号(sys_write)</div><div class=\"line\"></div><div class=\"line\">movl $1, %ebx # 文件描述符(stdout)</div><div class=\"line\"></div><div class=\"line\">int $0x80</div><div class=\"line\"></div><div class=\"line\">jmp vnext</div><div class=\"line\"></div><div class=\"line\">exit: movl $1,%eax # 系统调用号(sys_exit)</div><div class=\"line\"></div><div class=\"line\">xorl %ebx, %ebx # 退出代码</div><div class=\"line\"></div><div class=\"line\">int $0x80</div><div class=\"line\"></div><div class=\"line\">ret</div></pre></td></tr></table></figure>\n<h3 id=\"六、GCC-内联汇编\"><a href=\"#六、GCC-内联汇编\" class=\"headerlink\" title=\"六、GCC 内联汇编\"></a>六、GCC 内联汇编</h3><p>用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比”纯粹”的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。</p>\n<p>GCC 提供了很好的内联汇编支持，最基本的格式是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__(&quot;asm statements&quot;);</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__(&quot;nop&quot;);</div></pre></td></tr></table></figure></p>\n<p>如果需要同时执行多条汇编语句，则应该用”\\n\\t”将各个语句分隔开，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__( &quot;pushl %%eax \\\\n\\\\t&quot;</div><div class=\"line\"></div><div class=\"line\">&quot;movl $0, %%eax \\\\n\\\\t&quot;</div><div class=\"line\"></div><div class=\"line\">&quot;popl %eax&quot;);</div></pre></td></tr></table></figure></p>\n<p>通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__asm__(&quot;asm statements&quot; : outputs : inputs : registers-modified);</div></pre></td></tr></table></figure></p>\n<p>插入到 C 代码中的汇编语句是以”:”分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。</p>\n<p>在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出”样板”和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。</p>\n<p>在GCC 内联汇编语句的指令部中，加上前缀’’%’’的数字(如%0，%1)表示的就是需要使用寄存器的”样板”操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用’’ %’’作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个’’%’’，以免产生混淆。</p>\n<p>紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个”约束”，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以’’=’’号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。</p>\n<p>输出部后面是输入部，输入约束的格式和输出约束相似，但不带’’=’’号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。</p>\n<p>有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。</p>\n<p>下面是一个内联汇编的简单例子：</p>\n<h6 id=\"例4-内联汇编\"><a href=\"#例4-内联汇编\" class=\"headerlink\" title=\"例4.内联汇编\"></a>例4.内联汇编</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">int main()</div><div class=\"line\">&#123;</div><div class=\"line\">    int a = 10, b = 0;</div><div class=\"line\"></div><div class=\"line\">    __asm__ __volatile__(&quot;movl %1, %%eax;\\\\n\\\\r&quot;</div><div class=\"line\"></div><div class=\"line\">    &quot;movl %%eax, %0;&quot;</div><div class=\"line\"></div><div class=\"line\">    :&quot;=r&quot;(b)</div><div class=\"line\"></div><div class=\"line\">    :&quot;r&quot;(a)</div><div class=\"line\"></div><div class=\"line\">    :&quot;%eax&quot;);</div><div class=\"line\"></div><div class=\"line\">    printf(&quot;Result: %d, %d\\\\n&quot;, a, b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的程序完成将变量a的值赋予变量b，有几点需要说明：</p>\n<p>变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。<br>输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符’’=’’。<br>在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个’’%’’，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个’’%’’的标识符都看成是操作数，而不是寄存器。<br>内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。<br>由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。<br>在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上’’%’’作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：</p>\n<table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>意义          </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“m”、”v”、”o”</td>\n<td>内存单元        </td>\n</tr>\n<tr>\n<td>“r”</td>\n<td>任何寄存器         </td>\n</tr>\n<tr>\n<td>“q”</td>\n<td>寄存器eax、ebx、ecx、edx之一     </td>\n</tr>\n<tr>\n<td>“i”、”h”</td>\n<td>直接操作数          </td>\n</tr>\n<tr>\n<td>“E”和”F”</td>\n<td>浮点数           </td>\n</tr>\n<tr>\n<td>“g”</td>\n<td>任意          </td>\n</tr>\n<tr>\n<td>“a”、”b”、”c”、”d”</td>\n<td>分别表示寄存器eax、ebx、ecx和edx          </td>\n</tr>\n<tr>\n<td>“S”和”D”</td>\n<td>寄存器esi、edi          </td>\n</tr>\n<tr>\n<td>“I”</td>\n<td>常数（0至31）         </td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"七-LIBCO协程的swap代码\"><a href=\"#七-LIBCO协程的swap代码\" class=\"headerlink\" title=\"七.  LIBCO协程的swap代码\"></a>七.  LIBCO协程的swap代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">.globl coctx_swap</div><div class=\"line\">#if !defined( __APPLE__ )</div><div class=\"line\">.type  coctx_swap, @function</div><div class=\"line\">#endif</div><div class=\"line\">coctx_swap:</div><div class=\"line\"></div><div class=\"line\">#if defined(__i386__)</div><div class=\"line\">\tleal 4(%esp), %eax //sp </div><div class=\"line\">\tmovl 4(%esp), %esp </div><div class=\"line\">\tleal 32(%esp), %esp //parm a : &amp;regs[7] + sizeof(void*)</div><div class=\"line\"></div><div class=\"line\">\tpushl %eax //esp -&gt;parm a </div><div class=\"line\"></div><div class=\"line\">\tpushl %ebp</div><div class=\"line\">\tpushl %esi</div><div class=\"line\">\tpushl %edi</div><div class=\"line\">\tpushl %edx</div><div class=\"line\">\tpushl %ecx</div><div class=\"line\">\tpushl %ebx</div><div class=\"line\">\tpushl -4(%eax)</div><div class=\"line\"></div><div class=\"line\">\t</div><div class=\"line\">\tmovl 4(%eax), %esp //parm b -&gt; &amp;regs[0]</div><div class=\"line\"></div><div class=\"line\">\tpopl %eax  //ret func addr</div><div class=\"line\">\tpopl %ebx  </div><div class=\"line\">\tpopl %ecx</div><div class=\"line\">\tpopl %edx</div><div class=\"line\">\tpopl %edi</div><div class=\"line\">\tpopl %esi</div><div class=\"line\">\tpopl %ebp</div><div class=\"line\">\tpopl %esp</div><div class=\"line\">\tpushl %eax //set ret func addr</div><div class=\"line\"></div><div class=\"line\">\txorl %eax, %eax</div><div class=\"line\">\tret</div><div class=\"line\"></div><div class=\"line\">#elif defined(__x86_64__)</div><div class=\"line\">\tleaq 8(%rsp),%rax</div><div class=\"line\">\tleaq 112(%rdi),%rsp</div><div class=\"line\">\tpushq %rax</div><div class=\"line\">\tpushq %rbx</div><div class=\"line\">\tpushq %rcx</div><div class=\"line\">\tpushq %rdx</div><div class=\"line\"></div><div class=\"line\">\tpushq -8(%rax) //ret func addr</div><div class=\"line\"></div><div class=\"line\">\tpushq %rsi</div><div class=\"line\">\tpushq %rdi</div><div class=\"line\">\tpushq %rbp</div><div class=\"line\">\tpushq %r8</div><div class=\"line\">\tpushq %r9</div><div class=\"line\">\tpushq %r12</div><div class=\"line\">\tpushq %r13</div><div class=\"line\">\tpushq %r14</div><div class=\"line\">\tpushq %r15</div><div class=\"line\">\t</div><div class=\"line\">\tmovq %rsi, %rsp</div><div class=\"line\">\tpopq %r15</div><div class=\"line\">\tpopq %r14</div><div class=\"line\">\tpopq %r13</div><div class=\"line\">\tpopq %r12</div><div class=\"line\">\tpopq %r9</div><div class=\"line\">\tpopq %r8</div><div class=\"line\">\tpopq %rbp</div><div class=\"line\">\tpopq %rdi</div><div class=\"line\">\tpopq %rsi</div><div class=\"line\">\tpopq %rax //ret func addr</div><div class=\"line\">\tpopq %rdx</div><div class=\"line\">\tpopq %rcx</div><div class=\"line\">\tpopq %rbx</div><div class=\"line\">\tpopq %rsp</div><div class=\"line\">\tpushq %rax</div><div class=\"line\">\t</div><div class=\"line\">\txorl %eax, %eax</div><div class=\"line\">\tret</div><div class=\"line\">#endif</div></pre></td></tr></table></figure>\n<p>使用方式:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#define ESP 0</div><div class=\"line\">#define EIP 1</div><div class=\"line\">#define EAX 2</div><div class=\"line\">#define ECX 3</div><div class=\"line\">// -----------</div><div class=\"line\">#define RSP 0</div><div class=\"line\">#define RIP 1</div><div class=\"line\">#define RBX 2</div><div class=\"line\">#define RDI 3</div><div class=\"line\">#define RSI 4</div><div class=\"line\"></div><div class=\"line\">#define RBP 5</div><div class=\"line\">#define R12 6</div><div class=\"line\">#define R13 7</div><div class=\"line\">#define R14 8</div><div class=\"line\">#define R15 9</div><div class=\"line\">#define RDX 10</div><div class=\"line\">#define RCX 11</div><div class=\"line\">#define R8 12</div><div class=\"line\">#define R9 13</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//----- --------</div><div class=\"line\">// 32 bit</div><div class=\"line\">// | regs[0]: ret |</div><div class=\"line\">// | regs[1]: ebx |</div><div class=\"line\">// | regs[2]: ecx |</div><div class=\"line\">// | regs[3]: edx |</div><div class=\"line\">// | regs[4]: edi |</div><div class=\"line\">// | regs[5]: esi |</div><div class=\"line\">// | regs[6]: ebp |</div><div class=\"line\">// | regs[7]: eax |  = esp</div><div class=\"line\">enum</div><div class=\"line\">&#123;</div><div class=\"line\">\tkEIP = 0,</div><div class=\"line\">\tkESP = 7,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//-------------</div><div class=\"line\">// 64 bit</div><div class=\"line\">//low | regs[0]: r15 |</div><div class=\"line\">//    | regs[1]: r14 |</div><div class=\"line\">//    | regs[2]: r13 |</div><div class=\"line\">//    | regs[3]: r12 |</div><div class=\"line\">//    | regs[4]: r9  |</div><div class=\"line\">//    | regs[5]: r8  | </div><div class=\"line\">//    | regs[6]: rbp |</div><div class=\"line\">//    | regs[7]: rdi |</div><div class=\"line\">//    | regs[8]: rsi |</div><div class=\"line\">//    | regs[9]: ret |  //ret func addr</div><div class=\"line\">//    | regs[10]: rdx |</div><div class=\"line\">//    | regs[11]: rcx | </div><div class=\"line\">//    | regs[12]: rbx |</div><div class=\"line\">//hig | regs[13]: rsp |</div><div class=\"line\">enum</div><div class=\"line\">&#123;</div><div class=\"line\">\tkRDI = 7,</div><div class=\"line\">\tkRSI = 8,</div><div class=\"line\">\tkRETAddr = 9,</div><div class=\"line\">\tkRSP = 13,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">int coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )</div><div class=\"line\">&#123;</div><div class=\"line\">\tchar *sp = ctx-&gt;ss_sp + ctx-&gt;ss_size;</div><div class=\"line\">\tsp = (char*) ((unsigned long)sp &amp; -16LL  );</div><div class=\"line\"></div><div class=\"line\">\tmemset(ctx-&gt;regs, 0, sizeof(ctx-&gt;regs));</div><div class=\"line\"></div><div class=\"line\">\tctx-&gt;regs[ kRSP ] = sp - 8;</div><div class=\"line\"></div><div class=\"line\">\tctx-&gt;regs[ kRETAddr] = (char*)pfn;</div><div class=\"line\"></div><div class=\"line\">\tctx-&gt;regs[ kRDI ] = (char*)s;</div><div class=\"line\">\tctx-&gt;regs[ kRSI ] = (char*)s1;</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int coctx_init( coctx_t *ctx )</div><div class=\"line\">&#123;</div><div class=\"line\">\tmemset( ctx,0,sizeof(*ctx));</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">extern &quot;C&quot;</div><div class=\"line\">&#123;</div><div class=\"line\">    extern void coctx_swap(coctx_t *, coctx_t*) asm(&quot;coctx_swap&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">coctx_init(&amp;worker.ctx);</div><div class=\"line\">coctx_make(&amp;worker.ctx, stress, (void*)0, &amp;worker);</div><div class=\"line\">clock_t start = clock();</div><div class=\"line\">for (int i = 0; i &lt; 1000 * 10000; ++i)</div><div class=\"line\">&#123;</div><div class=\"line\">    coctx_swap(&amp;main_co.ctx, &amp;worker.ctx);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2n4c6f8000e185hrck3i2qe","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6fd000i185h1hj1t7bu"},{"post_id":"ck2n4c6f3000a185hp77p66hz","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6fe000k185hct3f6r3u"},{"post_id":"ck2n4c6f9000f185hiyin37h4","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6fg000l185hjtvfyq8i"},{"post_id":"ck2n4c6fc000h185h7368qtvw","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6fg000m185hm4en1x7m"},{"post_id":"ck2n4c6f4000b185h9a90qi9b","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6fh000n185hwtctqd5f"},{"post_id":"ck2n4c6f7000d185hndrdkm8j","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6fi000o185hsq8xf50h"},{"post_id":"ck2n4c6i0000r185hw9cjjgxd","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6i4000u185h87na4tgn"},{"post_id":"ck2n4c6i3000t185hjcrcpdit","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6i6000w185hqcl5q475"},{"post_id":"ck2n4c6i4000v185h1n42sli8","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6i6000x185h6qzzg1pc"},{"post_id":"ck2n4c6k2000y185hzmrkusuh","category_id":"ck2n4c6f5000c185ht9cbkbm2","_id":"ck2n4c6k6000z185h53rmacmx"}],"PostTag":[],"Tag":[]}}